{
    "version": "https://jsonfeed.org/version/1",
    "title": "Ioannis Diamantidis",
    "home_page_url": "https://diamantidis.github.io",
    "feed_url": "https://diamantidis.github.io/feed.json",
    "description": "A blog where I publish posts about my learnings on software development, my thoughts, my ideas and topics that I find interesting.",
    "icon": "https://diamantidis.github.io/assets/socialIcon.png",
    "favicon": "https://diamantidis.github.io/favicon.ico",
    "expired": false,
    "author": {
        "name": "Ioannis Diamantidis",
        "url": "https://diamantidis.github.io"
    },
    "items": [
        
        {
            "id": "https://diamantidis.github.io/2021/10/17/two-way-communication-between-flutter-webview-and-a-web-page",
            "url": "https://diamantidis.github.io/2021/10/17/two-way-communication-between-flutter-webview-and-a-web-page",
            "title": "Flutter: Two-way communication between a WebView and a web page",
            "date_published": "2021-10-17T08:00:00+00:00",
            
            "date_modified": "2021-10-17T08:00:00+00:00",
            
            "author": {
                "name": "Ioannis Diamantidis",
                "url": "https://diamantidis.github.io"
            },
            "summary": "<p>Displaying web content in an app is quite easy and straightforward with WebViews but what happens when we want to open a communication channel between the app and the web page we load on a WebView?</p>\n\n",
            "content_html": "<p>Displaying web content in an app is quite easy and straightforward with WebViews but what happens when we want to open a communication channel between the app and the web page we load on a WebView?</p>\n\n<p>Let’s say, for example, you want to “listen” to a button click event happening on the web page and take some action in the app. Or you want to update a label of a web page with some data from the app.</p>\n\n<p>In this post, I will show you how you can communicate between the app and the web page of a WebView.</p>\n\n<p>In order to do so, I am going to use an example to demonstrate how to achieve this communication in both directions; both from the web page to the app and from the app to the web page.</p>\n\n<p>Let’s get started!</p>\n\n<blockquote>\n  <p>This post is based on <code class=\"language-plaintext highlighter-rouge\">Flutter 2.5.2</code> and <code class=\"language-plaintext highlighter-rouge\">Dart SDK 2.14.3</code></p>\n</blockquote>\n\n<h2 id=\"implementation\">Implementation</h2>\n\n<h3 id=\"the-package\">The package</h3>\n\n<p>Flutter doesn’t have built in support for WebViews.\nAs a result, we are going to use a package with name <a href=\"https://pub.dev/packages/webview_flutter\">webview_flutter</a>.</p>\n\n<p>So first thing first is to edit <code class=\"language-plaintext highlighter-rouge\">pubspec.yaml</code> and add the dependency:</p>\n<div class=\"language-yaml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"na\">dependencies</span><span class=\"pi\">:</span>\n  <span class=\"na\">flutter</span><span class=\"pi\">:</span>\n    <span class=\"na\">sdk</span><span class=\"pi\">:</span> <span class=\"s\">flutter</span>\n  <span class=\"na\">webview_flutter</span><span class=\"pi\">:</span> <span class=\"s\">^2.1.1</span>\n</code></pre></div></div>\n\n<h3 id=\"the-html-file\">The HTML file</h3>\n\n<p>Next, we are going to create the web page that we will later load in the WebView.</p>\n\n<p>For the sake of this article and for ease, we are going to create an <code class=\"language-plaintext highlighter-rouge\">index.html</code> file which we are going to load in the webview instead of loading a webpage from a URL.</p>\n\n<p>Let’s create an HTML file named <code class=\"language-plaintext highlighter-rouge\">index.html</code> inside the <code class=\"language-plaintext highlighter-rouge\">assets</code> folder (if the folder doesn’t exist, feel free to create one).</p>\n\n<p>Then, we will open this file and add the following content:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"nt\">&lt;html&gt;</span>\n    <span class=\"nt\">&lt;head&gt;</span>\n        <span class=\"nt\">&lt;meta</span> <span class=\"na\">name=</span><span class=\"s\">\"viewport\"</span> <span class=\"na\">content=</span><span class=\"s\">\"width=device-width, initial-scale=1\"</span><span class=\"nt\">/&gt;</span>\n        <span class=\"nt\">&lt;style&gt;</span>\n            <span class=\"nc\">.switch</span> <span class=\"p\">{</span> <span class=\"nl\">position</span><span class=\"p\">:</span> <span class=\"nb\">relative</span><span class=\"p\">;</span> <span class=\"nl\">display</span><span class=\"p\">:</span> <span class=\"n\">inline-block</span><span class=\"p\">;</span> <span class=\"nl\">width</span><span class=\"p\">:</span> <span class=\"m\">60px</span><span class=\"p\">;</span> <span class=\"nl\">height</span><span class=\"p\">:</span> <span class=\"m\">34px</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n            <span class=\"nc\">.switch</span> <span class=\"nt\">input</span> <span class=\"p\">{</span> <span class=\"nl\">opacity</span><span class=\"p\">:</span> <span class=\"m\">0</span><span class=\"p\">;</span> <span class=\"nl\">width</span><span class=\"p\">:</span> <span class=\"m\">0</span><span class=\"p\">;</span> <span class=\"nl\">height</span><span class=\"p\">:</span> <span class=\"m\">0</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n            <span class=\"nt\">label</span><span class=\"nc\">.switch</span> <span class=\"p\">{</span> <span class=\"nl\">outline</span><span class=\"p\">:</span> <span class=\"nb\">none</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n            <span class=\"nc\">.slider</span> <span class=\"p\">{</span> <span class=\"nl\">position</span><span class=\"p\">:</span> <span class=\"nb\">absolute</span><span class=\"p\">;</span> <span class=\"nl\">cursor</span><span class=\"p\">:</span> <span class=\"nb\">pointer</span><span class=\"p\">;</span> <span class=\"nl\">top</span><span class=\"p\">:</span> <span class=\"m\">0</span><span class=\"p\">;</span> <span class=\"nl\">left</span><span class=\"p\">:</span> <span class=\"m\">0</span><span class=\"p\">;</span> <span class=\"nl\">right</span><span class=\"p\">:</span> <span class=\"m\">0</span><span class=\"p\">;</span> <span class=\"nl\">bottom</span><span class=\"p\">:</span> <span class=\"m\">0</span><span class=\"p\">;</span> <span class=\"nl\">background-color</span><span class=\"p\">:</span> <span class=\"m\">#ccc</span><span class=\"p\">;</span> <span class=\"nl\">-webkit-transition</span><span class=\"p\">:</span> <span class=\"m\">.4s</span><span class=\"p\">;</span> <span class=\"nl\">transition</span><span class=\"p\">:</span> <span class=\"m\">.4s</span><span class=\"p\">;</span> <span class=\"nl\">outline</span><span class=\"p\">:</span> <span class=\"nb\">none</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n            <span class=\"nc\">.slider</span><span class=\"nd\">:before</span> <span class=\"p\">{</span> <span class=\"nl\">position</span><span class=\"p\">:</span> <span class=\"nb\">absolute</span><span class=\"p\">;</span> <span class=\"nl\">content</span><span class=\"p\">:</span> <span class=\"s1\">\"\"</span><span class=\"p\">;</span> <span class=\"nl\">height</span><span class=\"p\">:</span> <span class=\"m\">26px</span><span class=\"p\">;</span> <span class=\"nl\">width</span><span class=\"p\">:</span> <span class=\"m\">26px</span><span class=\"p\">;</span> <span class=\"nl\">left</span><span class=\"p\">:</span> <span class=\"m\">4px</span><span class=\"p\">;</span> <span class=\"nl\">bottom</span><span class=\"p\">:</span> <span class=\"m\">4px</span><span class=\"p\">;</span> <span class=\"nl\">background-color</span><span class=\"p\">:</span> <span class=\"no\">white</span><span class=\"p\">;</span> <span class=\"nl\">-webkit-transition</span><span class=\"p\">:</span> <span class=\"m\">.4s</span><span class=\"p\">;</span> <span class=\"nl\">transition</span><span class=\"p\">:</span> <span class=\"m\">.4s</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n            <span class=\"nt\">input</span><span class=\"nd\">:checked</span> <span class=\"o\">+</span> <span class=\"nc\">.slider</span> <span class=\"p\">{</span> <span class=\"nl\">background-color</span><span class=\"p\">:</span> <span class=\"m\">#2196F3</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n            <span class=\"nt\">input</span><span class=\"nd\">:focus</span> <span class=\"o\">+</span> <span class=\"nc\">.slider</span> <span class=\"p\">{</span> <span class=\"nl\">box-shadow</span><span class=\"p\">:</span> <span class=\"m\">0</span> <span class=\"m\">0</span> <span class=\"m\">1px</span> <span class=\"m\">#2196F3</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n            <span class=\"nt\">input</span><span class=\"nd\">:checked</span> <span class=\"o\">+</span> <span class=\"nc\">.slider</span><span class=\"nd\">:before</span> <span class=\"p\">{</span> <span class=\"nl\">-webkit-transform</span><span class=\"p\">:</span> <span class=\"n\">translateX</span><span class=\"p\">(</span><span class=\"m\">26px</span><span class=\"p\">);</span> <span class=\"nl\">-ms-transform</span><span class=\"p\">:</span> <span class=\"n\">translateX</span><span class=\"p\">(</span><span class=\"m\">26px</span><span class=\"p\">);</span> <span class=\"nl\">transform</span><span class=\"p\">:</span> <span class=\"n\">translateX</span><span class=\"p\">(</span><span class=\"m\">26px</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n            <span class=\"nc\">.slider.round</span> <span class=\"p\">{</span> <span class=\"nl\">border-radius</span><span class=\"p\">:</span> <span class=\"m\">34px</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n            <span class=\"nc\">.slider.round</span><span class=\"nd\">:before</span> <span class=\"p\">{</span> <span class=\"nl\">border-radius</span><span class=\"p\">:</span> <span class=\"m\">50%</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n        <span class=\"nt\">&lt;/style&gt;</span>\n    <span class=\"nt\">&lt;/head&gt;</span>\n    <span class=\"nt\">&lt;body&gt;</span>\n        <span class=\"nt\">&lt;h2</span> <span class=\"na\">id=</span><span class=\"s\">\"value\"</span><span class=\"nt\">&gt;</span>Toggle Switch is off<span class=\"nt\">&lt;/h2&gt;</span>\n        <span class=\"nt\">&lt;label</span> <span class=\"na\">class=</span><span class=\"s\">\"switch\"</span><span class=\"nt\">&gt;</span>\n            <span class=\"nt\">&lt;input</span> <span class=\"na\">type=</span><span class=\"s\">\"checkbox\"</span> <span class=\"na\">name=</span><span class=\"s\">\"myCheckbox\"</span><span class=\"nt\">&gt;</span>\n            <span class=\"nt\">&lt;span</span> <span class=\"na\">class=</span><span class=\"s\">\"slider round\"</span><span class=\"nt\">&gt;&lt;/span&gt;</span>\n        <span class=\"nt\">&lt;/label&gt;</span>\n    <span class=\"nt\">&lt;/body&gt;</span>\n<span class=\"nt\">&lt;/html&gt;</span>\n</code></pre></div></div>\n\n<blockquote>\n  <p>For brevity reasons, the CSS part is minimized.</p>\n</blockquote>\n\n<p>This HTML file produces a web page with a label and a toggle switch. Our goal for this article is to listen to the toggle events from the app and update the text on the label to represent the corresponding state of the toggle switch.</p>\n\n<p>To be able to access this <code class=\"language-plaintext highlighter-rouge\">html</code> file from our application, we have to edit <code class=\"language-plaintext highlighter-rouge\">pubspec.yaml</code> and add the following under the <code class=\"language-plaintext highlighter-rouge\">flutter</code> section:</p>\n<div class=\"language-yaml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"na\">flutter</span><span class=\"pi\">:</span>\n\n  <span class=\"na\">assets</span><span class=\"pi\">:</span>\n    <span class=\"pi\">-</span> <span class=\"s\">assets/index.html</span>\n</code></pre></div></div>\n\n<h3 id=\"the-app\">The app</h3>\n\n<p>Now, with all the preparations done, we can focus on the app!</p>\n\n<p>First of all, we will import the package:</p>\n<div class=\"language-dart highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"s\">'package:webview_flutter/webview_flutter.dart'</span><span class=\"o\">;</span>\n</code></pre></div></div>\n\n<p>Then, we can create our webview like this:</p>\n\n<div class=\"language-dart highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">WebViewController</span><span class=\"o\">?</span> <span class=\"n\">_webViewController</span><span class=\"o\">;</span>\n\n<span class=\"n\">Widget</span> <span class=\"nf\">buildWebView</span><span class=\"p\">(</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">WebView</span><span class=\"o\">(</span>\n        <span class=\"nl\">initialUrl:</span> <span class=\"s\">'about:blank'</span><span class=\"o\">,</span>\n        <span class=\"nl\">javascriptMode:</span> <span class=\"n\">JavascriptMode</span><span class=\"o\">.</span><span class=\"na\">unrestricted</span><span class=\"o\">,</span>\n        <span class=\"nl\">onWebViewCreated:</span> <span class=\"o\">(</span><span class=\"n\">WebViewController</span> <span class=\"n\">webViewController</span><span class=\"o\">)</span> <span class=\"n\">async</span> <span class=\"o\">{</span>\n            <span class=\"n\">_webViewController</span> <span class=\"o\">=</span> <span class=\"n\">webViewController</span><span class=\"o\">;</span>\n            <span class=\"kt\">String</span> <span class=\"n\">fileContent</span> <span class=\"o\">=</span> <span class=\"n\">await</span> <span class=\"n\">rootBundle</span><span class=\"o\">.</span><span class=\"na\">loadString</span><span class=\"o\">(</span><span class=\"s\">'assets/index.html'</span><span class=\"o\">);</span>\n            <span class=\"n\">_webViewController</span><span class=\"o\">?.</span><span class=\"na\">loadUrl</span><span class=\"o\">(</span><span class=\"n\">Uri</span><span class=\"o\">.</span><span class=\"na\">dataFromString</span><span class=\"o\">(</span><span class=\"n\">fileContent</span><span class=\"o\">,</span> <span class=\"nl\">mimeType:</span> <span class=\"s\">'text/html'</span><span class=\"o\">,</span> <span class=\"nl\">encoding:</span> <span class=\"n\">Encoding</span><span class=\"o\">.</span><span class=\"na\">getByName</span><span class=\"o\">(</span><span class=\"s\">'utf-8'</span><span class=\"o\">)).</span><span class=\"na\">toString</span><span class=\"o\">());</span>\n        <span class=\"o\">},</span>\n    <span class=\"o\">);</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n<p>In this snippet, we added a function that will return a new <code class=\"language-plaintext highlighter-rouge\">WebView</code> and we pass some parameters.</p>\n\n<p>Firstly, we will use <code class=\"language-plaintext highlighter-rouge\">about:black</code> as the initial URL to load an empty page.\nThen, we will set <code class=\"language-plaintext highlighter-rouge\">javascriptMode</code> to <code class=\"language-plaintext highlighter-rouge\">unrestricted</code> to allow the execution of Javascript code, and lastly, when the web view is created, we will load the content of the <code class=\"language-plaintext highlighter-rouge\">index.html</code> and load it to the web view.</p>\n\n<p>The only thing left is to call this function from the <code class=\"language-plaintext highlighter-rouge\">Widget build(BuildContext context)</code>, add the required imports and run the app. If you do so, you will be able to see the page with the label and the toggle!</p>\n\n<p><img src=\"https://diamantidis.github.io/assets/fl_webview/toggle_off.jpeg\" alt=\"WKWebView with a toggle screenshot\" /></p>\n\n<h2 id=\"adding-a-message-handler\">Adding a message handler</h2>\n\n<p>The next step is to enable our <code class=\"language-plaintext highlighter-rouge\">WebView</code> to receive messages from the web page. \nFor this, we will update the <code class=\"language-plaintext highlighter-rouge\">WebView</code> we created before and add the <code class=\"language-plaintext highlighter-rouge\">javascriptChannels:</code> parameter, like in the following snippet:</p>\n\n<div class=\"language-dart highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">Widget</span> <span class=\"nf\">buildWebView</span><span class=\"p\">(</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">WebView</span><span class=\"o\">(</span>\n        <span class=\"o\">.</span>\n        <span class=\"o\">.</span>\n        <span class=\"o\">.</span>\n        <span class=\"nl\">javascriptChannels:</span> <span class=\"o\">&lt;</span><span class=\"n\">JavascriptChannel</span><span class=\"o\">&gt;{</span>\n            <span class=\"n\">JavascriptChannel</span><span class=\"o\">(</span>\n                <span class=\"nl\">name:</span> <span class=\"s\">'messageHandler'</span><span class=\"o\">,</span>\n                <span class=\"nl\">onMessageReceived:</span> <span class=\"o\">(</span><span class=\"n\">JavascriptMessage</span> <span class=\"n\">message</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n                    <span class=\"n\">print</span><span class=\"o\">(</span><span class=\"s\">\"message from the web view=</span><span class=\"se\">\\\"</span><span class=\"si\">${message.message}</span><span class=\"se\">\\\"</span><span class=\"s\">\"</span><span class=\"o\">);</span>\n                <span class=\"o\">},</span>\n            <span class=\"o\">)</span>\n        <span class=\"o\">},</span>\n    <span class=\"o\">);</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>Here, we create a new <code class=\"language-plaintext highlighter-rouge\">JavascriptChannel</code> with name <code class=\"language-plaintext highlighter-rouge\">messageHandler</code> and provide a callback for when a message is received. For now, we just print the message.</p>\n\n<p>We are now ready to send our messages from the web page.</p>\n\n<p>Let’s see how!</p>\n\n<h3 id=\"sending-message-from-the-webpage\">Sending message from the webpage</h3>\n\n<p>For this part, we are going to use some <code class=\"language-plaintext highlighter-rouge\">JavaScript</code> to listen to the toggle events and then send a message to the app. This message will be different if the toggle is selected or not. Let’s edit our HTML file and before the closing <code class=\"language-plaintext highlighter-rouge\">&lt;/body&gt;</code> tag, add the following content:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;script </span><span class=\"na\">type=</span><span class=\"s\">\"text/javascript\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">_selector</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">input[name=myCheckbox]</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n    <span class=\"nx\">_selector</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">change</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">message</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">_selector</span><span class=\"p\">.</span><span class=\"nx\">checked</span><span class=\"p\">)</span> <span class=\"p\">?</span> <span class=\"dl\">\"</span><span class=\"s2\">Toggle Switch is on</span><span class=\"dl\">\"</span> <span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Toggle Switch is off</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">messageHandler</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"nx\">messageHandler</span><span class=\"p\">.</span><span class=\"nx\">postMessage</span><span class=\"p\">(</span><span class=\"nx\">message</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n        <span class=\"p\">});</span>\n<span class=\"nt\">&lt;/script&gt;</span>\n</code></pre></div></div>\n\n<p>In this script, we are adding an <code class=\"language-plaintext highlighter-rouge\">eventListener</code> for the toggle change event, and depending on whether it is selected or not, we are using the <code class=\"language-plaintext highlighter-rouge\">messageHandler</code> that we created previously, to call the function <code class=\"language-plaintext highlighter-rouge\">postMessage</code>, which in turn will trigger the <code class=\"language-plaintext highlighter-rouge\">onMessageReceived</code> of the <code class=\"language-plaintext highlighter-rouge\">JavascriptChannel</code> with the name <code class=\"language-plaintext highlighter-rouge\">messageHandler</code>.</p>\n\n<p>If you run the app and turn the toggle on and off, you will be able to see some messages on the console like <code class=\"language-plaintext highlighter-rouge\">message from the web view=\"Toggle Switch is on\"</code>.</p>\n\n<p>The last thing to achieve our goal is to update the label of the web page when we change the value of the toggle.</p>\n\n<h3 id=\"evaluating-javascript-to-update-webpages-ui\">Evaluating JavaScript to update webpage’s UI</h3>\n\n<p><code class=\"language-plaintext highlighter-rouge\">WebViewController</code> has a function with name <code class=\"language-plaintext highlighter-rouge\">evaluateJavascript</code> and this is what we are going to use to update the UI.</p>\n\n<p>Head over to the definition of the <code class=\"language-plaintext highlighter-rouge\">JavascriptChannel</code> and instead of the <code class=\"language-plaintext highlighter-rouge\">print</code> command on the <code class=\"language-plaintext highlighter-rouge\">onMessageReceived</code> callback, add the following snippet:</p>\n\n<div class=\"language-dart highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">final</span> <span class=\"n\">script</span> <span class=\"o\">=</span> <span class=\"s\">\"document.getElementById('value').innerText=</span><span class=\"se\">\\\"</span><span class=\"si\">${message.message}</span><span class=\"se\">\\\"</span><span class=\"s\">\"</span><span class=\"o\">;</span>\n<span class=\"n\">_webViewController</span><span class=\"o\">?.</span><span class=\"na\">evaluateJavascript</span><span class=\"o\">(</span><span class=\"n\">script</span><span class=\"o\">);</span>\n</code></pre></div></div>\n\n<p>In this snippet, we are creating a variable with the JavaScript code to change the label on the web page, and then use the <code class=\"language-plaintext highlighter-rouge\">evaluateJavaScript</code> to execute this code.</p>\n\n<p>And that’s about it, if you now run the app, the text of the label will change when the toggle is switched on or off.</p>\n\n<p><img src=\"https://diamantidis.github.io/assets/fl_webview/toggle_animation.gif\" alt=\"WebView with toggle on and off screenshot\" /></p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>In this post, we have seen how to achieve bidirectional communication between a WebView and a web page. Using this, we can use events from the website to trigger actions on the app and similarly adjust the content of the loaded website based on the information we have on the app.</p>\n\n<p>I hope that you find this post useful and if you have any questions or comments about this post, feel free to reach out to me on <a href=\"https://twitter.com/diamantidis_io\">Twitter</a>!</p>\n\n<p>Until next time!</p>\n\n",
            "tags": ["Flutter"],
            "image": "https://diamantidis.github.io/%7B%22path%22=%3E%22/assets/social/flutter_webview.png%22,%20%22width%22=%3E768,%20%22height%22=%3E512%7D"
        },
        
        {
            "id": "https://diamantidis.github.io/2021/10/10/exploring-flutter-scrollable-ensurevisible",
            "url": "https://diamantidis.github.io/2021/10/10/exploring-flutter-scrollable-ensurevisible",
            "title": "Exploring Flutter's Scrollable.ensureVisible",
            "date_published": "2021-10-10T04:00:00+00:00",
            
            "date_modified": "2021-10-10T04:00:00+00:00",
            
            "author": {
                "name": "Ioannis Diamantidis",
                "url": "https://diamantidis.github.io"
            },
            "summary": "<p>Have you ever had to build an app with a scroll view of multiple widgets with different heights, and you wanted to add a link so that the user can automatically scroll from one widget to another? One such example could be the table of contents for an article or a menu.</p>\n\n",
            "content_html": "<p>Have you ever had to build an app with a scroll view of multiple widgets with different heights, and you wanted to add a link so that the user can automatically scroll from one widget to another? One such example could be the table of contents for an article or a menu.</p>\n\n<p>In this post, I will showcase how we can implement this and in order to do so, I am going to use a screen with a few sections and a table of contents at the top of the screen with links to the corresponding sections.</p>\n\n<p>Let’s see how!</p>\n\n<blockquote>\n  <p>This post is based on <code class=\"language-plaintext highlighter-rouge\">Flutter 2.5.2</code> and <code class=\"language-plaintext highlighter-rouge\">Dart SDK 2.14.3</code></p>\n</blockquote>\n\n<h2 id=\"solution\">Solution</h2>\n\n<p>To do so, we are going to use <a href=\"https://api.flutter.dev/flutter/widgets/Scrollable/ensureVisible.html\"><code class=\"language-plaintext highlighter-rouge\">Scrollable.ensureVisible</code></a>  within a <code class=\"language-plaintext highlighter-rouge\">SingleChildScrollView</code> widget with a <code class=\"language-plaintext highlighter-rouge\">Column</code> child.</p>\n\n<p>Briefly, we will create a <code class=\"language-plaintext highlighter-rouge\">GlobalKey()</code> for each section. Then we will use this key as the key of the widget that the link will be targeting. Finally, we are going to use this key when we press the link from the table of contents like in the following snippet:</p>\n\n<div class=\"language-dart highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">final</span> <span class=\"n\">targetContext</span> <span class=\"o\">=</span> <span class=\"n\">targetKey</span><span class=\"o\">.</span><span class=\"na\">currentContext</span><span class=\"o\">;</span>\n<span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">targetContext</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"n\">Scrollable</span><span class=\"o\">.</span><span class=\"na\">ensureVisible</span><span class=\"o\">(</span>\n        <span class=\"n\">targetContext</span><span class=\"o\">,</span>\n        <span class=\"nl\">duration:</span> <span class=\"kd\">const</span> <span class=\"n\">Duration</span><span class=\"o\">(</span><span class=\"nl\">milliseconds:</span> <span class=\"mi\">400</span><span class=\"o\">),</span>\n        <span class=\"nl\">curve:</span> <span class=\"n\">Curves</span><span class=\"o\">.</span><span class=\"na\">easeInOut</span><span class=\"o\">,</span>\n    <span class=\"o\">);</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n<p>As a result, the target widget will get visible after 400 milliseconds.</p>\n\n<p>In the next section, I will try to give a more detailed presentation of the implementation!</p>\n\n<h2 id=\"implementation\">Implementation</h2>\n\n<h3 id=\"prep-work\">Prep work</h3>\n\n<p>First of all, let’s create a data structure that will represent the section. It will have a key, a title and a body.</p>\n\n<div class=\"language-dart highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nc\">Section</span> <span class=\"o\">{</span>\n  <span class=\"kd\">final</span> <span class=\"n\">GlobalKey</span> <span class=\"n\">key</span><span class=\"o\">;</span>\n  <span class=\"kd\">final</span> <span class=\"kt\">String</span> <span class=\"n\">title</span><span class=\"o\">;</span>\n  <span class=\"kd\">final</span> <span class=\"kt\">String</span> <span class=\"n\">body</span><span class=\"o\">;</span>\n\n  <span class=\"kd\">const</span> <span class=\"n\">Section</span><span class=\"o\">(</span><span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">key</span><span class=\"o\">,</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">title</span><span class=\"o\">,</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">body</span><span class=\"o\">);</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>The title will be used in the table of contents and the key will be used to scroll to the target section.</p>\n\n<p>Then, we will use this class to generate some dummy data for our example. We can use some lorem ipsum to represent some long text.</p>\n\n<div class=\"language-dart highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">const</span> <span class=\"n\">reallyLongBody</span> <span class=\"o\">=</span>\n    <span class=\"s\">'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce venenatis pharetra dui, ac semper nulla dapibus ultrices.'</span>\n    <span class=\"s\">' Pellentesque sed erat accumsan lorem rhoncus mattis eu eget nulla. Phasellus sagittis vehicula dapibus. Nulla dolor nunc, '</span>\n    <span class=\"s\">'feugiat ac ullamcorper vel, commodo sed lacus. Nunc volutpat rutrum euismod. Nullam venenatis imperdiet odio, non porta leo '</span>\n    <span class=\"s\">'ullamcorper ac. Aliquam fringilla mauris ut ante faucibus, non tempus elit placerat. Donec sed porttitor tellus. Donec lobortis '</span>\n    <span class=\"s\">'arcu id lectus commodo varius. Fusce tincidunt ante in faucibus suscipit. Nulla facilisi. Nunc at nibh dictum sem aliquet '</span>\n    <span class=\"s\">'consectetur eu nec neque. Nullam ullamcorper vulputate nisl quis pharetra. Etiam dapibus ullamcorper magna, a iaculis libero '</span>\n    <span class=\"s\">'dignissim in. Vestibulum dictum, justo posuere consectetur eleifend, augue mi dictum dui, eu sollicitudin elit mauris vel lacus. '</span>\n    <span class=\"s\">'Donec dui felis, dapibus vel urna at, commodo facilisis felis.</span><span class=\"se\">\\n</span><span class=\"s\">Curabitur faucibus leo ipsum, in vehicula risus rhoncus id. Donec '</span>\n    <span class=\"s\">'ac velit quis nulla suscipit efficitur. Nulla non euismod neque. Sed blandit urna sed ex tempor sagittis. Curabitur condimentum nec '</span>\n    <span class=\"s\">'dui quis sollicitudin. Proin consectetur, metus sed rutrum varius, mi augue placerat est, sed posuere risus nunc ac urna. Nam leo '</span>\n    <span class=\"s\">'erat, bibendum non nibh sed, sollicitudin aliquet metus. Aliquam finibus turpis vitae leo laoreet molestie.'</span><span class=\"o\">;</span>\n\n<span class=\"kd\">final</span> <span class=\"n\">sections</span> <span class=\"o\">=</span> <span class=\"o\">[</span>\n  <span class=\"n\">Section</span><span class=\"o\">(</span><span class=\"n\">GlobalKey</span><span class=\"o\">(),</span> <span class=\"s\">'1. Section'</span><span class=\"o\">,</span> <span class=\"n\">reallyLongBody</span><span class=\"o\">),</span>\n  <span class=\"n\">Section</span><span class=\"o\">(</span><span class=\"n\">GlobalKey</span><span class=\"o\">(),</span> <span class=\"s\">'2. Section'</span><span class=\"o\">,</span> <span class=\"n\">reallyLongBody</span><span class=\"o\">),</span>\n  <span class=\"n\">Section</span><span class=\"o\">(</span><span class=\"n\">GlobalKey</span><span class=\"o\">(),</span> <span class=\"s\">'3. Section'</span><span class=\"o\">,</span> <span class=\"n\">reallyLongBody</span><span class=\"o\">),</span>\n  <span class=\"n\">Section</span><span class=\"o\">(</span><span class=\"n\">GlobalKey</span><span class=\"o\">(),</span> <span class=\"s\">'4. Section'</span><span class=\"o\">,</span> <span class=\"n\">reallyLongBody</span><span class=\"o\">),</span>\n  <span class=\"n\">Section</span><span class=\"o\">(</span><span class=\"n\">GlobalKey</span><span class=\"o\">(),</span> <span class=\"s\">'5. Section'</span><span class=\"o\">,</span> <span class=\"n\">reallyLongBody</span><span class=\"o\">),</span>\n  <span class=\"n\">Section</span><span class=\"o\">(</span><span class=\"n\">GlobalKey</span><span class=\"o\">(),</span> <span class=\"s\">'6. Section'</span><span class=\"o\">,</span> <span class=\"n\">reallyLongBody</span><span class=\"o\">),</span>\n<span class=\"o\">];</span>\n</code></pre></div></div>\n\n<h3 id=\"widgets\">Widgets</h3>\n\n<p>Next, let’s create a widget for the <code class=\"language-plaintext highlighter-rouge\">Section</code>, where we are going to show the title and the body of each section</p>\n\n<div class=\"language-dart highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nc\">SectionWidget</span> <span class=\"kd\">extends</span> <span class=\"n\">StatelessWidget</span> <span class=\"o\">{</span>\n  <span class=\"kd\">final</span> <span class=\"n\">Section</span> <span class=\"n\">section</span><span class=\"o\">;</span>\n\n  <span class=\"kd\">const</span> <span class=\"n\">SectionWidget</span><span class=\"o\">({</span><span class=\"n\">Key</span><span class=\"o\">?</span> <span class=\"n\">key</span><span class=\"o\">,</span> <span class=\"n\">required</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">section</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"k\">super</span><span class=\"o\">(</span><span class=\"nl\">key:</span> <span class=\"n\">key</span><span class=\"o\">);</span>\n\n  <span class=\"nd\">@override</span>\n  <span class=\"n\">Widget</span> <span class=\"n\">build</span><span class=\"o\">(</span><span class=\"n\">BuildContext</span> <span class=\"n\">context</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">Container</span><span class=\"o\">(</span>\n        <span class=\"nl\">decoration:</span> <span class=\"kd\">const</span> <span class=\"n\">BoxDecoration</span><span class=\"o\">(</span>\n          <span class=\"nl\">color:</span> <span class=\"n\">Color</span><span class=\"o\">(</span><span class=\"mh\">0xfffff8e2</span><span class=\"o\">),</span>\n          <span class=\"nl\">borderRadius:</span> <span class=\"n\">BorderRadius</span><span class=\"o\">.</span><span class=\"na\">all</span><span class=\"o\">(</span><span class=\"n\">Radius</span><span class=\"o\">.</span><span class=\"na\">circular</span><span class=\"o\">(</span><span class=\"mf\">8.0</span><span class=\"o\">)),</span>\n        <span class=\"o\">),</span>\n        <span class=\"nl\">margin:</span> <span class=\"kd\">const</span> <span class=\"n\">EdgeInsets</span><span class=\"o\">.</span><span class=\"na\">symmetric</span><span class=\"o\">(</span><span class=\"nl\">horizontal:</span> <span class=\"mi\">16</span><span class=\"o\">,</span> <span class=\"nl\">vertical:</span> <span class=\"mi\">8</span><span class=\"o\">),</span>\n        <span class=\"nl\">padding:</span> <span class=\"kd\">const</span> <span class=\"n\">EdgeInsets</span><span class=\"o\">.</span><span class=\"na\">symmetric</span><span class=\"o\">(</span><span class=\"nl\">horizontal:</span> <span class=\"mi\">16</span><span class=\"o\">,</span> <span class=\"nl\">vertical:</span> <span class=\"mi\">8</span><span class=\"o\">),</span>\n        <span class=\"nl\">child:</span> <span class=\"n\">Column</span><span class=\"o\">(</span>\n          <span class=\"nl\">crossAxisAlignment:</span> <span class=\"n\">CrossAxisAlignment</span><span class=\"o\">.</span><span class=\"na\">stretch</span><span class=\"o\">,</span>\n          <span class=\"nl\">children:</span> <span class=\"o\">[</span>\n            <span class=\"n\">Text</span><span class=\"o\">(</span>\n              <span class=\"n\">section</span><span class=\"o\">.</span><span class=\"na\">title</span><span class=\"o\">,</span>\n              <span class=\"nl\">textAlign:</span> <span class=\"n\">TextAlign</span><span class=\"o\">.</span><span class=\"na\">center</span><span class=\"o\">,</span>\n              <span class=\"nl\">style:</span> <span class=\"n\">Theme</span><span class=\"o\">.</span><span class=\"na\">of</span><span class=\"o\">(</span><span class=\"n\">context</span><span class=\"o\">)</span>\n                  <span class=\"o\">.</span><span class=\"na\">textTheme</span>\n                  <span class=\"o\">.</span><span class=\"na\">headline2</span>\n                  <span class=\"o\">?.</span><span class=\"na\">copyWith</span><span class=\"o\">(</span><span class=\"nl\">color:</span> <span class=\"n\">Colors</span><span class=\"o\">.</span><span class=\"na\">black</span><span class=\"o\">),</span>\n            <span class=\"o\">),</span>\n            <span class=\"kd\">const</span> <span class=\"n\">SizedBox</span><span class=\"o\">(</span>\n              <span class=\"nl\">height:</span> <span class=\"mi\">36</span><span class=\"o\">,</span>\n            <span class=\"o\">),</span>\n            <span class=\"n\">Text</span><span class=\"o\">(</span>\n              <span class=\"n\">section</span><span class=\"o\">.</span><span class=\"na\">body</span><span class=\"o\">,</span>\n              <span class=\"nl\">style:</span> <span class=\"n\">Theme</span><span class=\"o\">.</span><span class=\"na\">of</span><span class=\"o\">(</span><span class=\"n\">context</span><span class=\"o\">)</span>\n                  <span class=\"o\">.</span><span class=\"na\">textTheme</span>\n                  <span class=\"o\">.</span><span class=\"na\">bodyText1</span>\n                  <span class=\"o\">?.</span><span class=\"na\">copyWith</span><span class=\"o\">(</span><span class=\"nl\">color:</span> <span class=\"n\">Colors</span><span class=\"o\">.</span><span class=\"na\">black54</span><span class=\"o\">,</span> <span class=\"nl\">height:</span> <span class=\"mf\">1.3</span><span class=\"o\">),</span>\n            <span class=\"o\">)</span>\n          <span class=\"o\">],</span>\n        <span class=\"o\">));</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>After that, let’s create a widget for the link to a section. We will name it <code class=\"language-plaintext highlighter-rouge\">SectionLink</code> and we will pass a section and the callback for the <code class=\"language-plaintext highlighter-rouge\">onTap</code> event of the <code class=\"language-plaintext highlighter-rouge\">InkWell</code>.</p>\n\n<div class=\"language-dart highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nc\">SectionLink</span> <span class=\"kd\">extends</span> <span class=\"n\">StatelessWidget</span> <span class=\"o\">{</span>\n  <span class=\"kd\">final</span> <span class=\"n\">Section</span> <span class=\"n\">section</span><span class=\"o\">;</span>\n  <span class=\"kd\">final</span> <span class=\"kt\">void</span> <span class=\"n\">Function</span><span class=\"o\">(</span><span class=\"n\">Section</span><span class=\"o\">)</span> <span class=\"n\">onTap</span><span class=\"o\">;</span>\n\n  <span class=\"kd\">const</span> <span class=\"n\">SectionLink</span><span class=\"o\">({</span><span class=\"n\">Key</span><span class=\"o\">?</span> <span class=\"n\">key</span><span class=\"o\">,</span> <span class=\"n\">required</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">section</span><span class=\"o\">,</span> <span class=\"n\">required</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">onTap</span><span class=\"o\">})</span>\n      <span class=\"o\">:</span> <span class=\"k\">super</span><span class=\"o\">(</span><span class=\"nl\">key:</span> <span class=\"n\">key</span><span class=\"o\">);</span>\n\n  <span class=\"nd\">@override</span>\n  <span class=\"n\">Widget</span> <span class=\"n\">build</span><span class=\"o\">(</span><span class=\"n\">BuildContext</span> <span class=\"n\">context</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">InkWell</span><span class=\"o\">(</span>\n      <span class=\"nl\">onTap:</span> <span class=\"o\">()</span> <span class=\"o\">=&gt;</span> <span class=\"n\">onTap</span><span class=\"o\">(</span><span class=\"n\">section</span><span class=\"o\">),</span>\n      <span class=\"nl\">child:</span> <span class=\"n\">Padding</span><span class=\"o\">(</span>\n        <span class=\"nl\">padding:</span> <span class=\"kd\">const</span> <span class=\"n\">EdgeInsets</span><span class=\"o\">.</span><span class=\"na\">all</span><span class=\"o\">(</span><span class=\"mf\">8.0</span><span class=\"o\">),</span>\n        <span class=\"nl\">child:</span> <span class=\"n\">Text</span><span class=\"o\">(</span>\n          <span class=\"n\">section</span><span class=\"o\">.</span><span class=\"na\">title</span><span class=\"o\">,</span>\n          <span class=\"nl\">style:</span> <span class=\"n\">Theme</span><span class=\"o\">.</span><span class=\"na\">of</span><span class=\"o\">(</span><span class=\"n\">context</span><span class=\"o\">)</span>\n              <span class=\"o\">.</span><span class=\"na\">textTheme</span>\n              <span class=\"o\">.</span><span class=\"na\">headline3</span>\n              <span class=\"o\">?.</span><span class=\"na\">copyWith</span><span class=\"o\">(</span><span class=\"nl\">color:</span> <span class=\"n\">Colors</span><span class=\"o\">.</span><span class=\"na\">black87</span><span class=\"o\">,</span> <span class=\"nl\">fontWeight:</span> <span class=\"n\">FontWeight</span><span class=\"o\">.</span><span class=\"na\">bold</span><span class=\"o\">),</span>\n        <span class=\"o\">),</span>\n      <span class=\"o\">),</span>\n    <span class=\"o\">);</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>Next, we are going to add a <code class=\"language-plaintext highlighter-rouge\">TableOfContents</code> widget, where we basically iterate on the sections and for each section, we create a <code class=\"language-plaintext highlighter-rouge\">SectionLink</code>.</p>\n\n<div class=\"language-dart highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nc\">TableOfContents</span> <span class=\"kd\">extends</span> <span class=\"n\">StatelessWidget</span> <span class=\"o\">{</span>\n  <span class=\"kd\">final</span> <span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">Section</span><span class=\"o\">&gt;</span> <span class=\"n\">sections</span><span class=\"o\">;</span>\n  <span class=\"kd\">final</span> <span class=\"kt\">void</span> <span class=\"n\">Function</span><span class=\"o\">(</span><span class=\"n\">Section</span><span class=\"o\">)</span> <span class=\"n\">onItemTap</span><span class=\"o\">;</span>\n\n  <span class=\"kd\">const</span> <span class=\"n\">TableOfContents</span><span class=\"o\">({</span>\n    <span class=\"n\">Key</span><span class=\"o\">?</span> <span class=\"n\">key</span><span class=\"o\">,</span>\n    <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">sections</span> <span class=\"o\">=</span> <span class=\"kd\">const</span> <span class=\"o\">&lt;</span><span class=\"n\">Section</span><span class=\"o\">&gt;[],</span>\n    <span class=\"n\">required</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">onItemTap</span><span class=\"o\">,</span>\n  <span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"k\">super</span><span class=\"o\">(</span><span class=\"nl\">key:</span> <span class=\"n\">key</span><span class=\"o\">);</span>\n\n  <span class=\"nd\">@override</span>\n  <span class=\"n\">Widget</span> <span class=\"n\">build</span><span class=\"o\">(</span><span class=\"n\">BuildContext</span> <span class=\"n\">context</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">Container</span><span class=\"o\">(</span>\n      <span class=\"nl\">margin:</span> <span class=\"kd\">const</span> <span class=\"n\">EdgeInsets</span><span class=\"o\">.</span><span class=\"na\">all</span><span class=\"o\">(</span><span class=\"mi\">20</span><span class=\"o\">),</span>\n      <span class=\"nl\">padding:</span> <span class=\"kd\">const</span> <span class=\"n\">EdgeInsets</span><span class=\"o\">.</span><span class=\"na\">only</span><span class=\"o\">(</span><span class=\"nl\">left:</span> <span class=\"mi\">16</span><span class=\"o\">,</span> <span class=\"nl\">top:</span> <span class=\"mi\">24</span><span class=\"o\">,</span> <span class=\"nl\">right:</span> <span class=\"mi\">16</span><span class=\"o\">,</span> <span class=\"nl\">bottom:</span> <span class=\"mi\">10</span><span class=\"o\">),</span>\n      <span class=\"nl\">decoration:</span> <span class=\"n\">BoxDecoration</span><span class=\"o\">(</span>\n        <span class=\"nl\">color:</span> <span class=\"n\">Colors</span><span class=\"o\">.</span><span class=\"na\">white12</span><span class=\"o\">.</span><span class=\"na\">withOpacity</span><span class=\"o\">(</span><span class=\"mf\">0.3</span><span class=\"o\">),</span>\n        <span class=\"nl\">borderRadius:</span> <span class=\"kd\">const</span> <span class=\"n\">BorderRadius</span><span class=\"o\">.</span><span class=\"na\">all</span><span class=\"o\">(</span><span class=\"n\">Radius</span><span class=\"o\">.</span><span class=\"na\">circular</span><span class=\"o\">(</span><span class=\"mf\">8.0</span><span class=\"o\">)),</span>\n        <span class=\"nl\">border:</span> <span class=\"n\">Border</span><span class=\"o\">.</span><span class=\"na\">all</span><span class=\"o\">(</span>\n          <span class=\"nl\">width:</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n          <span class=\"nl\">color:</span> <span class=\"n\">Colors</span><span class=\"o\">.</span><span class=\"na\">grey</span><span class=\"o\">,</span>\n        <span class=\"o\">),</span>\n      <span class=\"o\">),</span>\n      <span class=\"nl\">child:</span> <span class=\"n\">Column</span><span class=\"o\">(</span>\n        <span class=\"nl\">crossAxisAlignment:</span> <span class=\"n\">CrossAxisAlignment</span><span class=\"o\">.</span><span class=\"na\">stretch</span><span class=\"o\">,</span>\n        <span class=\"nl\">children:</span> <span class=\"n\">sections</span>\n            <span class=\"o\">.</span><span class=\"na\">map</span><span class=\"o\">((</span><span class=\"n\">e</span><span class=\"o\">)</span> <span class=\"o\">=&gt;</span> <span class=\"n\">SectionLink</span><span class=\"o\">(</span><span class=\"nl\">section:</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"nl\">onTap:</span> <span class=\"n\">onItemTap</span><span class=\"o\">))</span>\n            <span class=\"o\">.</span><span class=\"na\">toList</span><span class=\"o\">(),</span>\n      <span class=\"o\">),</span>\n    <span class=\"o\">);</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>Finally, let’s create <code class=\"language-plaintext highlighter-rouge\">ArticlePage</code> where we will tie everything together. In this widget, we will create a <code class=\"language-plaintext highlighter-rouge\">SingleChildScrollView</code> with a <code class=\"language-plaintext highlighter-rouge\">Column</code> widget containing the <code class=\"language-plaintext highlighter-rouge\">TableOfContents</code> and a <code class=\"language-plaintext highlighter-rouge\">ListView</code> with the sections.</p>\n\n<p>For the <code class=\"language-plaintext highlighter-rouge\">TableOfContents</code>, we are going to pass as parameters the section and the callback for when a section is tapped. This callback contains the logic to scroll to the target widget. First, we verify that there is a widget with this key in the tree, by ensuring that the value of the <code class=\"language-plaintext highlighter-rouge\">currentContext</code> is not null. And then, we will pass this context to <code class=\"language-plaintext highlighter-rouge\">Scrollable.ensureVisible</code> to scroll to the target widget.</p>\n\n<p>For the <code class=\"language-plaintext highlighter-rouge\">ListView</code>, we iterate over the sections and for each one, we create a new <code class=\"language-plaintext highlighter-rouge\">SectionWidget</code> using the key from the section as the key for the widget.</p>\n\n<div class=\"language-dart highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nc\">ArticlePage</span> <span class=\"kd\">extends</span> <span class=\"n\">StatelessWidget</span> <span class=\"o\">{</span>\n  <span class=\"kd\">final</span> <span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">Section</span><span class=\"o\">&gt;</span> <span class=\"n\">sections</span><span class=\"o\">;</span>\n  <span class=\"kd\">const</span> <span class=\"n\">ArticlePage</span><span class=\"o\">({</span><span class=\"n\">Key</span><span class=\"o\">?</span> <span class=\"n\">key</span><span class=\"o\">,</span> <span class=\"n\">required</span> <span class=\"k\">this</span><span class=\"o\">.</span><span class=\"na\">sections</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"k\">super</span><span class=\"o\">(</span><span class=\"nl\">key:</span> <span class=\"n\">key</span><span class=\"o\">);</span>\n\n  <span class=\"nd\">@override</span>\n  <span class=\"n\">Widget</span> <span class=\"n\">build</span><span class=\"o\">(</span><span class=\"n\">BuildContext</span> <span class=\"n\">context</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n    <span class=\"kd\">final</span> <span class=\"n\">tableOfContents</span> <span class=\"o\">=</span> <span class=\"n\">TableOfContents</span><span class=\"o\">(</span>\n      <span class=\"nl\">sections:</span> <span class=\"n\">sections</span><span class=\"o\">,</span>\n      <span class=\"nl\">onItemTap:</span> <span class=\"o\">(</span><span class=\"n\">section</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kd\">final</span> <span class=\"n\">targetContext</span> <span class=\"o\">=</span> <span class=\"n\">section</span><span class=\"o\">.</span><span class=\"na\">key</span><span class=\"o\">.</span><span class=\"na\">currentContext</span><span class=\"o\">;</span>\n        <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">targetContext</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n          <span class=\"n\">Scrollable</span><span class=\"o\">.</span><span class=\"na\">ensureVisible</span><span class=\"o\">(</span>\n            <span class=\"n\">targetContext</span><span class=\"o\">,</span>\n            <span class=\"nl\">duration:</span> <span class=\"kd\">const</span> <span class=\"n\">Duration</span><span class=\"o\">(</span><span class=\"nl\">milliseconds:</span> <span class=\"mi\">400</span><span class=\"o\">),</span>\n            <span class=\"nl\">curve:</span> <span class=\"n\">Curves</span><span class=\"o\">.</span><span class=\"na\">easeInOut</span><span class=\"o\">,</span>\n          <span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n      <span class=\"o\">},</span>\n    <span class=\"o\">);</span>\n\n    <span class=\"kd\">final</span> <span class=\"n\">listView</span> <span class=\"o\">=</span> <span class=\"n\">ListView</span><span class=\"o\">.</span><span class=\"na\">builder</span><span class=\"o\">(</span>\n      <span class=\"nl\">shrinkWrap:</span> <span class=\"kc\">true</span><span class=\"o\">,</span>\n      <span class=\"nl\">physics:</span> <span class=\"kd\">const</span> <span class=\"n\">NeverScrollableScrollPhysics</span><span class=\"o\">(),</span>\n      <span class=\"nl\">itemCount:</span> <span class=\"n\">sections</span><span class=\"o\">.</span><span class=\"na\">length</span><span class=\"o\">,</span>\n      <span class=\"nl\">itemBuilder:</span> <span class=\"o\">(</span><span class=\"n\">BuildContext</span> <span class=\"n\">context</span><span class=\"o\">,</span> <span class=\"kt\">int</span> <span class=\"n\">index</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"kd\">final</span> <span class=\"n\">section</span> <span class=\"o\">=</span> <span class=\"n\">sections</span><span class=\"o\">[</span><span class=\"n\">index</span><span class=\"o\">];</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">SectionWidget</span><span class=\"o\">(</span>\n          <span class=\"nl\">key:</span> <span class=\"n\">section</span><span class=\"o\">.</span><span class=\"na\">key</span><span class=\"o\">,</span>\n          <span class=\"nl\">section:</span> <span class=\"n\">section</span><span class=\"o\">,</span>\n        <span class=\"o\">);</span>\n      <span class=\"o\">},</span>\n    <span class=\"o\">);</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">Scaffold</span><span class=\"o\">(</span>\n      <span class=\"nl\">appBar:</span> <span class=\"n\">AppBar</span><span class=\"o\">(</span>\n        <span class=\"nl\">title:</span> <span class=\"kd\">const</span> <span class=\"n\">Text</span><span class=\"o\">(</span><span class=\"s\">'Home Screen'</span><span class=\"o\">),</span>\n      <span class=\"o\">),</span>\n      <span class=\"nl\">body:</span> <span class=\"n\">SafeArea</span><span class=\"o\">(</span>\n        <span class=\"nl\">child:</span> <span class=\"n\">SingleChildScrollView</span><span class=\"o\">(</span>\n          <span class=\"nl\">child:</span> <span class=\"n\">Padding</span><span class=\"o\">(</span>\n            <span class=\"nl\">padding:</span> <span class=\"kd\">const</span> <span class=\"n\">EdgeInsets</span><span class=\"o\">.</span><span class=\"na\">all</span><span class=\"o\">(</span><span class=\"mf\">8.0</span><span class=\"o\">),</span>\n            <span class=\"nl\">child:</span> <span class=\"n\">Column</span><span class=\"o\">(</span>\n              <span class=\"nl\">crossAxisAlignment:</span> <span class=\"n\">CrossAxisAlignment</span><span class=\"o\">.</span><span class=\"na\">stretch</span><span class=\"o\">,</span>\n              <span class=\"nl\">children:</span> <span class=\"o\">[</span>\n                <span class=\"n\">tableOfContents</span><span class=\"o\">,</span>\n                <span class=\"n\">listView</span><span class=\"o\">,</span>\n              <span class=\"o\">],</span>\n            <span class=\"o\">),</span>\n          <span class=\"o\">),</span>\n        <span class=\"o\">),</span>\n      <span class=\"o\">),</span>\n    <span class=\"o\">);</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>If you now build and run the app, when you press on a link from the table of contents, you will have the same with the following video behavior.</p>\n\n<p><img src=\"https://diamantidis.github.io/assets/scrollable/scrollable_ensureVisible.gif\" alt=\"Demo app gif\" /></p>\n\n<blockquote>\n  <p>You can also use <a href=\"https://dartpad.dev/?id=33c44d2f905cf23d4e0f825b45d79d91&amp;null_safety=true\">dartpad.dev</a> to find and run the code of this post.</p>\n</blockquote>\n\n<h2 id=\"more-options\">More options</h2>\n\n<p>Now that we have seen how we can use <code class=\"language-plaintext highlighter-rouge\">Scrollable.ensureVisible</code>, let’s explore some more options that we can use to customize the transition to the target widget.</p>\n\n<p>Two of those, which we have seen before in the previous example, are <code class=\"language-plaintext highlighter-rouge\">duration</code> and <code class=\"language-plaintext highlighter-rouge\">curve</code>. <code class=\"language-plaintext highlighter-rouge\">duration</code> can be used to set the desired duration that we want the animation from the link to the target widget to take.</p>\n\n<p>With the <code class=\"language-plaintext highlighter-rouge\">curve</code> parameter, we can define the animation curve that the transition will follow. Basically, instead of making the transition at a constant rate, we can set a value to the <code class=\"language-plaintext highlighter-rouge\">curve</code> parameter to change the animation over time, either by speeding it up or slowing it down at specific time frames. It can take values like <code class=\"language-plaintext highlighter-rouge\">Curves.bounceInOut</code>, <code class=\"language-plaintext highlighter-rouge\">Curves.easeInOut</code>, etc. For example, with <code class=\"language-plaintext highlighter-rouge\">Curves.easeInOut</code> the animation will start slowly, then speed up and will then end slowly.</p>\n\n<blockquote>\n  <p>Note: A visualization of the different options can be found on <a href=\"https://api.flutter.dev/flutter/animation/Curves-class.html\">api.flutter.dev</a>.</p>\n</blockquote>\n\n<p>Another parameter of <code class=\"language-plaintext highlighter-rouge\">Scrollable.ensureVisible</code> is <code class=\"language-plaintext highlighter-rouge\">alignment</code>, and it can be used to set the position of the target widget. If the value is 0.0, the child will be positioned as close to the leading edge of the viewport, 0.5 as close to the center, and 1.0 as close to the trailing edge.</p>\n\n<p>Finally, the last parameter is <code class=\"language-plaintext highlighter-rouge\">alignmentPolicy</code> and can be used to decide the policy when applying the <code class=\"language-plaintext highlighter-rouge\">alignment</code> parameter. This parameter is of type <code class=\"language-plaintext highlighter-rouge\">ScrollPositionAlignmentPolicy</code>, which is an enum with the following options: <code class=\"language-plaintext highlighter-rouge\">explicit</code>, <code class=\"language-plaintext highlighter-rouge\">keepVisibleAtEnd</code> or <code class=\"language-plaintext highlighter-rouge\">keepVisibleAtStart</code>.</p>\n\n<p>When it is set to <code class=\"language-plaintext highlighter-rouge\">explicit</code>, it will use the <code class=\"language-plaintext highlighter-rouge\">alignment</code> property to decide where to align the target object. If it is set to <code class=\"language-plaintext highlighter-rouge\">keepVisibleAtEnd</code>, it will make sure that the bottom of the target item is just visible if the bottom edge of the target item is below the bottom edge of the scroll container. Contrary, <code class=\"language-plaintext highlighter-rouge\">keepVisibleAtStart</code>, will make sure that the top of the target object is just visible if the top edge of the target object is above the top edge of the scroll container</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>And this is it! I hope that you find this post useful and it has given you some insights into how to use <code class=\"language-plaintext highlighter-rouge\">Scrollable.ensureVisible</code> and all its options to scroll to a specific widget on a scroll view.</p>\n\n<p>If you have any questions or comments about this post, feel free to reach out to me on <a href=\"https://twitter.com/diamantidis_io\">Twitter</a>!</p>\n\n<p>Until next time!</p>\n\n",
            "tags": ["Flutter"],
            "image": "https://diamantidis.github.io/%7B%22path%22=%3E%22/assets/social/scrollable_ensure_visible.png%22,%20%22width%22=%3E682,%20%22height%22=%3E512%7D"
        },
        
        {
            "id": "https://diamantidis.github.io/2020/07/15/load-testing-with-apache-bench",
            "url": "https://diamantidis.github.io/2020/07/15/load-testing-with-apache-bench",
            "title": "Quick and simple load testing with Apache Bench",
            "date_published": "2020-07-15T04:00:00+00:00",
            
            "date_modified": "2020-07-15T04:00:00+00:00",
            
            "author": {
                "name": "Ioannis Diamantidis",
                "url": "https://diamantidis.github.io"
            },
            "summary": "<p><a href=\"https://httpd.apache.org/docs/2.4/programs/ab.html\">Apache Bench</a> or ab for short, is a command-line tool to perform simple load tests on an HTTP server, be it a website or an API.</p>\n\n",
            "content_html": "<p><a href=\"https://httpd.apache.org/docs/2.4/programs/ab.html\">Apache Bench</a> or ab for short, is a command-line tool to perform simple load tests on an HTTP server, be it a website or an API.</p>\n\n<p>By running the following command, you will get an overview of how the server is performing under load:</p>\n\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ab <span class=\"nt\">-n</span> 100 <span class=\"nt\">-c</span> 10 &lt;url&gt;\n</code></pre></div></div>\n\n<p>So, in this post, I will try to explain how we can use Apache Bench. I will start with how to install it, then proceed on how to use it and the available options, and finally, I explain how to interpret the results.</p>\n\n<p>Let’s get started!</p>\n\n<h2 id=\"installation\">Installation</h2>\n<p>One of the advantages of Apache Bench is that you may already have <code class=\"language-plaintext highlighter-rouge\">ab</code> installed, depending on the OS you are using.\nFor macOS users, it comes pre-installed by default, and if you are using a Linux Distribution, there are a lot of chances that it is also installed as it comes with the <code class=\"language-plaintext highlighter-rouge\">httpd</code> package. Try to run <code class=\"language-plaintext highlighter-rouge\">ab -help</code> to verify if that’s the case.</p>\n\n<p>In case it is not installed, you will need to install the <code class=\"language-plaintext highlighter-rouge\">apache2-utils</code> package.\nFor example, if you are using <code class=\"language-plaintext highlighter-rouge\">Ubuntu</code> you will have to run:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>apt-get update\napt-get <span class=\"nb\">install </span>apache2-utils\n</code></pre></div></div>\n\n<p>So, now, that we have Apache Bench installed, let’s see how we can use it and some of the available options.</p>\n\n<h2 id=\"usage\">Usage</h2>\n\n<p>The simplest possible way to use Apache Bench is by running <code class=\"language-plaintext highlighter-rouge\">ab &lt;url&gt;</code>. This command will perform a single network request, but this is not exactly what we would call “load”. For this reason, Apache Bench comes with a plethora of options you can use to define more complex use cases.</p>\n\n<p>Some of the most useful ones are the following:</p>\n\n<ul>\n  <li><code class=\"language-plaintext highlighter-rouge\">-n</code>: Number of requests</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">-c</code>: Number of concurrent requests</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">-H</code>: Add header</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">—r</code>: flag to not exit on socket receive errors</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">-k</code>: Use HTTP KeepAlive feature</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">-p</code>: File containing data to POST</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">-T</code>: Content-type header to use for POST/PUT data,</li>\n</ul>\n\n<p>Now you can use those options like so:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ab <span class=\"nt\">-n</span> 100 <span class=\"nt\">-c</span> 10 <span class=\"nt\">-H</span> <span class=\"s2\">\"Accept-Encoding: gzip, deflate\"</span> <span class=\"nt\">-rk</span> https://0.0.0.0:4000/\n</code></pre></div></div>\n\n<blockquote>\n  <p>:warning: Please note that you need the trailing <code class=\"language-plaintext highlighter-rouge\">/</code> on the URL, or else you will get the error message <code class=\"language-plaintext highlighter-rouge\">ab: invalid URL</code>.</p>\n</blockquote>\n\n<p>If you want to perform a benchmark test for a POST request, you can run the following command:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ab <span class=\"nt\">-n</span> 100 <span class=\"nt\">-c</span> 10 <span class=\"nt\">-p</span> data.json <span class=\"nt\">-T</span> application/json <span class=\"nt\">-rk</span> https://0.0.0.0:4000/\n</code></pre></div></div>\n\n<blockquote>\n  <p>:bulb: TIP: For a full list of options, you can run <code class=\"language-plaintext highlighter-rouge\">ab -help</code>, refer the man page by running <code class=\"language-plaintext highlighter-rouge\">man ab</code>, or visit the <a href=\"https://httpd.apache.org/docs/2.4/programs/ab.html\">documentation</a> online.</p>\n</blockquote>\n\n<p>Let’s now see how the output would look like and how to interpret it!</p>\n\n<h2 id=\"response-interpretation\">Response interpretation</h2>\n\n<p>Once <code class=\"language-plaintext highlighter-rouge\">ab</code> completes the HTTP requests, it will generate an output that will look like the following snippet:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Concurrency Level:      10\nTime taken for tests:   0.791 seconds\nComplete requests:      1000\nFailed requests:        0\nKeep-Alive requests:    1000\nTotal transferred:      4649081 bytes\nHTML transferred:       3934000 bytes\nRequests per second:    1264.17 [#/sec] (mean)\nTime per request:       7.910 [ms] (mean)\nTime per request:       0.791 [ms] (mean, across all concurrent requests)\nTransfer rate:          5739.47 [Kbytes/sec] received\n\nConnection Times (ms)\n              min  mean[+/-sd] median   max\nConnect:        0    1   9.4      0     105\nProcessing:     3    6   7.1      5      77\nWaiting:        3    6   6.8      5      65\nTotal:          3    7  11.9      5     111\n\nPercentage of the requests served within a certain time (ms)\n  50%      5\n  66%      6\n  75%      6\n  80%      6\n  90%      7\n  95%      8\n  98%     62\n  99%     77\n 100%    111 (longest request)\n</code></pre></div></div>\n\n<p>In this first section, you can find some useful information like, for example, that the number of <code class=\"language-plaintext highlighter-rouge\">Complete requests</code> was 1000 and the <code class=\"language-plaintext highlighter-rouge\">Concurrency Level</code> was 10. Furthermore, you can see that it performed 1264.17 <code class=\"language-plaintext highlighter-rouge\">Requests per second</code>.</p>\n\n<p>In the <code class=\"language-plaintext highlighter-rouge\">Connection Times</code> section, you can see that the fastest request took 3 ms (<code class=\"language-plaintext highlighter-rouge\">Total</code> row and <code class=\"language-plaintext highlighter-rouge\">min</code> column), the slowest took 111 ms (<code class=\"language-plaintext highlighter-rouge\">Total</code> row and <code class=\"language-plaintext highlighter-rouge\">max</code> column), while the mean was 7 ms (<code class=\"language-plaintext highlighter-rouge\">Total</code> row &amp; <code class=\"language-plaintext highlighter-rouge\">mean</code> column).</p>\n\n<p>In the last section, you get an overview of the response times in a cumulative distribution. In this example, we can see that 95% of requests took 8 ms or less to complete and that total response times of more than 100 ms is an outlier as it covers less than 1% of the sample.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>And that’s about for this intro on Apache Bench! By now, you should be able to use the <code class=\"language-plaintext highlighter-rouge\">ab</code> command to perform load tests on an HTTP server and get some insights from the results.</p>\n\n<p>In the end, I would say that Apache Bench is an ideal solution if you want to perform a quick load test since it is probably already installed on your machine and it is really simple to use. In case you want to cover more advanced use cases like flows and random URL entries, then I think that there are other more modern and feature-complete tools. A few examples are <a href=\"https://jmeter.apache.org/\">JMeter</a>, <a href=\"https://k6.io/\">K6</a> and <a href=\"https://gatling.io/\">Gatling</a>.</p>\n\n<p>Thanks for reading, I hope that you find this post useful, and if you have any questions or comments about this post, feel free to reach out to me on <a href=\"https://twitter.com/diamantidis_io\">Twitter</a>!</p>\n\n<p>Until next time!</p>\n\n",
            "tags": ["Performance"],
            "image": "https://diamantidis.github.io/%7B%22path%22=%3E%22/assets/social/load-testing-with-apache-bench.png%22,%20%22width%22=%3E1024,%20%22height%22=%3E512%7D"
        },
        
        {
            "id": "https://diamantidis.github.io/2020/07/07/dart-extensions-flatten-flutter-nested-widget-trees",
            "url": "https://diamantidis.github.io/2020/07/07/dart-extensions-flatten-flutter-nested-widget-trees",
            "title": "Dart extensions to flatten Flutter's deep nested widget trees",
            "date_published": "2020-07-07T04:00:00+00:00",
            
            "date_modified": "2020-07-07T04:00:00+00:00",
            
            "author": {
                "name": "Ioannis Diamantidis",
                "url": "https://diamantidis.github.io"
            },
            "summary": "<p>In version 2.7, <code class=\"language-plaintext highlighter-rouge\">Dart</code> introduced extensions to allow developers to add further functionality to an existing component. Extensions can be a great tool in our toolkit when we write business logic, but they can also be as useful in other areas! One such example can be the way we construct the widgets.</p>\n\n",
            "content_html": "<p>In version 2.7, <code class=\"language-plaintext highlighter-rouge\">Dart</code> introduced extensions to allow developers to add further functionality to an existing component. Extensions can be a great tool in our toolkit when we write business logic, but they can also be as useful in other areas! One such example can be the way we construct the widgets.</p>\n\n<p>Coming from an iOS background and inspired by SwiftUI’s ViewModifiers, I was intrigued to use the Dart extensions in a similar fashion to reduce the visual clutter that comes with the deep tree of many nested widgets.</p>\n\n<p>Let’s see an example!</p>\n\n<h2 id=\"with-nested-widgets\">With nested widgets</h2>\n\n<p>Here we have the default widget created on <a href=\"https://dartpad.dev/flutter\">dartpad.dev</a>, where we also wrapped the text inside a <code class=\"language-plaintext highlighter-rouge\">Padding</code> widget.</p>\n<div class=\"language-dart highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nc\">MyWidget</span> <span class=\"kd\">extends</span> <span class=\"n\">StatelessWidget</span> <span class=\"o\">{</span>\n  <span class=\"nd\">@override</span>\n  <span class=\"n\">Widget</span> <span class=\"n\">build</span><span class=\"o\">(</span><span class=\"n\">BuildContext</span> <span class=\"n\">context</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">return</span>\n      <span class=\"n\">Padding</span><span class=\"o\">(</span>\n        <span class=\"nl\">padding:</span> <span class=\"kd\">const</span> <span class=\"n\">EdgeInsets</span><span class=\"o\">.</span><span class=\"na\">all</span><span class=\"o\">(</span><span class=\"mi\">16</span><span class=\"o\">),</span>\n        <span class=\"nl\">child:</span> <span class=\"n\">Text</span><span class=\"o\">(</span><span class=\"s\">'Hello, World!'</span><span class=\"o\">,</span> <span class=\"nl\">style:</span> <span class=\"n\">Theme</span><span class=\"o\">.</span><span class=\"na\">of</span><span class=\"o\">(</span><span class=\"n\">context</span><span class=\"o\">).</span><span class=\"na\">textTheme</span><span class=\"o\">.</span><span class=\"na\">headline4</span><span class=\"o\">)</span>\n      <span class=\"o\">);</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n<p>Now, let’s see how we can accomplish the same with the help of Dart extensions.</p>\n\n<h2 id=\"with-extensions-methods\">With extensions methods</h2>\n\n<p>First, we will introduce an extension on <code class=\"language-plaintext highlighter-rouge\">Widget</code> that will wrap the caller with a padding <code class=\"language-plaintext highlighter-rouge\">Widget</code>:</p>\n\n<div class=\"language-dart highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">extension</span> <span class=\"n\">WidgetModifier</span> <span class=\"n\">on</span> <span class=\"n\">Widget</span> <span class=\"o\">{</span>\n  <span class=\"n\">Widget</span> <span class=\"n\">padding</span><span class=\"o\">([</span><span class=\"n\">EdgeInsetsGeometry</span> <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"kd\">const</span> <span class=\"n\">EdgeInsets</span><span class=\"o\">.</span><span class=\"na\">all</span><span class=\"o\">(</span><span class=\"mi\">16</span><span class=\"o\">)])</span> <span class=\"o\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">Padding</span><span class=\"o\">(</span>\n      <span class=\"nl\">padding:</span> <span class=\"n\">value</span><span class=\"o\">,</span>\n      <span class=\"nl\">child:</span> <span class=\"k\">this</span><span class=\"o\">,</span>\n    <span class=\"o\">);</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>With this extension in place, we could turn our <code class=\"language-plaintext highlighter-rouge\">Widget</code> to the following:</p>\n\n<div class=\"language-dart highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nc\">MyWidget</span> <span class=\"kd\">extends</span> <span class=\"n\">StatelessWidget</span> <span class=\"o\">{</span>\n  <span class=\"nd\">@override</span>\n  <span class=\"n\">Widget</span> <span class=\"n\">build</span><span class=\"o\">(</span><span class=\"n\">BuildContext</span> <span class=\"n\">context</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">Text</span><span class=\"o\">(</span><span class=\"s\">'Hello, World!'</span><span class=\"o\">,</span> <span class=\"nl\">style:</span> <span class=\"n\">Theme</span><span class=\"o\">.</span><span class=\"na\">of</span><span class=\"o\">(</span><span class=\"n\">context</span><span class=\"o\">).</span><span class=\"na\">textTheme</span><span class=\"o\">.</span><span class=\"na\">headline4</span><span class=\"o\">)</span>\n            <span class=\"o\">.</span><span class=\"na\">padding</span><span class=\"o\">();</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>This example is just a small one, but I hope you get the picture!!</p>\n\n<p>We are using the extension method as a syntactic sugar to structure our layout, instead of wrapping a widget inside another one.</p>\n\n<p>Similarly, we can add more functions to our extension and create more complex user interfaces:</p>\n\n<div class=\"language-dart highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">extension</span> <span class=\"n\">WidgetModifier</span> <span class=\"n\">on</span> <span class=\"n\">Widget</span> <span class=\"o\">{</span>\n\n  <span class=\"c1\">// ...</span>\n\n  <span class=\"n\">Widget</span> <span class=\"n\">background</span><span class=\"o\">(</span><span class=\"n\">Color</span> <span class=\"n\">color</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">DecoratedBox</span><span class=\"o\">(</span>\n      <span class=\"nl\">decoration:</span> <span class=\"n\">BoxDecoration</span><span class=\"o\">(</span>\n        <span class=\"nl\">color:</span> <span class=\"n\">color</span><span class=\"o\">,</span>\n      <span class=\"o\">),</span>\n      <span class=\"nl\">child:</span> <span class=\"k\">this</span><span class=\"o\">,</span>\n    <span class=\"o\">);</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"n\">Widget</span> <span class=\"n\">cornerRadius</span><span class=\"o\">(</span><span class=\"n\">BorderRadiusGeometry</span> <span class=\"n\">radius</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">ClipRRect</span><span class=\"o\">(</span>\n      <span class=\"nl\">borderRadius:</span> <span class=\"n\">radius</span><span class=\"o\">,</span>\n      <span class=\"nl\">child:</span> <span class=\"k\">this</span><span class=\"o\">,</span>\n    <span class=\"o\">);</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"n\">Widget</span> <span class=\"n\">align</span><span class=\"o\">([</span><span class=\"n\">AlignmentGeometry</span> <span class=\"n\">alignment</span> <span class=\"o\">=</span> <span class=\"n\">Alignment</span><span class=\"o\">.</span><span class=\"na\">center</span><span class=\"o\">])</span> <span class=\"o\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">Align</span><span class=\"o\">(</span>\n      <span class=\"nl\">alignment:</span> <span class=\"n\">alignment</span><span class=\"o\">,</span>\n      <span class=\"nl\">child:</span> <span class=\"k\">this</span><span class=\"o\">,</span>\n    <span class=\"o\">);</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<div class=\"language-dart highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nc\">MyWidget</span> <span class=\"kd\">extends</span> <span class=\"n\">StatelessWidget</span> <span class=\"o\">{</span>\n  <span class=\"nd\">@override</span>\n  <span class=\"n\">Widget</span> <span class=\"n\">build</span><span class=\"o\">(</span><span class=\"n\">BuildContext</span> <span class=\"n\">context</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">Text</span><span class=\"o\">(</span><span class=\"s\">'Hello, World!'</span><span class=\"o\">,</span> <span class=\"nl\">style:</span> <span class=\"n\">Theme</span><span class=\"o\">.</span><span class=\"na\">of</span><span class=\"o\">(</span><span class=\"n\">context</span><span class=\"o\">).</span><span class=\"na\">textTheme</span><span class=\"o\">.</span><span class=\"na\">headline4</span><span class=\"o\">)</span>\n            <span class=\"o\">.</span><span class=\"na\">padding</span><span class=\"o\">()</span>\n            <span class=\"o\">.</span><span class=\"na\">background</span><span class=\"o\">(</span><span class=\"n\">Colors</span><span class=\"o\">.</span><span class=\"na\">lightBlue</span><span class=\"o\">)</span>\n            <span class=\"o\">.</span><span class=\"na\">cornerRadius</span><span class=\"o\">(</span><span class=\"n\">BorderRadius</span><span class=\"o\">.</span><span class=\"na\">all</span><span class=\"o\">(</span><span class=\"n\">Radius</span><span class=\"o\">.</span><span class=\"na\">circular</span><span class=\"o\">(</span><span class=\"mf\">8.0</span><span class=\"o\">)))</span>\n            <span class=\"o\">.</span><span class=\"na\">padding</span><span class=\"o\">(</span><span class=\"n\">EdgeInsets</span><span class=\"o\">.</span><span class=\"na\">symmetric</span><span class=\"o\">(</span><span class=\"nl\">horizontal:</span> <span class=\"mi\">8</span><span class=\"o\">,</span> <span class=\"nl\">vertical:</span> <span class=\"mi\">16</span><span class=\"o\">))</span>\n            <span class=\"o\">.</span><span class=\"na\">background</span><span class=\"o\">(</span><span class=\"n\">Colors</span><span class=\"o\">.</span><span class=\"na\">purple</span><span class=\"o\">);</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p><img src=\"https://diamantidis.github.io/assets/dart_extensions/dart_widget_extensions_example.png\" alt=\"Dart widget extensions example screenshot\" /></p>\n\n<p>Isn’t that great? We now have a clean and elegant widget that we can easily understand! Imagine how many levels of nested widgets you would have to use to recreate this layout without the help of extensions.</p>\n\n<h2 id=\"wrap-up\">Wrap-up</h2>\n\n<p>To wrap up, in this post, we have followed an alternative approach on how to structure a widget tree in a Flutter project, by applying a concept similar to SwiftUI’s ViewModifiers.</p>\n\n<p>As a result, this could help us flatten the widget hierarchy and reduce nesting. I have showcased a few examples of such extensions, but you can use the same concept in many other cases as you see fit.</p>\n\n<p>Thanks for reading, I hope you find this post useful!</p>\n\n<p>If you have any questions or comments about this post, feel free to reach out to me on <a href=\"https://twitter.com/diamantidis_io\">Twitter</a>!</p>\n\n<p>Until next time!</p>\n\n",
            "tags": ["Flutter","Dart"],
            "image": "https://diamantidis.github.io/%7B%22path%22=%3E%22/assets/social/dart-extension-flutter-widget.png%22,%20%22width%22=%3E1024,%20%22height%22=%3E512%7D"
        },
        
        {
            "id": "https://diamantidis.github.io/2020/06/28/applescript-to-generate-enum-for-sf-symbols",
            "url": "https://diamantidis.github.io/2020/06/28/applescript-to-generate-enum-for-sf-symbols",
            "title": "Use AppleScript to generate an enum for SF Symbols",
            "date_published": "2020-06-28T04:00:00+00:00",
            
            "date_modified": "2020-06-28T04:00:00+00:00",
            
            "author": {
                "name": "Ioannis Diamantidis",
                "url": "https://diamantidis.github.io"
            },
            "summary": "<p><a href=\"https://developer.apple.com/design/human-interface-guidelines/sf-symbols/overview/\">SF Symbols</a> is a great way to add symbols in apps. Introduced during WWDC 2019, and with a new updated version this year, the <a href=\"https://developer.apple.com/design/human-interface-guidelines/sf-symbols/overview/\">SF Symbols</a> app now provides more than 2300 symbols, supports iOS, Mac Catalyst, tvOS, and watchOS and now macOS, and offers many more features, like multicolor support, RTL, etc.</p>\n\n",
            "content_html": "<p><a href=\"https://developer.apple.com/design/human-interface-guidelines/sf-symbols/overview/\">SF Symbols</a> is a great way to add symbols in apps. Introduced during WWDC 2019, and with a new updated version this year, the <a href=\"https://developer.apple.com/design/human-interface-guidelines/sf-symbols/overview/\">SF Symbols</a> app now provides more than 2300 symbols, supports iOS, Mac Catalyst, tvOS, and watchOS and now macOS, and offers many more features, like multicolor support, RTL, etc.</p>\n\n<p>But despite its greatness, it comes with some shortcomings when we have to use those symbols from an app.\nThe provided APIs expect a hard-coded string literal for the name of the <code class=\"language-plaintext highlighter-rouge\">SF Symbol</code>. This makes their usage susceptible to errors since we will not get notified by the compiler if we accidentally mistype the name.</p>\n\n<p>Wouldn’t it be much better if we were to have a type-safe solution? Maybe an enum?</p>\n\n<p>That’s the problem we will try to solve in this post. We will create a script using <code class=\"language-plaintext highlighter-rouge\">AppleScript</code> which will open the <code class=\"language-plaintext highlighter-rouge\">SF Symbols</code> app, traverse the list of symbols and generate an enum with a case for each symbol.</p>\n\n<h2 id=\"script-overview\">Script Overview</h2>\n\n<p>To start with, we will use the <code class=\"language-plaintext highlighter-rouge\">Script Editor</code> app to write the <code class=\"language-plaintext highlighter-rouge\">AppleScript</code>. Before we start writing the script, let’s try to figure out the steps we will take on the <code class=\"language-plaintext highlighter-rouge\">SF Symbols</code> app. First, we will open the app. Then, we will select the list layout. Choosing the list layout instead of the grid will make it much easier to traverse the list of symbols.</p>\n\n<p>After that, we will select the option <code class=\"language-plaintext highlighter-rouge\">All</code> from the <code class=\"language-plaintext highlighter-rouge\">Categories</code> menu to make sure that the output will contain the full list of options. Then, we will loop through the symbols, and for each one, we will create an enum case of the format <code class=\"language-plaintext highlighter-rouge\">case &lt;name&gt; = &lt;sf symbol name&gt;</code>.</p>\n\n<p>Let’s see the script!</p>\n\n<h2 id=\"preparation\">Preparation</h2>\n\n<p>We will first define some helper functions to compute the identifier that we will use for the case.</p>\n\n<p>This identifier should be a valid one, so we have to cater for some edge cases. In some cases, the names of some SF Symbols are reserved keywords in Swift, like <code class=\"language-plaintext highlighter-rouge\">return</code> and <code class=\"language-plaintext highlighter-rouge\">repeat</code>. Since we cannot use those words for the case identifier, we will escape them with the <code class=\"language-plaintext highlighter-rouge\">backtick</code> symbol (<code class=\"language-plaintext highlighter-rouge\">`</code>).</p>\n\n<div class=\"language-applescript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">on</span> <span class=\"nv\">convertReservedKeywords</span><span class=\"p\">(</span><span class=\"nv\">theText</span><span class=\"p\">)</span><span class=\"w\">\n    </span><span class=\"k\">set</span><span class=\"w\"> </span><span class=\"nv\">keywords</span><span class=\"w\"> </span><span class=\"k\">to</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"s2\">\"repeat\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">\"return\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">\"case\"</span><span class=\"p\">}</span><span class=\"w\">\n    </span><span class=\"k\">set</span><span class=\"w\"> </span><span class=\"nv\">theNewText</span><span class=\"w\"> </span><span class=\"k\">to</span><span class=\"w\"> </span><span class=\"nv\">theText</span><span class=\"w\">\n\n    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"nv\">keywords</span><span class=\"w\"> </span><span class=\"ow\">contains</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">theText</span><span class=\"w\"> </span><span class=\"k\">as </span><span class=\"nc\">string</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\">\n        </span><span class=\"k\">set</span><span class=\"w\"> </span><span class=\"nv\">theNewText</span><span class=\"w\"> </span><span class=\"k\">to</span><span class=\"w\"> </span><span class=\"s2\">\"`\"</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"nv\">theText</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"s2\">\"`\"</span><span class=\"w\">\n    </span><span class=\"k\">end</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\">\n\n    </span><span class=\"nb\">return</span><span class=\"w\"> </span><span class=\"nv\">theNewText</span><span class=\"w\">\n</span><span class=\"k\">end</span><span class=\"w\"> </span><span class=\"nv\">convertReservedKeywords</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<p>Another such case is the <code class=\"language-plaintext highlighter-rouge\">SF Symbols</code> starting with a number literal, like <code class=\"language-plaintext highlighter-rouge\">0.square</code>. In that scenario, we will prepend the name with the string literal <code class=\"language-plaintext highlighter-rouge\">number</code>.</p>\n\n<div class=\"language-applescript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">on</span> <span class=\"nv\">handleNameRestrictions</span><span class=\"p\">(</span><span class=\"nv\">theText</span><span class=\"p\">)</span><span class=\"w\">\n    </span><span class=\"k\">set</span><span class=\"w\"> </span><span class=\"nv\">theNewText</span><span class=\"w\"> </span><span class=\"k\">to</span><span class=\"w\"> </span><span class=\"nv\">theText</span><span class=\"w\">\n    </span><span class=\"k\">set</span><span class=\"w\"> </span><span class=\"nv\">firstCharacter</span><span class=\"w\"> </span><span class=\"k\">to</span><span class=\"w\"> </span><span class=\"nb\">text</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"k\">of</span><span class=\"w\"> </span><span class=\"nv\">theText</span><span class=\"w\">\n    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"nv\">isNumber</span><span class=\"p\">(</span><span class=\"nv\">firstCharacter</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\">\n        </span><span class=\"k\">set</span><span class=\"w\"> </span><span class=\"nv\">theNewText</span><span class=\"w\"> </span><span class=\"k\">to</span><span class=\"w\"> </span><span class=\"s2\">\"number\"</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"nv\">theText</span><span class=\"w\">\n    </span><span class=\"k\">end</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\">\n\n    </span><span class=\"nb\">return</span><span class=\"w\"> </span><span class=\"nv\">convertReservedKeywords</span><span class=\"p\">(</span><span class=\"nv\">theNewText</span><span class=\"p\">)</span><span class=\"w\">\n</span><span class=\"k\">end</span><span class=\"w\"> </span><span class=\"nv\">handleNameRestrictions</span><span class=\"w\">\n\n</span><span class=\"k\">on</span> <span class=\"nv\">isNumber</span><span class=\"p\">(</span><span class=\"nv\">theString</span><span class=\"p\">)</span><span class=\"w\">\n    </span><span class=\"k\">try</span><span class=\"w\">\n        </span><span class=\"k\">set</span><span class=\"w\"> </span><span class=\"nv\">theString</span><span class=\"w\"> </span><span class=\"k\">to</span><span class=\"w\"> </span><span class=\"nv\">theString</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"nv\">number</span><span class=\"w\">\n        </span><span class=\"nb\">return</span><span class=\"w\"> </span><span class=\"nb\">true</span><span class=\"w\">\n    </span><span class=\"nb\">on</span><span class=\"w\"> </span><span class=\"k\">error</span><span class=\"w\">\n        </span><span class=\"nb\">return</span><span class=\"w\"> </span><span class=\"nb\">false</span><span class=\"w\">\n    </span><span class=\"k\">end</span><span class=\"w\"> </span><span class=\"k\">try</span><span class=\"w\">\n</span><span class=\"k\">end</span><span class=\"w\"> </span><span class=\"nv\">isNumber</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<p>Also, as you may have noticed, a lot of the <code class=\"language-plaintext highlighter-rouge\">SF Symbols</code> are using the dot (<code class=\"language-plaintext highlighter-rouge\">.</code>) on their name, which is another invalid character for the case identifier. To solve this issue, we will convert the name of the symbol to a camelCase string that we will use as the identifier. To do so, we will remove the dot and instead capitalize the first letter after the dot.</p>\n\n<div class=\"language-applescript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">on</span> <span class=\"nv\">toCamelCase</span><span class=\"p\">(</span><span class=\"nv\">theText</span><span class=\"p\">)</span><span class=\"w\">\n    </span><span class=\"k\">set</span><span class=\"w\"> </span><span class=\"nv\">theNewText</span><span class=\"w\"> </span><span class=\"k\">to</span><span class=\"w\"> </span><span class=\"s2\">\"\"</span><span class=\"w\">\n    </span><span class=\"k\">set</span><span class=\"w\"> </span><span class=\"nv\">dotIsFound</span><span class=\"w\"> </span><span class=\"k\">to</span><span class=\"w\"> </span><span class=\"nb\">false</span><span class=\"w\">\n    </span><span class=\"k\">repeat</span><span class=\"w\"> </span><span class=\"nv\">with</span><span class=\"w\"> </span><span class=\"nv\">aCharacter</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"nv\">theText</span><span class=\"w\">\n        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">aCharacter</span><span class=\"w\"> </span><span class=\"k\">as </span><span class=\"nc\">string</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"ow\">is equal</span><span class=\"w\"> </span><span class=\"k\">to</span><span class=\"w\"> </span><span class=\"s2\">\".\"</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\">\n            </span><span class=\"k\">set</span><span class=\"w\"> </span><span class=\"nv\">dotIsFound</span><span class=\"w\"> </span><span class=\"k\">to</span><span class=\"w\"> </span><span class=\"nb\">true</span><span class=\"w\">\n        </span><span class=\"k\">else</span><span class=\"w\">\n            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"nv\">dotIsFound</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\">\n                </span><span class=\"k\">set</span><span class=\"w\"> </span><span class=\"nv\">theNewText</span><span class=\"w\"> </span><span class=\"k\">to</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">theNewText</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"nv\">toCapitalized</span><span class=\"p\">(</span><span class=\"nv\">aCharacter</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"k\">as </span><span class=\"nc\">string</span><span class=\"w\">\n            </span><span class=\"k\">else</span><span class=\"w\">\n                </span><span class=\"k\">set</span><span class=\"w\"> </span><span class=\"nv\">theNewText</span><span class=\"w\"> </span><span class=\"k\">to</span><span class=\"w\"> </span><span class=\"nv\">theNewText</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"nv\">aCharacter</span><span class=\"w\">\n            </span><span class=\"k\">end</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\">\n            </span><span class=\"k\">set</span><span class=\"w\"> </span><span class=\"nv\">dotIsFound</span><span class=\"w\"> </span><span class=\"k\">to</span><span class=\"w\"> </span><span class=\"nb\">false</span><span class=\"w\">\n        </span><span class=\"k\">end</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\">\n\n    </span><span class=\"k\">end</span><span class=\"w\"> </span><span class=\"k\">repeat</span><span class=\"w\">\n\n    </span><span class=\"nb\">return</span><span class=\"w\"> </span><span class=\"nv\">theNewText</span><span class=\"w\">\n</span><span class=\"k\">end</span><span class=\"w\"> </span><span class=\"nv\">toCamelCase</span><span class=\"w\">\n\n</span><span class=\"k\">on</span> <span class=\"nv\">toCapitalized</span><span class=\"p\">(</span><span class=\"nv\">theText</span><span class=\"p\">)</span><span class=\"w\">\n    </span><span class=\"k\">set</span><span class=\"w\"> </span><span class=\"nv\">theNewText</span><span class=\"w\"> </span><span class=\"k\">to</span><span class=\"w\"> </span><span class=\"s2\">\"\"</span><span class=\"w\">\n\n    </span><span class=\"k\">set</span><span class=\"w\"> </span><span class=\"nv\">theComparisonCharacters</span><span class=\"w\"> </span><span class=\"k\">to</span><span class=\"w\"> </span><span class=\"s2\">\"abcdefghijklmnopqrstuvwxyz\"</span><span class=\"w\">\n    </span><span class=\"k\">set</span><span class=\"w\"> </span><span class=\"nv\">theSourceCharacters</span><span class=\"w\"> </span><span class=\"k\">to</span><span class=\"w\"> </span><span class=\"s2\">\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"</span><span class=\"w\">\n    </span><span class=\"k\">set</span><span class=\"w\"> </span><span class=\"nv\">firstCharacter</span><span class=\"w\"> </span><span class=\"k\">to</span><span class=\"w\"> </span><span class=\"nb\">text</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"k\">of</span><span class=\"w\"> </span><span class=\"nv\">theText</span><span class=\"w\">\n\n    </span><span class=\"k\">set</span><span class=\"w\"> </span><span class=\"nv\">stringLength</span><span class=\"w\"> </span><span class=\"k\">to</span><span class=\"w\"> </span><span class=\"nb\">the</span><span class=\"w\"> </span><span class=\"nv\">length</span><span class=\"w\"> </span><span class=\"k\">of</span><span class=\"w\"> </span><span class=\"nv\">theText</span><span class=\"w\">\n    </span><span class=\"k\">set</span><span class=\"w\"> </span><span class=\"nv\">restOfText</span><span class=\"w\"> </span><span class=\"k\">to</span><span class=\"w\"> </span><span class=\"s2\">\"\"</span><span class=\"w\">\n    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"nv\">stringLength</span><span class=\"w\"> </span><span class=\"ow\">is greater than</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\">\n        </span><span class=\"k\">set</span><span class=\"w\"> </span><span class=\"nv\">restOfText</span><span class=\"w\"> </span><span class=\"k\">to</span><span class=\"w\"> </span><span class=\"nb\">text</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"nb\">thru</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"k\">of</span><span class=\"w\"> </span><span class=\"nv\">theText</span><span class=\"w\">\n    </span><span class=\"k\">end</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\">\n\n    </span><span class=\"k\">set</span><span class=\"w\"> </span><span class=\"nv\">theOffset</span><span class=\"w\"> </span><span class=\"k\">to</span><span class=\"w\"> </span><span class=\"nb\">offset</span><span class=\"w\"> </span><span class=\"k\">of</span><span class=\"w\"> </span><span class=\"nv\">firstCharacter</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"nv\">theComparisonCharacters</span><span class=\"w\">\n    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"nv\">theOffset</span><span class=\"w\"> </span><span class=\"ow\">is not</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\">\n        </span><span class=\"k\">set</span><span class=\"w\"> </span><span class=\"nv\">theNewText</span><span class=\"w\"> </span><span class=\"k\">to</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">theNewText</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"nb\">character</span><span class=\"w\"> </span><span class=\"nv\">theOffset</span><span class=\"w\"> </span><span class=\"k\">of</span><span class=\"w\"> </span><span class=\"nv\">theSourceCharacters</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"nv\">restOfText</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">as </span><span class=\"nc\">string</span><span class=\"w\">\n    </span><span class=\"k\">else</span><span class=\"w\">\n        </span><span class=\"k\">set</span><span class=\"w\"> </span><span class=\"nv\">theNewText</span><span class=\"w\"> </span><span class=\"k\">to</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">theNewText</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"nv\">firstCharacter</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"nv\">restOfText</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">as </span><span class=\"nc\">string</span><span class=\"w\">\n    </span><span class=\"k\">end</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\">\n    </span><span class=\"nb\">return</span><span class=\"w\"> </span><span class=\"nv\">theNewText</span><span class=\"w\">\n</span><span class=\"k\">end</span><span class=\"w\"> </span><span class=\"nv\">toCapitalized</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<h2 id=\"implementation\">Implementation</h2>\n\n<p>With all those functions in place, we can now shift our focus on the part of our program that will interact with the <code class=\"language-plaintext highlighter-rouge\">SF Symbols</code> app.</p>\n\n<div class=\"language-applescript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">activate</span><span class=\"w\"> </span><span class=\"nb\">application</span><span class=\"w\"> </span><span class=\"s2\">\"SF Symbols\"</span><span class=\"w\">\n\n</span><span class=\"k\">tell</span><span class=\"w\"> </span><span class=\"nb\">application</span><span class=\"w\"> </span><span class=\"s2\">\"System Events\"</span><span class=\"w\">\n    </span><span class=\"k\">tell</span><span class=\"w\"> </span><span class=\"nv\">process</span><span class=\"w\"> </span><span class=\"s2\">\"SF Symbols\"</span><span class=\"w\">\n\n        </span><span class=\"c1\">-- Click the “list” radio button.</span><span class=\"w\">\n        </span><span class=\"nv\">click</span><span class=\"w\"> </span><span class=\"nv\">radio</span><span class=\"w\"> </span><span class=\"nb\">button</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"k\">of</span><span class=\"w\"> </span><span class=\"nv\">radio</span><span class=\"w\"> </span><span class=\"nv\">group</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"k\">of</span><span class=\"w\"> </span><span class=\"nv\">group</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"k\">of</span><span class=\"w\"> </span><span class=\"na\">toolbar</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"k\">of</span><span class=\"w\"> </span><span class=\"na\">window</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\">\n\n        </span><span class=\"k\">tell</span><span class=\"w\"> </span><span class=\"nv\">outline</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"k\">of</span><span class=\"w\"> </span><span class=\"nb\">scroll</span><span class=\"w\"> </span><span class=\"nv\">area</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"k\">of</span><span class=\"w\"> </span><span class=\"nv\">splitter</span><span class=\"w\"> </span><span class=\"nv\">group</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"k\">of</span><span class=\"w\"> </span><span class=\"na\">window</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\">\n            </span><span class=\"nb\">select</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nv\">row</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"nb\">where</span><span class=\"w\"> </span><span class=\"nv\">value</span><span class=\"w\"> </span><span class=\"k\">of</span><span class=\"w\"> </span><span class=\"nv\">static</span><span class=\"w\"> </span><span class=\"nb\">text</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"k\">of</span><span class=\"w\"> </span><span class=\"nv\">UI</span><span class=\"w\"> </span><span class=\"nv\">element</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"ow\">starts with</span><span class=\"w\"> </span><span class=\"s2\">\"All\"</span><span class=\"p\">)</span><span class=\"w\">\n        </span><span class=\"k\">end</span><span class=\"w\"> </span><span class=\"k\">tell</span><span class=\"w\">\n\n        </span><span class=\"k\">set</span><span class=\"w\"> </span><span class=\"nv\">enumCases</span><span class=\"w\"> </span><span class=\"k\">to</span><span class=\"w\"> </span><span class=\"s2\">\"\"</span><span class=\"w\">\n\n        </span><span class=\"k\">repeat</span><span class=\"w\"> </span><span class=\"nv\">with</span><span class=\"w\"> </span><span class=\"nv\">sfSymbolRow</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"nv\">rows</span><span class=\"w\"> </span><span class=\"k\">of</span><span class=\"w\"> </span><span class=\"nv\">table</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"k\">of</span><span class=\"w\"> </span><span class=\"nb\">scroll</span><span class=\"w\"> </span><span class=\"nv\">area</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"k\">of</span><span class=\"w\"> </span><span class=\"nv\">group</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"k\">of</span><span class=\"w\"> </span><span class=\"nv\">splitter</span><span class=\"w\"> </span><span class=\"nv\">group</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"k\">of</span><span class=\"w\"> </span><span class=\"na\">window</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\">\n\n            </span><span class=\"k\">set</span><span class=\"w\"> </span><span class=\"nv\">sfSymbolName</span><span class=\"w\"> </span><span class=\"k\">to</span><span class=\"w\"> </span><span class=\"nv\">value</span><span class=\"w\"> </span><span class=\"k\">of</span><span class=\"w\"> </span><span class=\"nv\">static</span><span class=\"w\"> </span><span class=\"nb\">text</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"k\">of</span><span class=\"w\"> </span><span class=\"nv\">UI</span><span class=\"w\"> </span><span class=\"nv\">element</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"k\">of</span><span class=\"w\"> </span><span class=\"nv\">sfSymbolRow</span><span class=\"w\">\n\n            </span><span class=\"k\">set</span><span class=\"w\"> </span><span class=\"nv\">caseIdentifier</span><span class=\"w\"> </span><span class=\"k\">to</span><span class=\"w\"> </span><span class=\"k\">my</span><span class=\"w\"> </span><span class=\"nv\">toCamelCase</span><span class=\"p\">(</span><span class=\"k\">my</span><span class=\"w\"> </span><span class=\"nv\">handleNameRestrictions</span><span class=\"p\">(</span><span class=\"nv\">sfSymbolName</span><span class=\"p\">))</span><span class=\"w\">\n            </span><span class=\"k\">set</span><span class=\"w\"> </span><span class=\"nv\">enumCases</span><span class=\"w\"> </span><span class=\"k\">to</span><span class=\"w\"> </span><span class=\"nv\">enumCases</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"s2\">\"\tcase \"</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"nv\">caseIdentifier</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"s2\">\" = \\\"\"</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"nv\">sfSymbolName</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"s2\">\"\\\"\n\"</span><span class=\"w\">\n        </span><span class=\"k\">end</span><span class=\"w\"> </span><span class=\"k\">repeat</span><span class=\"w\">\n\n        </span><span class=\"k\">set</span><span class=\"w\"> </span><span class=\"nv\">startOfEnum</span><span class=\"w\"> </span><span class=\"k\">to</span><span class=\"w\"> </span><span class=\"s2\">\"public enum SFSymbol: String, CaseIterable {\n\"</span><span class=\"w\">\n        </span><span class=\"k\">set</span><span class=\"w\"> </span><span class=\"nv\">endOfEnum</span><span class=\"w\"> </span><span class=\"k\">to</span><span class=\"w\"> </span><span class=\"s2\">\"}\"</span><span class=\"w\">\n        </span><span class=\"k\">set</span><span class=\"w\"> </span><span class=\"nv\">enum</span><span class=\"w\"> </span><span class=\"k\">to</span><span class=\"w\"> </span><span class=\"nv\">startOfEnum</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"nv\">enumCases</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"nv\">endOfEnum</span><span class=\"w\">\n\n        </span><span class=\"nb\">set the clipboard to</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"nb\">text</span><span class=\"p\">:(</span><span class=\"nv\">enum</span><span class=\"w\"> </span><span class=\"k\">as </span><span class=\"nc\">string</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"nv\">Unicode</span><span class=\"w\"> </span><span class=\"nb\">text</span><span class=\"p\">:</span><span class=\"nv\">enum</span><span class=\"p\">}</span><span class=\"w\">\n        </span><span class=\"nv\">enum</span><span class=\"w\">\n    </span><span class=\"k\">end</span><span class=\"w\"> </span><span class=\"k\">tell</span><span class=\"w\">\n</span><span class=\"k\">end</span><span class=\"w\"> </span><span class=\"k\">tell</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<p>In this snippet, we initially select the list layout and the option <code class=\"language-plaintext highlighter-rouge\">All</code> from the <code class=\"language-plaintext highlighter-rouge\">Categories</code> as we explained earlier. Then, we create a string variable that will gather all the enum cases.\nAfter that, we loop through the <code class=\"language-plaintext highlighter-rouge\">SF Symbols</code>, and for each one of them, we use the functions we defined earlier to compute the identifier of the case. Then, we append a new case to the string we defined outside of the loop.</p>\n\n<p>After the loop, we will define two more variables that will contain the definition and the trailing bracket of the enum respectively. We will then, merge those three variables to construct a variable with the final version of the enum.</p>\n\n<p>Finally, we will add this to the clipboard to make it easier to paste on the project and use it as the output of the script.</p>\n\n<p>And that’s about it when it comes to the script!</p>\n\n<h2 id=\"but-what-about-sf-symbols-2\">But what about SF Symbols 2?</h2>\n\n<p>This script is also compatible with the new version of the <code class=\"language-plaintext highlighter-rouge\">SF Symbols</code> app with only a minor change. Just replace the two occurrences of <code class=\"language-plaintext highlighter-rouge\">\"SF Symbols\"</code> to <code class=\"language-plaintext highlighter-rouge\">\"SF Symbols beta\"</code>.</p>\n\n<p>A word of caution, though: be extra careful because there are some new <code class=\"language-plaintext highlighter-rouge\">SF Symbols</code> that are only available on the latest OS versions while some others like the <code class=\"language-plaintext highlighter-rouge\">bin.xmark</code> are deprecated in favor of new ones (<code class=\"language-plaintext highlighter-rouge\">xmark.bin</code>).</p>\n\n<blockquote>\n  <p>You can find the script as well as the enums generated from both the <code class=\"language-plaintext highlighter-rouge\">SF Symbols</code> and <code class=\"language-plaintext highlighter-rouge\">SF Symbols 2</code> app on <a href=\"https://gist.github.com/diamantidis/7dfa8de52aa2f36a3c64ff30a16dd22a\">this GitHub Gist</a>.</p>\n</blockquote>\n\n<p>Let’s now see how we can run it!</p>\n\n<h2 id=\"how-to-run\">How to run</h2>\n\n<p>You can use either the <code class=\"language-plaintext highlighter-rouge\">Script Editor</code> app or the <code class=\"language-plaintext highlighter-rouge\">Terminal</code> app. If you use the <code class=\"language-plaintext highlighter-rouge\">Script Editor</code> app, press the play button or use the shortcut Command (<code class=\"language-plaintext highlighter-rouge\">⌘</code>) + R.</p>\n\n<p>If you decide to run the script from the <code class=\"language-plaintext highlighter-rouge\">Terminal</code>, you can use the command <code class=\"language-plaintext highlighter-rouge\">osascript &lt;name of the script&gt;.scpt</code>. The output of this command will be the enum, which you can redirect to a Swift file on your project: <code class=\"language-plaintext highlighter-rouge\">osascript &lt;name of the script&gt;.scpt &gt; GeneratedSFSymbols.swift</code>.</p>\n\n<blockquote>\n  <p>:bulb: <strong>TIP</strong>: You can place the script on a specific folder and then use the absolute path of this folder to create an alias on your <code class=\"language-plaintext highlighter-rouge\">~/.bash_profile</code> or <code class=\"language-plaintext highlighter-rouge\">~/.zshrc</code> file. <br /><br /> <code class=\"language-plaintext highlighter-rouge\">alias sfsymbols='&lt;path to the script&gt;/&lt;name of the script&gt;.scpt'</code>. <br /><br /> This will allow you to run this script with ease from any project: <code class=\"language-plaintext highlighter-rouge\">sfsymbols &gt; GeneratedSFSymbols.swift</code></p>\n</blockquote>\n\n<blockquote>\n  <p>:grey_exclamation: <strong>INFO</strong>: Regardless of how you run the script, you will probably get a prompt to grant Accessibility Access like in the following screenshot. To grant the required access, go to <code class=\"language-plaintext highlighter-rouge\">System Preferences</code> &gt; <code class=\"language-plaintext highlighter-rouge\">Security &amp; Privacy</code> &gt; <code class=\"language-plaintext highlighter-rouge\">Privacy</code> &gt; <code class=\"language-plaintext highlighter-rouge\">Accessibility</code> and select the program that you are using to run the script.  <img src=\"https://diamantidis.github.io/assets/sf_symbols_applescript/apple_script_warning.png\" alt=\"AppleScript warning screenshot\" /></p>\n</blockquote>\n\n<p>Now that we have added the enum in our project, it’s time to find out how we can use it!</p>\n\n<h2 id=\"how-to-use\">How to use</h2>\n\n<p>You can simply add an extension for the component you are interested in.</p>\n\n<p>For example, if you are using SwiftUI, you can add an extension to the <code class=\"language-plaintext highlighter-rouge\">Image</code> struct:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">import</span> <span class=\"kt\">SwiftUI</span>\n\n<span class=\"kd\">@available</span><span class=\"p\">(</span><span class=\"n\">iOS</span> <span class=\"mf\">13.0</span><span class=\"p\">,</span> <span class=\"n\">macOS</span> <span class=\"mf\">10.15</span><span class=\"p\">,</span> <span class=\"n\">tvOS</span> <span class=\"mf\">13.0</span><span class=\"p\">,</span> <span class=\"n\">watchOS</span> <span class=\"mf\">6.0</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"p\">)</span>\n<span class=\"kd\">public</span> <span class=\"kd\">extension</span> <span class=\"kt\">Image</span> <span class=\"p\">{</span>\n    <span class=\"c1\">/// Creates an image object containing a system symbol image.</span>\n    <span class=\"c1\">///</span>\n    <span class=\"c1\">/// - Parameter sfSymbol: The name of the `SFSymbol`</span>\n    <span class=\"c1\">/// - Usage</span>\n    <span class=\"c1\">///   ```</span>\n    <span class=\"c1\">///   Image(sfSymbol: .checkmarkCircleFill)</span>\n    <span class=\"c1\">///   ```</span>\n    <span class=\"kd\">@available</span><span class=\"p\">(</span><span class=\"kt\">OSX</span><span class=\"p\">,</span> <span class=\"n\">unavailable</span><span class=\"p\">)</span>\n    <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"nv\">sfSymbol</span><span class=\"p\">:</span> <span class=\"kt\">SFSymbol</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"nv\">systemName</span><span class=\"p\">:</span> <span class=\"n\">sfSymbol</span><span class=\"o\">.</span><span class=\"n\">rawValue</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Similarly, if you are using UIKit’s UIImage, you can use the following extension:</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">import</span> <span class=\"kt\">UIKit</span>\n\n<span class=\"kd\">@available</span><span class=\"p\">(</span><span class=\"n\">iOS</span> <span class=\"mf\">13.0</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"p\">)</span>\n<span class=\"kd\">public</span> <span class=\"kd\">extension</span> <span class=\"kt\">UIImage</span> <span class=\"p\">{</span>\n    <span class=\"c1\">/// Creates an image object containing a system symbol image.</span>\n    <span class=\"c1\">///</span>\n    <span class=\"c1\">/// - Parameter sfSymbol: The name of the `SFSymbol`</span>\n    <span class=\"c1\">/// - Usage</span>\n    <span class=\"c1\">///   ```</span>\n    <span class=\"c1\">///   UIImage(sfSymbol: .checkmarkCircleFill)</span>\n    <span class=\"c1\">///   ```</span>\n    <span class=\"kd\">convenience</span> <span class=\"nf\">init</span><span class=\"p\">?(</span><span class=\"nv\">sfSymbol</span><span class=\"p\">:</span> <span class=\"kt\">SFSymbol</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"nv\">systemName</span><span class=\"p\">:</span> <span class=\"n\">sfSymbol</span><span class=\"o\">.</span><span class=\"n\">rawValue</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>And that’s about it! In this post, we have seen how we can utilize the ability of AppleScript to interact with other macOS apps to generate an enum for all the symbols on the <code class=\"language-plaintext highlighter-rouge\">SF Symbols</code> app.\nThis will alleviate all the pains that come with the use of an error-prone string literal when we create an Image based on an <code class=\"language-plaintext highlighter-rouge\">SF Symbol</code>. Instead, with this enum we will be able to create those Images in a type-safe manner.</p>\n\n<p>Thanks for reading, I hope you find this post useful.</p>\n\n<p>If you like this post and you want to get notified when a new post is published, you can follow me on <a href=\"https://twitter.com/diamantidis_io\">Twitter</a> or subscribe to the <a href=\"https://diamantidis.github.io/feed.xml\">RSS feed</a>.</p>\n\n<p>Also, if you have any questions or comments about this post, feel free to contact me on <a href=\"https://twitter.com/diamantidis_io\">Twitter</a>!</p>\n\n<p>Until next time!</p>\n\n",
            "tags": ["AppleScript","SF Symbols"],
            "image": "https://diamantidis.github.io/%7B%22path%22=%3E%22/assets/social/applescript-to-generate-enum-for-sf-symbols.png%22,%20%22width%22=%3E683,%20%22height%22=%3E512%7D"
        },
        
        {
            "id": "https://diamantidis.github.io/2020/06/21/keyboard-options-for-swiftui-fields",
            "url": "https://diamantidis.github.io/2020/06/21/keyboard-options-for-swiftui-fields",
            "title": "Keyboards options for SwiftUI fields",
            "date_published": "2020-06-21T04:00:00+00:00",
            
            "date_modified": "2020-06-21T04:00:00+00:00",
            
            "author": {
                "name": "Ioannis Diamantidis",
                "url": "https://diamantidis.github.io"
            },
            "summary": "<p>One of the ways to improve the user experience when they fill a form on iOS apps is the use of keyboard types. Keyboard types can be used to show different keyboards based on the context of the field. If it’s an email field, for example, you would probably prefer to present a keyboard with easy access to characters like the at (<code class=\"language-plaintext highlighter-rouge\">@</code>) and the dot (<code class=\"language-plaintext highlighter-rouge\">.</code>).</p>\n\n",
            "content_html": "<p>One of the ways to improve the user experience when they fill a form on iOS apps is the use of keyboard types. Keyboard types can be used to show different keyboards based on the context of the field. If it’s an email field, for example, you would probably prefer to present a keyboard with easy access to characters like the at (<code class=\"language-plaintext highlighter-rouge\">@</code>) and the dot (<code class=\"language-plaintext highlighter-rouge\">.</code>).</p>\n\n<p>In this post, we are going to see how different keyboard options work with SwiftUI. First, we will cover the “common” scenarios, which include keyboards for fields like name, email, number, etc. Then, we will take a look at how we can add more custom options like a keyboard with a picker view.</p>\n\n<h2 id=\"the-common-cases\">The common cases</h2>\n\n<p>For the most common cases, SwiftUI provides the function <code class=\"language-plaintext highlighter-rouge\">keyboardType</code> in a <code class=\"language-plaintext highlighter-rouge\">View</code> extension. This function has a parameter of type <code class=\"language-plaintext highlighter-rouge\">UIKeyboardType</code>, which is an enum with cases like <code class=\"language-plaintext highlighter-rouge\">emailAddress</code>, <code class=\"language-plaintext highlighter-rouge\">numberPad</code>, <code class=\"language-plaintext highlighter-rouge\">URL</code>, etc.</p>\n\n<blockquote>\n  <p>For the full set of cases, you can refer to the <a href=\"https://developer.apple.com/documentation/uikit/uikeyboardtype\">documentation page</a>.</p>\n</blockquote>\n\n<p>You can use this extension from any SwiftUI View in the following way:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">TextField</span><span class=\"p\">(</span><span class=\"s\">\"Type the email...\"</span><span class=\"p\">,</span> <span class=\"nv\">text</span><span class=\"p\">:</span> <span class=\"err\">$</span><span class=\"n\">email</span><span class=\"p\">)</span>\n    <span class=\"o\">.</span><span class=\"nf\">keyboardType</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">emailAddress</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p><img src=\"https://diamantidis.github.io/assets/swiftui_textfield_keyboards/email-keyboard.png\" alt=\"Email keyboard screenshot\" /></p>\n\n<p>But what if we want to add a custom view? For example, a picker view, just like we can do using UIKit?</p>\n\n<h2 id=\"keyboard-with-picker-view\">Keyboard with picker view</h2>\n\n<p>As you may have guessed, the answer lies exactly there.</p>\n\n<p>We will have to use UIKit’s <code class=\"language-plaintext highlighter-rouge\">UITextField</code> and make it available to SwiftUI by creating a struct with conformance to the <code class=\"language-plaintext highlighter-rouge\">UIViewRepresentable</code> protocol.</p>\n\n<p>But let’s take it step by step and see how we can create <code class=\"language-plaintext highlighter-rouge\">PickerField</code>; a field that will show a keyboard with a picker, just like in the following screenshot.</p>\n\n<p><img src=\"https://diamantidis.github.io/assets/swiftui_textfield_keyboards/picker-view-keyboard.png\" alt=\"Picker view keyboard screenshot\" /></p>\n\n<p>To keep things separated, let’s create a subclass of <code class=\"language-plaintext highlighter-rouge\">UITextField</code> where we will implement the logic to show a keyboard with a picker.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">import</span> <span class=\"kt\">SwiftUI</span>\n\n<span class=\"kd\">class</span> <span class=\"kt\">PickerTextField</span><span class=\"p\">:</span> <span class=\"kt\">UITextField</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// MARK: - Public properties</span>\n    <span class=\"k\">var</span> <span class=\"nv\">data</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">String</span><span class=\"p\">]</span>\n    <span class=\"kd\">@Binding</span> <span class=\"k\">var</span> <span class=\"nv\">selectionIndex</span><span class=\"p\">:</span> <span class=\"kt\">Int</span><span class=\"p\">?</span>\n\n    <span class=\"c1\">// MARK: - Initializers</span>\n    <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"nv\">data</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">String</span><span class=\"p\">],</span> <span class=\"nv\">selectionIndex</span><span class=\"p\">:</span> <span class=\"kt\">Binding</span><span class=\"o\">&lt;</span><span class=\"kt\">Int</span><span class=\"p\">?</span><span class=\"o\">&gt;</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">data</span>\n        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">_selectionIndex</span> <span class=\"o\">=</span> <span class=\"n\">selectionIndex</span>\n        <span class=\"k\">super</span><span class=\"o\">.</span><span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"nv\">frame</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">zero</span><span class=\"p\">)</span>\n\n        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">inputView</span> <span class=\"o\">=</span> <span class=\"n\">pickerView</span>\n        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">inputAccessoryView</span> <span class=\"o\">=</span> <span class=\"n\">toolbar</span>\n        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">tintColor</span> <span class=\"o\">=</span> <span class=\"o\">.</span><span class=\"n\">clear</span>\n\n        <span class=\"k\">guard</span> <span class=\"k\">let</span> <span class=\"nv\">selectionIndex</span> <span class=\"o\">=</span> <span class=\"n\">selectionIndex</span><span class=\"o\">.</span><span class=\"n\">wrappedValue</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">pickerView</span><span class=\"o\">.</span><span class=\"nf\">selectRow</span><span class=\"p\">(</span><span class=\"n\">selectionIndex</span><span class=\"p\">,</span> <span class=\"nv\">inComponent</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nv\">animated</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kd\">@available</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"p\">,</span> <span class=\"n\">unavailable</span><span class=\"p\">)</span>\n    <span class=\"kd\">required</span> <span class=\"nf\">init</span><span class=\"p\">?(</span><span class=\"nv\">coder</span><span class=\"p\">:</span> <span class=\"kt\">NSCoder</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nf\">fatalError</span><span class=\"p\">(</span><span class=\"s\">\"init(coder:) has not been implemented\"</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\">// MARK: - Private properties</span>\n    <span class=\"kd\">private</span> <span class=\"kd\">lazy</span> <span class=\"k\">var</span> <span class=\"nv\">pickerView</span><span class=\"p\">:</span> <span class=\"kt\">UIPickerView</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"k\">let</span> <span class=\"nv\">pickerView</span> <span class=\"o\">=</span> <span class=\"kt\">UIPickerView</span><span class=\"p\">()</span>\n        <span class=\"n\">pickerView</span><span class=\"o\">.</span><span class=\"n\">delegate</span> <span class=\"o\">=</span> <span class=\"k\">self</span>\n        <span class=\"n\">pickerView</span><span class=\"o\">.</span><span class=\"n\">dataSource</span> <span class=\"o\">=</span> <span class=\"k\">self</span>\n        <span class=\"k\">return</span> <span class=\"n\">pickerView</span>\n    <span class=\"p\">}()</span>\n\n    <span class=\"kd\">private</span> <span class=\"kd\">lazy</span> <span class=\"k\">var</span> <span class=\"nv\">toolbar</span><span class=\"p\">:</span> <span class=\"kt\">UIToolbar</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"k\">let</span> <span class=\"nv\">toolbar</span> <span class=\"o\">=</span> <span class=\"kt\">UIToolbar</span><span class=\"p\">()</span>\n\n        <span class=\"k\">let</span> <span class=\"nv\">flexibleSpace</span> <span class=\"o\">=</span> <span class=\"kt\">UIBarButtonItem</span><span class=\"p\">(</span><span class=\"nv\">barButtonSystemItem</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">flexibleSpace</span><span class=\"p\">,</span> <span class=\"nv\">target</span><span class=\"p\">:</span> <span class=\"kc\">nil</span><span class=\"p\">,</span> <span class=\"nv\">action</span><span class=\"p\">:</span> <span class=\"kc\">nil</span><span class=\"p\">)</span>\n\n        <span class=\"k\">let</span> <span class=\"nv\">doneButton</span> <span class=\"o\">=</span> <span class=\"kt\">UIBarButtonItem</span><span class=\"p\">(</span>\n            <span class=\"nv\">title</span><span class=\"p\">:</span> <span class=\"s\">\"Done\"</span><span class=\"p\">,</span>\n            <span class=\"nv\">style</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">done</span><span class=\"p\">,</span>\n            <span class=\"nv\">target</span><span class=\"p\">:</span> <span class=\"k\">self</span><span class=\"p\">,</span>\n            <span class=\"nv\">action</span><span class=\"p\">:</span> <span class=\"kd\">#selector(</span><span class=\"nf\">donePressed</span><span class=\"kd\">)</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"n\">toolbar</span><span class=\"o\">.</span><span class=\"nf\">setItems</span><span class=\"p\">([</span><span class=\"n\">flexibleSpace</span><span class=\"p\">,</span> <span class=\"n\">doneButton</span><span class=\"p\">],</span> <span class=\"nv\">animated</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">)</span>\n        <span class=\"n\">toolbar</span><span class=\"o\">.</span><span class=\"nf\">sizeToFit</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"n\">toolbar</span>\n    <span class=\"p\">}()</span>\n\n    <span class=\"c1\">// MARK: - Private methods</span>\n    <span class=\"kd\">@objc</span>\n    <span class=\"kd\">private</span> <span class=\"kd\">func</span> <span class=\"nf\">donePressed</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">selectionIndex</span> <span class=\"o\">=</span> <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">pickerView</span><span class=\"o\">.</span><span class=\"nf\">selectedRow</span><span class=\"p\">(</span><span class=\"nv\">inComponent</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"nf\">endEditing</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// MARK: - UIPickerViewDataSource &amp; UIPickerViewDelegate extension</span>\n<span class=\"kd\">extension</span> <span class=\"kt\">PickerTextField</span><span class=\"p\">:</span> <span class=\"kt\">UIPickerViewDataSource</span><span class=\"p\">,</span> <span class=\"kt\">UIPickerViewDelegate</span> <span class=\"p\">{</span>\n    <span class=\"kd\">func</span> <span class=\"nf\">numberOfComponents</span><span class=\"p\">(</span><span class=\"k\">in</span> <span class=\"nv\">pickerView</span><span class=\"p\">:</span> <span class=\"kt\">UIPickerView</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Int</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"mi\">1</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kd\">func</span> <span class=\"nf\">pickerView</span><span class=\"p\">(</span><span class=\"n\">_</span> <span class=\"nv\">pickerView</span><span class=\"p\">:</span> <span class=\"kt\">UIPickerView</span><span class=\"p\">,</span> <span class=\"n\">numberOfRowsInComponent</span> <span class=\"nv\">component</span><span class=\"p\">:</span> <span class=\"kt\">Int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Int</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">count</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kd\">func</span> <span class=\"nf\">pickerView</span><span class=\"p\">(</span><span class=\"n\">_</span> <span class=\"nv\">pickerView</span><span class=\"p\">:</span> <span class=\"kt\">UIPickerView</span><span class=\"p\">,</span> <span class=\"n\">titleForRow</span> <span class=\"nv\">row</span><span class=\"p\">:</span> <span class=\"kt\">Int</span><span class=\"p\">,</span> <span class=\"n\">forComponent</span> <span class=\"nv\">component</span><span class=\"p\">:</span> <span class=\"kt\">Int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">String</span><span class=\"p\">?</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">row</span><span class=\"p\">]</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kd\">func</span> <span class=\"nf\">pickerView</span><span class=\"p\">(</span><span class=\"n\">_</span> <span class=\"nv\">pickerView</span><span class=\"p\">:</span> <span class=\"kt\">UIPickerView</span><span class=\"p\">,</span> <span class=\"n\">didSelectRow</span> <span class=\"nv\">row</span><span class=\"p\">:</span> <span class=\"kt\">Int</span><span class=\"p\">,</span> <span class=\"n\">inComponent</span> <span class=\"nv\">component</span><span class=\"p\">:</span> <span class=\"kt\">Int</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">selectionIndex</span> <span class=\"o\">=</span> <span class=\"n\">row</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>In this snippet, first, we declare two properties; one with the options of the picker and a <code class=\"language-plaintext highlighter-rouge\">Binding</code> property which acts both as an input in case the field is pre-filled and as an output for when the user changes the value of the picker.</p>\n\n<p>Then, in the initializer, we are expecting two arguments that we will use to instantiate the two properties. After that, we set the property <code class=\"language-plaintext highlighter-rouge\">inputView</code> to the instance of the <code class=\"language-plaintext highlighter-rouge\">UIPickerView</code>, and use the <code class=\"language-plaintext highlighter-rouge\">inputAccessoryView</code> to set a <code class=\"language-plaintext highlighter-rouge\">UIToolbar</code> with a “Done” button to help users dismiss the keyboard.</p>\n\n<p>Finally, if there is a pre-selected value, we select this option from the <code class=\"language-plaintext highlighter-rouge\">UIPickerView</code>.</p>\n\n<p>In this file, we also add an extension to provide the implementation for the functions to conform to <code class=\"language-plaintext highlighter-rouge\">UIPickerViewDataSource</code> and <code class=\"language-plaintext highlighter-rouge\">UIPickerViewDelegate</code> and set the <code class=\"language-plaintext highlighter-rouge\">dataSource</code> and the <code class=\"language-plaintext highlighter-rouge\">delegate</code> for the <code class=\"language-plaintext highlighter-rouge\">UIPickerView</code> to self.</p>\n\n<p>Worth noting is the implementation of <code class=\"language-plaintext highlighter-rouge\">didSelectRow</code>, where we set the selected row to the <code class=\"language-plaintext highlighter-rouge\">Binding</code> property <code class=\"language-plaintext highlighter-rouge\">selectionIndex</code> to pass this info to the parent view.</p>\n\n<p>With that in place, we will create a new struct that we will use to communicate between the UIKit view and the SwiftUI world.</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">import</span> <span class=\"kt\">SwiftUI</span>\n\n<span class=\"kd\">struct</span> <span class=\"kt\">PickerField</span><span class=\"p\">:</span> <span class=\"kt\">UIViewRepresentable</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// MARK: - Public properties</span>\n    <span class=\"kd\">@Binding</span> <span class=\"k\">var</span> <span class=\"nv\">selectionIndex</span><span class=\"p\">:</span> <span class=\"kt\">Int</span><span class=\"p\">?</span>\n\n    <span class=\"c1\">// MARK: - Initializers</span>\n    <span class=\"kd\">init</span><span class=\"o\">&lt;</span><span class=\"kt\">S</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">_</span> <span class=\"nv\">title</span><span class=\"p\">:</span> <span class=\"kt\">S</span><span class=\"p\">,</span> <span class=\"nv\">data</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">String</span><span class=\"p\">],</span> <span class=\"nv\">selectionIndex</span><span class=\"p\">:</span> <span class=\"kt\">Binding</span><span class=\"o\">&lt;</span><span class=\"kt\">Int</span><span class=\"p\">?</span><span class=\"o\">&gt;</span><span class=\"p\">)</span> <span class=\"k\">where</span> <span class=\"kt\">S</span><span class=\"p\">:</span> <span class=\"kt\">StringProtocol</span> <span class=\"p\">{</span>\n        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">placeholder</span> <span class=\"o\">=</span> <span class=\"kt\">String</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"p\">)</span>\n        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">data</span>\n        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">_selectionIndex</span> <span class=\"o\">=</span> <span class=\"n\">selectionIndex</span>\n\n        <span class=\"n\">textField</span> <span class=\"o\">=</span> <span class=\"kt\">PickerTextField</span><span class=\"p\">(</span><span class=\"nv\">data</span><span class=\"p\">:</span> <span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"nv\">selectionIndex</span><span class=\"p\">:</span> <span class=\"n\">selectionIndex</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\">// MARK: - Public methods</span>\n    <span class=\"kd\">func</span> <span class=\"nf\">makeUIView</span><span class=\"p\">(</span><span class=\"nv\">context</span><span class=\"p\">:</span> <span class=\"kt\">UIViewRepresentableContext</span><span class=\"o\">&lt;</span><span class=\"kt\">PickerField</span><span class=\"o\">&gt;</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">UITextField</span> <span class=\"p\">{</span>\n        <span class=\"n\">textField</span><span class=\"o\">.</span><span class=\"n\">placeholder</span> <span class=\"o\">=</span> <span class=\"n\">placeholder</span>\n        <span class=\"k\">return</span> <span class=\"n\">textField</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kd\">func</span> <span class=\"nf\">updateUIView</span><span class=\"p\">(</span><span class=\"n\">_</span> <span class=\"nv\">uiView</span><span class=\"p\">:</span> <span class=\"kt\">UITextField</span><span class=\"p\">,</span> <span class=\"nv\">context</span><span class=\"p\">:</span> <span class=\"kt\">UIViewRepresentableContext</span><span class=\"o\">&lt;</span><span class=\"kt\">PickerField</span><span class=\"o\">&gt;</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"nv\">index</span> <span class=\"o\">=</span> <span class=\"n\">selectionIndex</span> <span class=\"p\">{</span>\n            <span class=\"n\">uiView</span><span class=\"o\">.</span><span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">]</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"n\">uiView</span><span class=\"o\">.</span><span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"s\">\"\"</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\">// MARK: - Private properties</span>\n    <span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">placeholder</span><span class=\"p\">:</span> <span class=\"kt\">String</span>\n    <span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">data</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">String</span><span class=\"p\">]</span>\n    <span class=\"kd\">private</span> <span class=\"k\">let</span> <span class=\"nv\">textField</span><span class=\"p\">:</span> <span class=\"kt\">PickerTextField</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Same as the <code class=\"language-plaintext highlighter-rouge\">PickerTextField</code> class, this struct will also have two properties; a list with the options and a binding property for the value of the field.</p>\n\n<p>Once again, we will use the initializer to pass the values of these properties via its arguments. The initializer takes one more argument for the placeholder of the <code class=\"language-plaintext highlighter-rouge\">UITextField</code> if the field has no value.</p>\n\n<p>Then, we provide the implementations for the <code class=\"language-plaintext highlighter-rouge\">makeUIView</code> and <code class=\"language-plaintext highlighter-rouge\">updateUIView</code> requirements of the <code class=\"language-plaintext highlighter-rouge\">UIViewRepresentable</code> protocol.</p>\n\n<p>In the first one, we set the initial state for the text field by setting the value for the placeholder. In the second, we update the value of the <code class=\"language-plaintext highlighter-rouge\">PickerField</code> with any new information we might get from SwiftUI.</p>\n\n<p>Finally, from any SwiftUI view, we can use this struct in the following way:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">@State</span> <span class=\"k\">var</span> <span class=\"nv\">selectedIndex</span><span class=\"p\">:</span> <span class=\"kt\">Int</span><span class=\"p\">?</span> <span class=\"o\">=</span> <span class=\"kc\">nil</span>\n<span class=\"k\">let</span> <span class=\"nv\">options</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">String</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"GraphQL\"</span><span class=\"p\">,</span> <span class=\"s\">\"Swift\"</span><span class=\"p\">,</span> <span class=\"s\">\"Vapor\"</span><span class=\"p\">]</span>\n\n<span class=\"k\">var</span> <span class=\"nv\">body</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// ...</span>\n    <span class=\"kt\">PickerField</span><span class=\"p\">(</span><span class=\"s\">\"Select an option\"</span><span class=\"p\">,</span> <span class=\"nv\">data</span><span class=\"p\">:</span> <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">options</span><span class=\"p\">,</span> <span class=\"nv\">selectionIndex</span><span class=\"p\">:</span> <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"err\">$</span><span class=\"n\">selectedIndex</span><span class=\"p\">)</span>\n    <span class=\"c1\">// ...</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>You can find the code for this <a href=\"https://gist.github.com/diamantidis/061d101853f6400f76780345614b2c90#file-pickertextfield-swift\"><code class=\"language-plaintext highlighter-rouge\">PickerTextField</code></a>, as well as <a href=\"https://gist.github.com/diamantidis/061d101853f6400f76780345614b2c90#file-pickerfield-swift\">the rest of the code</a> and <a href=\"https://gist.github.com/diamantidis/061d101853f6400f76780345614b2c90#file-contentview-swift\">an example of how to use it from a SwiftUI View</a> on this <a href=\"https://gist.github.com/diamantidis/061d101853f6400f76780345614b2c90\">Gist</a>.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>And that’s about it! In this post, we have first seen what is the current level of support for keyboard types on SwiftUI’s <code class=\"language-plaintext highlighter-rouge\">TextField</code>. Then, we investigated how we can provide support for more options by relying on the UIKit’s UITextField, and its property <code class=\"language-plaintext highlighter-rouge\">inputView</code>. This way, we can present a keyboard with a <code class=\"language-plaintext highlighter-rouge\">UIPickerView</code>, or any other view we may want.</p>\n\n<p>Thanks for reading, I hope you find this post useful and if you have any questions or comments about this post, feel free to contact me on <a href=\"https://twitter.com/diamantidis_io\">Twitter</a>!</p>\n\n<p>Until next time!</p>\n\n",
            "tags": ["Swift","SwiftUI","iOS"],
            "image": "https://diamantidis.github.io/%7B%22path%22=%3E%22/assets/social/keyboard-options-for-swiftui-fields.png%22,%20%22width%22=%3E910,%20%22height%22=%3E512%7D"
        },
        
        {
            "id": "https://diamantidis.github.io/2020/06/14/graphql-mutations-for-ios-app",
            "url": "https://diamantidis.github.io/2020/06/14/graphql-mutations-for-ios-app",
            "title": "GraphQL mutations for iOS apps (with the help of Combine's Future)",
            "date_published": "2020-06-14T04:00:00+00:00",
            
            "date_modified": "2020-06-14T04:00:00+00:00",
            
            "author": {
                "name": "Ioannis Diamantidis",
                "url": "https://diamantidis.github.io"
            },
            "summary": "<p>Nowadays, more and more apps rely on a server to support their functionality. One part of this communication is the ability of the app to create new and modify existing data stored on the server.</p>\n\n",
            "content_html": "<p>Nowadays, more and more apps rely on a server to support their functionality. One part of this communication is the ability of the app to create new and modify existing data stored on the server.</p>\n\n<p>In GraphQL terms, this can be accomplished with the so-called <code class=\"language-plaintext highlighter-rouge\">Mutations</code>. GraphQL uses the term <code class=\"language-plaintext highlighter-rouge\">Mutations</code> to distinguish the queries that will result in some kind of side-effect on the server-side data, from the normal queries that we are using to just fetch data.</p>\n\n<p>Long story short, in this post, we are going to see how we can perform GraphQL mutations from an iOS app using the <a href=\"https://www.apollographql.com/docs/ios/\">Apollo iOS client</a> and with a little help from <a href=\"https://developer.apple.com/documentation/combine/future\">Combine’s Future</a>.</p>\n\n<p>The scenario that we want to accomplish is quite simple. First, we are going to fetch some data from the server and then we are going to create a new entry. Once it is created, we will update it and finally delete it.</p>\n\n<h2 id=\"prerequisites\">Prerequisites</h2>\n\n<p>This post is a continuation of a series of posts about GraphQL and Swift. In the previous posts, we have seen <a href=\"/2020/05/24/swift-loves-graphql-server-with-vapor-and-ios-app-client\">how to setup an iOS project to fetch</a> and <a href=\"/2020/05/31/custom-graphql-types-on-swift-projects\">decode data from a GraphQL server</a>. This time we will see how to modify server-side data using GraphQL’s mutations.</p>\n\n<p>For the server, we are going to use a GraphQL server built with the Vapor framework. The project, along with instructions on how to set it up, is available on <a href=\"https://github.com/diamantidis/vapor-graphql\">GitHub</a> or you can refer to the previous posts to learn more on <a href=\"/2020/05/24/swift-loves-graphql-server-with-vapor-and-ios-app-client\">how to setup</a>, <a href=\"/2020/05/31/custom-graphql-types-on-swift-projects\">add fields with custom types</a> and <a href=\"/2020/06/07/mutations-on-a-graphql-server-built-with-vapor\">add mutations</a>.</p>\n\n<p>Also, the iOS project will be based on the project we have built on the previous posts. This project and the instructions on how to set it up are also available on <a href=\"https://github.com/diamantidis/ios-graphql\">GitHub</a>.</p>\n\n<p>In those previous posts, I was using a model representing a post and I will continue doing so on this post as well.</p>\n\n<h2 id=\"a-future-and-promise-primer\">A Future and Promise Primer</h2>\n\n<p>As I mentioned before, we are going to use <a href=\"https://developer.apple.com/documentation/combine/future\">Combine’s Future</a>.</p>\n\n<p>Future was introduced on iOS 13 and is a <code class=\"language-plaintext highlighter-rouge\">Publisher</code> that represents the result of an asynchronous operation. Practically, it will generate a single value or an error and then it will finish.</p>\n\n<p>Future is defined as a generic with two types, one for the type of the value and one for the type of the error.\nIts initializer takes a single argument, which is a closure of type <code class=\"language-plaintext highlighter-rouge\">(Promise) -&gt; Void</code>.</p>\n\n<p>As you can see, the closure has an argument of type <code class=\"language-plaintext highlighter-rouge\">Promise</code>. <code class=\"language-plaintext highlighter-rouge\">Promise</code> itself is a closure that takes a <code class=\"language-plaintext highlighter-rouge\">Result</code> as a single parameter and is defined as a typealias for <code class=\"language-plaintext highlighter-rouge\">(Result&lt;Output, Failure&gt;) -&gt; Void</code>.</p>\n\n<p>Inside Future’s closure, we are using the instance of <code class=\"language-plaintext highlighter-rouge\">Promise</code> and pass either <code class=\"language-plaintext highlighter-rouge\">.success</code> or <code class=\"language-plaintext highlighter-rouge\">.failure</code> as a parameter to determine if the asynchronous operation was successful or not.</p>\n\n<p>Let’s see a simple example:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">enum</span> <span class=\"kt\">AppError</span><span class=\"p\">:</span> <span class=\"kt\">Error</span> <span class=\"p\">{</span>\n    <span class=\"k\">case</span> <span class=\"n\">random</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">let</span> <span class=\"nv\">future</span> <span class=\"o\">=</span> <span class=\"kt\">Future</span><span class=\"o\">&lt;</span><span class=\"kt\">String</span><span class=\"p\">,</span> <span class=\"kt\">AppError</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span> <span class=\"n\">promise</span> <span class=\"k\">in</span>\n    <span class=\"k\">if</span> <span class=\"kc\">true</span> <span class=\"p\">{</span>\n        <span class=\"nf\">promise</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"nf\">success</span><span class=\"p\">(</span><span class=\"s\">\"🎉\"</span><span class=\"p\">))</span>\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n        <span class=\"nf\">promise</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"nf\">failure</span><span class=\"p\">(</span><span class=\"kt\">AppError</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"p\">))</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n<p>In this example, our Future can either generate a <code class=\"language-plaintext highlighter-rouge\">String</code> value or it will fail with an error of type <code class=\"language-plaintext highlighter-rouge\">AppError</code>. Then, inside the closure, we are passing the result to the promise closure.</p>\n\n<p>And that’s brief intro to Combine’s Future. Let’s now jump to the GraphQL mutations!</p>\n\n<h2 id=\"implementation\">Implementation</h2>\n\n<p>Having setup the project as it was at the end of the <a href=\"/2020/05/31/custom-graphql-types-on-swift-projects\">previous post</a>, we will have to update the schema to fetch the definitions for the mutations.</p>\n\n<p>With the server running, run the following command from the root directory of the iOS project to update the <code class=\"language-plaintext highlighter-rouge\">schema.json</code>.</p>\n\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>apollo schema:download <span class=\"nt\">--endpoint</span><span class=\"o\">=</span>http://127.0.0.1:8080/graphql iOSGraphQL/GraphQL/schema.json\n</code></pre></div></div>\n\n<p>Once completed, we will head over to Xcode and inside the GraphQL group, we will create three files for the three mutations: <code class=\"language-plaintext highlighter-rouge\">CreatePost.graphql</code>, <code class=\"language-plaintext highlighter-rouge\">EditPost.graphql</code> and <code class=\"language-plaintext highlighter-rouge\">DeletePost.graphql</code>.</p>\n\n<p>Add the following snippets as content on these files respectively:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"err\">#</span> <span class=\"nx\">CreatePost</span><span class=\"p\">.</span><span class=\"nx\">graphql</span>\n<span class=\"nx\">mutation</span> <span class=\"nx\">CreatePost</span><span class=\"p\">(</span><span class=\"nx\">$input</span><span class=\"p\">:</span> <span class=\"nx\">PostInput</span><span class=\"o\">!</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">createPost</span><span class=\"p\">(</span><span class=\"nx\">input</span><span class=\"p\">:</span> <span class=\"nx\">$input</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">id</span>\n    <span class=\"nx\">title</span>\n    <span class=\"nx\">publishedAt</span>\n    <span class=\"nx\">tags</span>\n    <span class=\"nx\">author</span> <span class=\"p\">{</span>\n      <span class=\"p\">...</span><span class=\"nx\">AuthorDetails</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"err\">#</span> <span class=\"nx\">EditPost</span><span class=\"p\">.</span><span class=\"nx\">graphql</span>\n<span class=\"nx\">mutation</span> <span class=\"nx\">EditPost</span><span class=\"p\">(</span><span class=\"nx\">$id</span><span class=\"p\">:</span> <span class=\"nx\">CustomUUID</span><span class=\"o\">!</span><span class=\"p\">,</span> <span class=\"nx\">$title</span><span class=\"p\">:</span> <span class=\"nb\">String</span><span class=\"o\">!</span><span class=\"p\">,</span> <span class=\"nx\">$tags</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nx\">Tag</span><span class=\"o\">!</span><span class=\"p\">]</span><span class=\"o\">!</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">editPost</span><span class=\"p\">(</span><span class=\"nx\">id</span><span class=\"p\">:</span> <span class=\"nx\">$id</span><span class=\"p\">,</span> <span class=\"nx\">tags</span><span class=\"p\">:</span> <span class=\"nx\">$tags</span><span class=\"p\">,</span> <span class=\"nx\">title</span><span class=\"p\">:</span> <span class=\"nx\">$title</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">id</span>\n    <span class=\"nx\">title</span>\n    <span class=\"nx\">publishedAt</span>\n    <span class=\"nx\">tags</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"err\">#</span> <span class=\"nx\">DeletePost</span><span class=\"p\">.</span><span class=\"nx\">graphql</span>\n<span class=\"nx\">mutation</span> <span class=\"nx\">DeletePost</span><span class=\"p\">(</span><span class=\"nx\">$id</span><span class=\"p\">:</span> <span class=\"nx\">CustomUUID</span><span class=\"o\">!</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">deletePost</span><span class=\"p\">(</span><span class=\"nx\">id</span><span class=\"p\">:</span> <span class=\"nx\">$id</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>All those queries follow the same pattern. We set the arguments, pass them to the mutation, and define the result data. With all the queries in place, we will run the <code class=\"language-plaintext highlighter-rouge\">apollo codegen:generate</code> command to update the <code class=\"language-plaintext highlighter-rouge\">API.swift</code>.</p>\n\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>./Pods/Apollo/scripts/apollo/bin/apollo codegen:generate <span class=\"nt\">--target</span><span class=\"o\">=</span>swift <span class=\"s1\">'--includes=./**/*.graphql'</span> <span class=\"nt\">--localSchemaFile</span><span class=\"o\">=</span>./iOSGraphQL/GraphQL/schema.json <span class=\"nt\">--passthroughCustomScalars</span> ./iOSGraphQL/GraphQL/API.swift\n</code></pre></div></div>\n\n<p>Before adding the implementation for the mutation, let’s create a function that will be responsible for fetching the existing posts. The return type will be a <code class=\"language-plaintext highlighter-rouge\">Future</code> with <code class=\"language-plaintext highlighter-rouge\">[Post]</code> as the <code class=\"language-plaintext highlighter-rouge\">Output</code> type and <code class=\"language-plaintext highlighter-rouge\">GraphQLError</code> as the <code class=\"language-plaintext highlighter-rouge\">Failure</code> type and it will look like the following snippet:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">private</span> <span class=\"kd\">func</span> <span class=\"nf\">fetchPosts</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Future</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"kt\">Post</span><span class=\"p\">],</span> <span class=\"kt\">GraphQLError</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">let</span> <span class=\"nv\">query</span> <span class=\"o\">=</span> <span class=\"kt\">AllPostsQuery</span><span class=\"p\">()</span>\n\n    <span class=\"k\">let</span> <span class=\"nv\">future</span> <span class=\"o\">=</span> <span class=\"kt\">Future</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"kt\">Post</span><span class=\"p\">],</span> <span class=\"kt\">GraphQLError</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span> <span class=\"n\">promise</span> <span class=\"k\">in</span>\n        <span class=\"kt\">GraphQLClient</span><span class=\"o\">.</span><span class=\"n\">apollo</span><span class=\"o\">.</span><span class=\"nf\">fetch</span><span class=\"p\">(</span><span class=\"nv\">query</span><span class=\"p\">:</span> <span class=\"n\">query</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">result</span> <span class=\"k\">in</span>\n            <span class=\"k\">guard</span> <span class=\"k\">let</span> <span class=\"nv\">data</span> <span class=\"o\">=</span> <span class=\"k\">try</span><span class=\"p\">?</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"nf\">get</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">data</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n                <span class=\"k\">return</span> <span class=\"nf\">promise</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"nf\">failure</span><span class=\"p\">(</span><span class=\"kt\">GraphQLError</span><span class=\"o\">.</span><span class=\"n\">fetchError</span><span class=\"p\">))</span>\n            <span class=\"p\">}</span>\n            <span class=\"k\">let</span> <span class=\"nv\">posts</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">posts</span><span class=\"o\">.</span><span class=\"n\">map</span> <span class=\"p\">{</span> <span class=\"kt\">Post</span><span class=\"p\">(</span><span class=\"nv\">post</span><span class=\"p\">:</span> <span class=\"nv\">$0</span><span class=\"p\">)</span> <span class=\"p\">}</span>\n            <span class=\"k\">return</span> <span class=\"nf\">promise</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"nf\">success</span><span class=\"p\">(</span><span class=\"n\">posts</span><span class=\"p\">))</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">future</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>In this snippet, we are creating an instance of the query that we want to perform and then we create a future. Inside the Future’s closure, we will initialize the fetch request and once it’s completed, we will try to get the response. If the response is an error, then we are going to reject the Future by passing an error to its promise.\nOtherwise, we will map the response to the <code class=\"language-plaintext highlighter-rouge\">Post</code> model and then pass <code class=\"language-plaintext highlighter-rouge\">.success</code> with this list of posts to the promise.</p>\n\n<p>For the scope of this post, the <code class=\"language-plaintext highlighter-rouge\">GraphQLError</code> will be a simple Error enum:</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">enum</span> <span class=\"kt\">GraphQLError</span><span class=\"p\">:</span> <span class=\"kt\">Error</span> <span class=\"p\">{</span>\n    <span class=\"k\">case</span> <span class=\"n\">fetchError</span>\n    <span class=\"k\">case</span> <span class=\"n\">createError</span>\n    <span class=\"k\">case</span> <span class=\"n\">editError</span>\n    <span class=\"k\">case</span> <span class=\"n\">deleteError</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Now, let’s see how we can perform the mutation queries!</p>\n\n<p>Following the same logic as with the <code class=\"language-plaintext highlighter-rouge\">fetchPosts</code>, we are going to add three more functions to create, update, and delete a post:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>    <span class=\"kd\">private</span> <span class=\"kd\">func</span> <span class=\"nf\">createPost</span><span class=\"p\">(</span><span class=\"nv\">title</span><span class=\"p\">:</span> <span class=\"kt\">String</span><span class=\"p\">,</span> <span class=\"nv\">tags</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">Tag</span><span class=\"p\">],</span> <span class=\"nv\">authorId</span><span class=\"p\">:</span> <span class=\"kt\">CustomUUID</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Future</span><span class=\"o\">&lt;</span><span class=\"kt\">CreatePostMutation</span><span class=\"o\">.</span><span class=\"kt\">Data</span><span class=\"o\">.</span><span class=\"kt\">CreatePost</span><span class=\"p\">,</span> <span class=\"kt\">GraphQLError</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n        <span class=\"k\">let</span> <span class=\"nv\">input</span> <span class=\"o\">=</span> <span class=\"kt\">PostInput</span><span class=\"p\">(</span><span class=\"nv\">authorId</span><span class=\"p\">:</span> <span class=\"n\">authorId</span><span class=\"p\">,</span> <span class=\"nv\">tags</span><span class=\"p\">:</span> <span class=\"n\">tags</span><span class=\"p\">,</span> <span class=\"nv\">title</span><span class=\"p\">:</span> <span class=\"n\">title</span><span class=\"p\">)</span>\n        <span class=\"k\">let</span> <span class=\"nv\">mutation</span> <span class=\"o\">=</span> <span class=\"kt\">CreatePostMutation</span><span class=\"p\">(</span><span class=\"nv\">input</span><span class=\"p\">:</span> <span class=\"n\">input</span><span class=\"p\">)</span>\n\n        <span class=\"k\">let</span> <span class=\"nv\">future</span> <span class=\"o\">=</span> <span class=\"kt\">Future</span><span class=\"o\">&lt;</span><span class=\"kt\">CreatePostMutation</span><span class=\"o\">.</span><span class=\"kt\">Data</span><span class=\"o\">.</span><span class=\"kt\">CreatePost</span><span class=\"p\">,</span> <span class=\"kt\">GraphQLError</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span> <span class=\"n\">promise</span> <span class=\"k\">in</span>\n            <span class=\"kt\">GraphQLClient</span><span class=\"o\">.</span><span class=\"n\">apollo</span><span class=\"o\">.</span><span class=\"nf\">perform</span><span class=\"p\">(</span><span class=\"nv\">mutation</span><span class=\"p\">:</span> <span class=\"n\">mutation</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">result</span> <span class=\"k\">in</span>\n                <span class=\"k\">guard</span> <span class=\"k\">let</span> <span class=\"nv\">post</span> <span class=\"o\">=</span> <span class=\"k\">try</span><span class=\"p\">?</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"nf\">get</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">?</span><span class=\"o\">.</span><span class=\"n\">createPost</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n                    <span class=\"k\">return</span> <span class=\"nf\">promise</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"nf\">failure</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">createError</span><span class=\"p\">))</span>\n                <span class=\"p\">}</span>\n                <span class=\"k\">return</span> <span class=\"nf\">promise</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"nf\">success</span><span class=\"p\">(</span><span class=\"n\">post</span><span class=\"p\">))</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"n\">future</span>\n    <span class=\"p\">}</span>\n</code></pre></div></div>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>    <span class=\"kd\">private</span> <span class=\"kd\">func</span> <span class=\"nf\">editPost</span><span class=\"p\">(</span><span class=\"n\">with</span> <span class=\"nv\">id</span><span class=\"p\">:</span> <span class=\"kt\">CustomUUID</span><span class=\"p\">,</span> <span class=\"nv\">title</span><span class=\"p\">:</span> <span class=\"kt\">String</span><span class=\"p\">,</span> <span class=\"nv\">tags</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">Tag</span><span class=\"p\">])</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Future</span><span class=\"o\">&lt;</span><span class=\"kt\">EditPostMutation</span><span class=\"o\">.</span><span class=\"kt\">Data</span><span class=\"o\">.</span><span class=\"kt\">EditPost</span><span class=\"p\">,</span> <span class=\"kt\">GraphQLError</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n        <span class=\"k\">let</span> <span class=\"nv\">mutation</span> <span class=\"o\">=</span> <span class=\"kt\">EditPostMutation</span><span class=\"p\">(</span><span class=\"nv\">id</span><span class=\"p\">:</span> <span class=\"n\">id</span><span class=\"p\">,</span> <span class=\"nv\">title</span><span class=\"p\">:</span> <span class=\"n\">title</span><span class=\"p\">,</span> <span class=\"nv\">tags</span><span class=\"p\">:</span> <span class=\"n\">tags</span><span class=\"p\">)</span>\n\n        <span class=\"k\">let</span> <span class=\"nv\">future</span> <span class=\"o\">=</span> <span class=\"kt\">Future</span><span class=\"o\">&lt;</span><span class=\"kt\">EditPostMutation</span><span class=\"o\">.</span><span class=\"kt\">Data</span><span class=\"o\">.</span><span class=\"kt\">EditPost</span><span class=\"p\">,</span> <span class=\"kt\">GraphQLError</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span> <span class=\"n\">promise</span> <span class=\"k\">in</span>\n            <span class=\"kt\">GraphQLClient</span><span class=\"o\">.</span><span class=\"n\">apollo</span><span class=\"o\">.</span><span class=\"nf\">perform</span><span class=\"p\">(</span><span class=\"nv\">mutation</span><span class=\"p\">:</span> <span class=\"n\">mutation</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">result</span> <span class=\"k\">in</span>\n                <span class=\"k\">guard</span> <span class=\"k\">let</span> <span class=\"nv\">post</span> <span class=\"o\">=</span> <span class=\"k\">try</span><span class=\"p\">?</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"nf\">get</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">?</span><span class=\"o\">.</span><span class=\"n\">editPost</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n                    <span class=\"k\">return</span> <span class=\"nf\">promise</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"nf\">failure</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">editError</span><span class=\"p\">))</span>\n                <span class=\"p\">}</span>\n                <span class=\"k\">return</span> <span class=\"nf\">promise</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"nf\">success</span><span class=\"p\">(</span><span class=\"n\">post</span><span class=\"p\">))</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">future</span>\n    <span class=\"p\">}</span>\n</code></pre></div></div>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>    <span class=\"kd\">private</span> <span class=\"kd\">func</span> <span class=\"nf\">deletePost</span><span class=\"p\">(</span><span class=\"n\">with</span> <span class=\"nv\">id</span><span class=\"p\">:</span> <span class=\"kt\">CustomUUID</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Future</span><span class=\"o\">&lt;</span><span class=\"kt\">Bool</span><span class=\"p\">,</span> <span class=\"kt\">GraphQLError</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n        <span class=\"k\">let</span> <span class=\"nv\">mutation</span> <span class=\"o\">=</span> <span class=\"kt\">DeletePostMutation</span><span class=\"p\">(</span><span class=\"nv\">id</span><span class=\"p\">:</span> <span class=\"n\">id</span><span class=\"p\">)</span>\n\n        <span class=\"k\">let</span> <span class=\"nv\">future</span> <span class=\"o\">=</span> <span class=\"kt\">Future</span><span class=\"o\">&lt;</span><span class=\"kt\">Bool</span><span class=\"p\">,</span> <span class=\"kt\">GraphQLError</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span> <span class=\"n\">promise</span> <span class=\"k\">in</span>\n            <span class=\"kt\">GraphQLClient</span><span class=\"o\">.</span><span class=\"n\">apollo</span><span class=\"o\">.</span><span class=\"nf\">perform</span><span class=\"p\">(</span><span class=\"nv\">mutation</span><span class=\"p\">:</span> <span class=\"n\">mutation</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">result</span> <span class=\"k\">in</span>\n                <span class=\"k\">guard</span> <span class=\"k\">let</span> <span class=\"nv\">result</span> <span class=\"o\">=</span> <span class=\"k\">try</span><span class=\"p\">?</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"nf\">get</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">?</span><span class=\"o\">.</span><span class=\"n\">deletePost</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n                    <span class=\"k\">return</span> <span class=\"nf\">promise</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"nf\">failure</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">deleteError</span><span class=\"p\">))</span>\n                <span class=\"p\">}</span>\n                <span class=\"k\">return</span> <span class=\"nf\">promise</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"nf\">success</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">))</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">future</span>\n    <span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>In all these 3 functions, we are following the same logic. We accept a set of arguments, which we use to create an instance of a mutation. Those Mutation classes were generated based on the GraphQL queries when we ran the <code class=\"language-plaintext highlighter-rouge\">apollo codegen:generate</code> command.</p>\n\n<p>Then we create a future and inside its closure we perform the mutation request. Once it is completed, we check if the response is successful or not, and based on that we pass the corresponding result on the promise.</p>\n\n<p>Lastly, we will need to provide an extension for the <code class=\"language-plaintext highlighter-rouge\">CustomUUID</code> structure to make it conform to the <code class=\"language-plaintext highlighter-rouge\">JSONEncodable</code> protocol. This will allow us to use it as an argument on the GraphQL mutation queries.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">extension</span> <span class=\"kt\">CustomUUID</span><span class=\"p\">:</span> <span class=\"kt\">JSONEncodable</span> <span class=\"p\">{</span>\n    <span class=\"kd\">public</span> <span class=\"k\">var</span> <span class=\"nv\">jsonValue</span><span class=\"p\">:</span> <span class=\"kt\">JSONValue</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"s\">\"value\"</span><span class=\"p\">:</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">uuidString</span><span class=\"p\">]</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Now, let’s see how we can use those functions to make the requests.\n<code class=\"language-plaintext highlighter-rouge\">Future</code> conforms to <code class=\"language-plaintext highlighter-rouge\">Publisher</code> which means that we can use any of the <code class=\"language-plaintext highlighter-rouge\">Publisher</code>’s functions. In our case, we are going to use <code class=\"language-plaintext highlighter-rouge\">flatMap</code> and <code class=\"language-plaintext highlighter-rouge\">sink</code> to combine and trigger the sequence of operations.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">cancellable</span> <span class=\"o\">=</span> <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"nf\">fetchPosts</span><span class=\"p\">()</span>\n    <span class=\"o\">.</span><span class=\"n\">flatMap</span> <span class=\"p\">{</span> <span class=\"n\">posts</span> <span class=\"k\">in</span>\n        <span class=\"k\">return</span> <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"nf\">createPost</span><span class=\"p\">(</span><span class=\"nv\">title</span><span class=\"p\">:</span> <span class=\"s\">\"New post\"</span><span class=\"p\">,</span> <span class=\"nv\">tags</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"o\">.</span><span class=\"n\">swift</span><span class=\"p\">],</span> <span class=\"nv\">authorId</span><span class=\"p\">:</span> <span class=\"n\">posts</span><span class=\"o\">.</span><span class=\"n\">first</span><span class=\"o\">!.</span><span class=\"n\">author</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n    <span class=\"o\">.</span><span class=\"n\">flatMap</span> <span class=\"p\">{</span> <span class=\"n\">post</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Future</span><span class=\"o\">&lt;</span><span class=\"kt\">EditPostMutation</span><span class=\"o\">.</span><span class=\"kt\">Data</span><span class=\"o\">.</span><span class=\"kt\">EditPost</span><span class=\"p\">,</span> <span class=\"kt\">GraphQLError</span><span class=\"o\">&gt;</span> <span class=\"k\">in</span>\n        <span class=\"k\">let</span> <span class=\"nv\">updatedTags</span> <span class=\"o\">=</span> <span class=\"n\">post</span><span class=\"o\">.</span><span class=\"n\">tags</span> <span class=\"o\">+</span> <span class=\"p\">[</span><span class=\"o\">.</span><span class=\"n\">vapor</span><span class=\"p\">,</span> <span class=\"o\">.</span><span class=\"n\">graphQl</span><span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"nf\">editPost</span><span class=\"p\">(</span><span class=\"nv\">with</span><span class=\"p\">:</span> <span class=\"n\">post</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">,</span> <span class=\"nv\">title</span><span class=\"p\">:</span> <span class=\"s\">\"Updated Title\"</span><span class=\"p\">,</span> <span class=\"nv\">tags</span><span class=\"p\">:</span> <span class=\"n\">updatedTags</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n    <span class=\"o\">.</span><span class=\"n\">flatMap</span> <span class=\"p\">{</span> <span class=\"n\">post</span> <span class=\"k\">in</span>\n        <span class=\"k\">return</span> <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"nf\">deletePost</span><span class=\"p\">(</span><span class=\"nv\">with</span><span class=\"p\">:</span> <span class=\"n\">post</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n    <span class=\"o\">.</span><span class=\"nf\">sink</span><span class=\"p\">(</span>\n        <span class=\"nv\">receiveCompletion</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nv\">$0</span><span class=\"p\">)</span> <span class=\"p\">},</span>\n        <span class=\"nv\">receiveValue</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nv\">$0</span><span class=\"p\">)</span> <span class=\"p\">}</span>\n    <span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>In this snippet, we first call <code class=\"language-plaintext highlighter-rouge\">fetchPosts</code> to fetch the list of posts and then using <code class=\"language-plaintext highlighter-rouge\">flatMap</code> we pass the response and trigger the next request. Finally, we call <code class=\"language-plaintext highlighter-rouge\">sink</code>. As you can see from the snippet, <code class=\"language-plaintext highlighter-rouge\">sink</code> takes two parameters. The first one (<code class=\"language-plaintext highlighter-rouge\">receiveComplete</code>) is a closure that gets executed on completion, be it a success or an error, while the second one (<code class=\"language-plaintext highlighter-rouge\">receiveValue</code>) is a closure that gets executed every time we receive a new value from the publisher.</p>\n\n<p>Since <code class=\"language-plaintext highlighter-rouge\">Future</code> performs operations asynchronously, we need to keep a reference to the cancellable that the call to <code class=\"language-plaintext highlighter-rouge\">sink</code> returns. Otherwise, Swift will destroy it by the time it exits the scope, and thus the closures will never get called.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// class scope</span>\n<span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">cancellable</span><span class=\"p\">:</span> <span class=\"kt\">AnyCancellable</span><span class=\"p\">?</span>\n</code></pre></div></div>\n\n<p>Finally, make sure to call <code class=\"language-plaintext highlighter-rouge\">cancellable?.cancel()</code> on the <code class=\"language-plaintext highlighter-rouge\">deinit</code>.</p>\n\n<p>And that was it! If you now run the app, it will execute those queries in order. If you want to “see” the flow of events, you can use the <code class=\"language-plaintext highlighter-rouge\">.print()</code> function between the <code class=\"language-plaintext highlighter-rouge\">.flatMap</code> calls and it will print the events.</p>\n\n<blockquote>\n  <p>All the code from this post is also available on <a href=\"https://github.com/diamantidis/ios-graphql/tree/94d390a\">GitHub</a>.</p>\n</blockquote>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>To sum up, in this post, we have made a brief introduction to Combine’s <code class=\"language-plaintext highlighter-rouge\">Future</code> and <code class=\"language-plaintext highlighter-rouge\">Promise</code> and we have seen how we can use them to perform GraphQL mutations. More specifically, we have seen how to implement the logic to sequentially create, edit, and delete a post.</p>\n\n<p>Thanks for reading, I hope you find this post useful.</p>\n\n<p>If you like this post and you want to get notified when a new post is published, you can follow me on <a href=\"https://twitter.com/diamantidis_io\">Twitter</a> or subscribe to the <a href=\"https://diamantidis.github.io/feed.xml\">RSS feed</a>.</p>\n\n<p>Also, if you have any questions or comments about this post, feel free to contact me on <a href=\"https://twitter.com/diamantidis_io\">Twitter</a>!</p>\n\n<p>Until next time!</p>\n\n",
            "tags": ["Swift","GraphQL","iOS"],
            "image": "https://diamantidis.github.io/%7B%22path%22=%3E%22/assets/social/graphql-mutations-for-ios-apps.png%22,%20%22width%22=%3E863,%20%22height%22=%3E512%7D"
        },
        
        {
            "id": "https://diamantidis.github.io/2020/06/07/mutations-on-a-graphql-server-built-with-vapor",
            "url": "https://diamantidis.github.io/2020/06/07/mutations-on-a-graphql-server-built-with-vapor",
            "title": "Mutations on a GraphQL server built with Vapor",
            "date_published": "2020-06-07T04:00:00+00:00",
            
            "date_modified": "2020-06-07T04:00:00+00:00",
            
            "author": {
                "name": "Ioannis Diamantidis",
                "url": "https://diamantidis.github.io"
            },
            "summary": "<p>One characteristic of a complete API is its ability to allow clients to modify the server-side data. This can be in the form of creating new entries, updating or deleting existing ones, etc. Building a GraphQL server couldn’t be any different.</p>\n\n",
            "content_html": "<p>One characteristic of a complete API is its ability to allow clients to modify the server-side data. This can be in the form of creating new entries, updating or deleting existing ones, etc. Building a GraphQL server couldn’t be any different.</p>\n\n<p>To describe this kind of features, GraphQL uses the term <code class=\"language-plaintext highlighter-rouge\">Mutations</code>. Mutations are just like normal queries. The only difference is that they make it explicit that they will result in some kind of side-effect on the server-side data.</p>\n\n<p>And that’s where this post will focus on. I am going to describe how to add the mutations to create, edit, and delete an entry on a GraphQL server built with Vapor.</p>\n\n<h2 id=\"prerequisites\">Prerequisites</h2>\n\n<p>The code in this post is a continuation of the code from my two latest posts. In the first one, I described <a href=\"/2020/05/24/swift-loves-graphql-server-with-vapor-and-ios-app-client\">how to setup a GraphQL server with Vapor</a> and in the second I focused on <a href=\"/2020/05/31/custom-graphql-types-on-swift-projects\">how to use custom types on this GraphQL server</a>.</p>\n\n<p>If you want to go through the code as you read the post, the code from the previous posts as well as the code from this post is available on <a href=\"https://github.com/diamantidis/vapor-graphql/tree/3db78ea\">GitHub</a>.</p>\n\n<p>Now, let’s get started!</p>\n\n<h2 id=\"implementation\">Implementation</h2>\n\n<h3 id=\"prepare-the-models\">Prepare the models</h3>\n\n<p>First, and before we jump into the mutations, we need to adjust our existing models to support the mutations.</p>\n\n<p>For example, when it comes to the edit mutation, we will have to update some properties of the <code class=\"language-plaintext highlighter-rouge\">Post</code> model from constant to variable properties.</p>\n<div class=\"language-diff highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code> struct Post: Codable {\n     let id: CustomUUID\n<span class=\"gd\">-    let title: String\n</span><span class=\"gi\">+    var title: String\n</span>     let publishedAt: Date\n<span class=\"gd\">-    let tags: [Tag]\n</span><span class=\"gi\">+    var tags: [Tag]\n</span>     let author: Author\n }\n</code></pre></div></div>\n\n<p>Similarly, in order to be able to filter the posts by the <code class=\"language-plaintext highlighter-rouge\">id</code> property, we will have to make <code class=\"language-plaintext highlighter-rouge\">CustomUUID</code> conform to the <code class=\"language-plaintext highlighter-rouge\">Equatable</code> protocol.</p>\n\n<div class=\"language-diff highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"gd\">-struct CustomUUID: Codable {\n</span><span class=\"gi\">+struct CustomUUID: Codable, Equatable {\n</span></code></pre></div></div>\n\n<p>With our models ready, we can now move on and start adding the logic for the mutations!</p>\n\n<h2 id=\"delete-mutation\">Delete mutation</h2>\n\n<p>Let’s start with the logic for the <code class=\"language-plaintext highlighter-rouge\">deletePost</code> mutation. For this mutation, we will expect the <code class=\"language-plaintext highlighter-rouge\">id</code> of the <code class=\"language-plaintext highlighter-rouge\">Post</code> to delete as an argument. Then, using this <code class=\"language-plaintext highlighter-rouge\">id</code>, we will search for the <code class=\"language-plaintext highlighter-rouge\">Post</code> in the in-memory list. If we manage to find the post, we are going to remove it and return <code class=\"language-plaintext highlighter-rouge\">true</code> to the client. Otherwise, we will return <code class=\"language-plaintext highlighter-rouge\">false</code> to let the client know that we didn’t manage to find the <code class=\"language-plaintext highlighter-rouge\">Post</code>.</p>\n\n<blockquote>\n  <p>For the sake of this post, I am using a <code class=\"language-plaintext highlighter-rouge\">Bool</code> as a return type. Ideally, we should return an error Type, but to keep this post focused on the mutations, I decided to go with the <code class=\"language-plaintext highlighter-rouge\">Bool</code>.</p>\n</blockquote>\n\n<p>So, let’s add an extension to the <code class=\"language-plaintext highlighter-rouge\">PostController</code> with this logic.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">extension</span> <span class=\"kt\">PostController</span> <span class=\"p\">{</span>\n    <span class=\"kd\">struct</span> <span class=\"kt\">DeletePostArguments</span><span class=\"p\">:</span> <span class=\"kt\">Codable</span> <span class=\"p\">{</span>\n        <span class=\"k\">let</span> <span class=\"nv\">id</span><span class=\"p\">:</span> <span class=\"kt\">CustomUUID</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kd\">func</span> <span class=\"nf\">deletePost</span><span class=\"p\">(</span><span class=\"nv\">request</span><span class=\"p\">:</span> <span class=\"kt\">Request</span><span class=\"p\">,</span> <span class=\"nv\">arguments</span><span class=\"p\">:</span> <span class=\"kt\">DeletePostArguments</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Bool</span> <span class=\"p\">{</span>\n        <span class=\"k\">let</span> <span class=\"nv\">postIndex</span> <span class=\"o\">=</span> <span class=\"n\">posts</span><span class=\"o\">.</span><span class=\"n\">firstIndex</span><span class=\"p\">{</span> <span class=\"nv\">$0</span><span class=\"o\">.</span><span class=\"n\">id</span> <span class=\"o\">==</span> <span class=\"n\">arguments</span><span class=\"o\">.</span><span class=\"n\">id</span> <span class=\"p\">}</span>\n        <span class=\"k\">guard</span> <span class=\"k\">let</span> <span class=\"nv\">index</span> <span class=\"o\">=</span> <span class=\"n\">postIndex</span><span class=\"p\">?</span><span class=\"o\">.</span><span class=\"n\">indexValue</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span> <span class=\"kc\">false</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">posts</span><span class=\"o\">.</span><span class=\"nf\">remove</span><span class=\"p\">(</span><span class=\"nv\">at</span><span class=\"p\">:</span> <span class=\"n\">index</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"kc\">true</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Similarly, let’s add the logic for the <code class=\"language-plaintext highlighter-rouge\">editPost</code> mutation!</p>\n\n<h2 id=\"edit-mutation\">Edit mutation</h2>\n\n<p>The edit mutation will allow the user to change the value of the title and the tags for a given post. As a result, this time, we are going to require three arguments; an <code class=\"language-plaintext highlighter-rouge\">id</code>, which we will use to find the <code class=\"language-plaintext highlighter-rouge\">Post</code> to edit, as well as a <code class=\"language-plaintext highlighter-rouge\">title</code> and a <code class=\"language-plaintext highlighter-rouge\">tags</code> argument, which will contain the updated values for the <code class=\"language-plaintext highlighter-rouge\">title</code> and <code class=\"language-plaintext highlighter-rouge\">tags</code> properties respectively.</p>\n\n<p>To keep the logic visually separated, let’s add a new extension to <code class=\"language-plaintext highlighter-rouge\">PostController</code> for the logic related to the edit mutation. This extension will contain a new structure named <code class=\"language-plaintext highlighter-rouge\">EditPostArguments</code> and a function <code class=\"language-plaintext highlighter-rouge\">editPost</code> which will be responsible for editing a post.</p>\n\n<p>The implementation will look like the following snippet:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">extension</span> <span class=\"kt\">PostController</span> <span class=\"p\">{</span>\n    <span class=\"kd\">struct</span> <span class=\"kt\">EditPostArguments</span><span class=\"p\">:</span> <span class=\"kt\">Codable</span> <span class=\"p\">{</span>\n        <span class=\"k\">let</span> <span class=\"nv\">id</span><span class=\"p\">:</span> <span class=\"kt\">CustomUUID</span>\n        <span class=\"k\">let</span> <span class=\"nv\">title</span><span class=\"p\">:</span> <span class=\"kt\">String</span>\n        <span class=\"k\">let</span> <span class=\"nv\">tags</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">Tag</span><span class=\"p\">]</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kd\">func</span> <span class=\"nf\">editPost</span><span class=\"p\">(</span><span class=\"nv\">request</span><span class=\"p\">:</span> <span class=\"kt\">Request</span><span class=\"p\">,</span> <span class=\"nv\">arguments</span><span class=\"p\">:</span> <span class=\"kt\">EditPostArguments</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Post</span><span class=\"p\">?</span> <span class=\"p\">{</span>\n        <span class=\"k\">let</span> <span class=\"nv\">postIndex</span> <span class=\"o\">=</span> <span class=\"n\">posts</span><span class=\"o\">.</span><span class=\"n\">firstIndex</span> <span class=\"p\">{</span> <span class=\"nv\">$0</span><span class=\"o\">.</span><span class=\"n\">id</span> <span class=\"o\">==</span> <span class=\"n\">arguments</span><span class=\"o\">.</span><span class=\"n\">id</span> <span class=\"p\">}</span>\n        <span class=\"k\">guard</span> <span class=\"k\">let</span> <span class=\"nv\">index</span> <span class=\"o\">=</span> <span class=\"n\">postIndex</span><span class=\"p\">?</span><span class=\"o\">.</span><span class=\"n\">indexValue</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span> <span class=\"kc\">nil</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"n\">posts</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">arguments</span><span class=\"o\">.</span><span class=\"n\">title</span>\n        <span class=\"n\">posts</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">tags</span> <span class=\"o\">=</span> <span class=\"n\">arguments</span><span class=\"o\">.</span><span class=\"n\">tags</span>\n        <span class=\"k\">return</span> <span class=\"n\">posts</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">]</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>The <code class=\"language-plaintext highlighter-rouge\">EditPostArguments</code> structure has the three properties that we mentioned before. Then, the <code class=\"language-plaintext highlighter-rouge\">editPost</code> function will accept those arguments as a parameter and will use the <code class=\"language-plaintext highlighter-rouge\">id</code> to search for the <code class=\"language-plaintext highlighter-rouge\">Post</code>. If we can’t find it, we will return <code class=\"language-plaintext highlighter-rouge\">nil</code> to the client. If we manage to find it, we will update the properties of the <code class=\"language-plaintext highlighter-rouge\">Post</code> with the values on the arguments and return the updated post to the client.</p>\n\n<p>Last but not least, let’s see how we can add the functionality to create a new post entity!</p>\n\n<h2 id=\"create-mutation\">Create mutation</h2>\n\n<p>To create a new <code class=\"language-plaintext highlighter-rouge\">Post</code> we would need a title, a set of tags, and the id of the author.</p>\n\n<p>It’s time to introduce a new GraphQL concept, the inputs. GraphQL distinguishes the types that can be used as input from those that can be used as outputs to queries. For example, in <a href=\"/2020/05/31/custom-graphql-types-on-swift-projects\">a previous post</a>, I have used the type <code class=\"language-plaintext highlighter-rouge\">Author</code> to return the author’s data. This is a typical example of an Output type. This kind of types, though, cannot be used when we want to pass arguments, be it in a query or a mutation. In order to define complex types for arguments, there is the concept of <code class=\"language-plaintext highlighter-rouge\">Input</code>. <code class=\"language-plaintext highlighter-rouge\">Input</code> is just like a type, with the only difference being the purpose of use and that it can only include scalar, enums, strings, int, float, bool, and other input types. We can not use an <code class=\"language-plaintext highlighter-rouge\">Output</code> type as a field on an <code class=\"language-plaintext highlighter-rouge\">Input</code> type.</p>\n\n<p>So, let’s create a <code class=\"language-plaintext highlighter-rouge\">PostInput</code> type and add the properties that we need to create a new <code class=\"language-plaintext highlighter-rouge\">Post</code>.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">struct</span> <span class=\"kt\">PostInput</span><span class=\"p\">:</span> <span class=\"kt\">Codable</span> <span class=\"p\">{</span>\n    <span class=\"k\">let</span> <span class=\"nv\">title</span><span class=\"p\">:</span> <span class=\"kt\">String</span>\n    <span class=\"k\">let</span> <span class=\"nv\">tags</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">Tag</span><span class=\"p\">]</span>\n    <span class=\"k\">let</span> <span class=\"nv\">authorId</span><span class=\"p\">:</span> <span class=\"kt\">CustomUUID</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Now, we can define the function to create a new <code class=\"language-plaintext highlighter-rouge\">Post</code> on an extension of the <code class=\"language-plaintext highlighter-rouge\">PostController</code>.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">extension</span> <span class=\"kt\">PostController</span> <span class=\"p\">{</span>\n    <span class=\"kd\">struct</span> <span class=\"kt\">CreatePostArguments</span><span class=\"p\">:</span> <span class=\"kt\">Codable</span> <span class=\"p\">{</span>\n        <span class=\"k\">let</span> <span class=\"nv\">input</span><span class=\"p\">:</span> <span class=\"kt\">PostInput</span>\n    <span class=\"p\">}</span>\n    <span class=\"kd\">func</span> <span class=\"nf\">createPost</span><span class=\"p\">(</span><span class=\"nv\">request</span><span class=\"p\">:</span> <span class=\"kt\">Request</span><span class=\"p\">,</span> <span class=\"nv\">arguments</span><span class=\"p\">:</span> <span class=\"kt\">CreatePostArguments</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Post</span><span class=\"p\">?</span> <span class=\"p\">{</span>\n        <span class=\"k\">guard</span> <span class=\"n\">author</span><span class=\"o\">.</span><span class=\"n\">id</span> <span class=\"o\">==</span> <span class=\"n\">arguments</span><span class=\"o\">.</span><span class=\"n\">input</span><span class=\"o\">.</span><span class=\"n\">authorId</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span> <span class=\"kc\">nil</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">let</span> <span class=\"nv\">post</span> <span class=\"o\">=</span> <span class=\"kt\">Post</span><span class=\"p\">(</span>\n            <span class=\"nv\">id</span><span class=\"p\">:</span> <span class=\"kt\">CustomUUID</span><span class=\"p\">(</span><span class=\"nv\">value</span><span class=\"p\">:</span> <span class=\"kt\">UUID</span><span class=\"p\">()),</span>\n            <span class=\"nv\">title</span><span class=\"p\">:</span> <span class=\"n\">arguments</span><span class=\"o\">.</span><span class=\"n\">input</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"p\">,</span>\n            <span class=\"nv\">publishedAt</span><span class=\"p\">:</span> <span class=\"kt\">Date</span><span class=\"p\">(),</span>\n            <span class=\"nv\">tags</span><span class=\"p\">:</span> <span class=\"n\">arguments</span><span class=\"o\">.</span><span class=\"n\">input</span><span class=\"o\">.</span><span class=\"n\">tags</span><span class=\"p\">,</span>\n            <span class=\"nv\">author</span><span class=\"p\">:</span> <span class=\"n\">author</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">posts</span><span class=\"o\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"n\">post</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">post</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>In the same way as for the other functions, we define a structure for the type of the arguments. This structure contains a sole field of the type <code class=\"language-plaintext highlighter-rouge\">PostInput</code> that we defined earlier. Then the function <code class=\"language-plaintext highlighter-rouge\">createPost</code> takes an instance of this <code class=\"language-plaintext highlighter-rouge\">CreatePostArguments</code> structure and uses it to create a new <code class=\"language-plaintext highlighter-rouge\">Post</code> entity, which we later append to the list of existing posts.</p>\n\n<p>And that’s about it for the logic part of our mutations. Now, it’s time to integrate them into the GraphQL server.</p>\n\n<h2 id=\"graphql\">GraphQL</h2>\n\n<p>To make those functions and arguments available on the GraphQL schema, we will have to update the <code class=\"language-plaintext highlighter-rouge\">FieldKeyProvider</code> extension of the <code class=\"language-plaintext highlighter-rouge\">PostController</code> and add the keys for them. We will use those keys to map the function and the arguments of <code class=\"language-plaintext highlighter-rouge\">PostController</code> to the mutations and the arguments of the GraphQL schema.</p>\n\n<div class=\"language-diff highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>    enum FieldKeys: String {\n<span class=\"gi\">+       case id\n+       case title\n+       case tags\n+       case input\n+\n</span>        case posts\n<span class=\"gi\">+       case deletePost\n+       case editPost\n+       case createPost\n</span>    }\n</code></pre></div></div>\n\n<p>We will also provide conformance to the <code class=\"language-plaintext highlighter-rouge\">FieldKeyProvider</code> protocol and define keys for the <code class=\"language-plaintext highlighter-rouge\">PostInput</code> structure.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">extension</span> <span class=\"kt\">PostInput</span><span class=\"p\">:</span> <span class=\"kt\">FieldKeyProvider</span> <span class=\"p\">{</span>\n    <span class=\"kd\">typealias</span> <span class=\"kt\">FieldKey</span> <span class=\"o\">=</span> <span class=\"kt\">FieldKeys</span>\n\n    <span class=\"kd\">enum</span> <span class=\"kt\">FieldKeys</span> <span class=\"p\">:</span> <span class=\"kt\">String</span> <span class=\"p\">{</span>\n        <span class=\"k\">case</span> <span class=\"n\">title</span>\n        <span class=\"k\">case</span> <span class=\"n\">tags</span>\n        <span class=\"k\">case</span> <span class=\"n\">authorId</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Lastly, we will update the GraphQL schema definition on <code class=\"language-plaintext highlighter-rouge\">Schema.swift</code> by adding the definition for the <code class=\"language-plaintext highlighter-rouge\">PostInput</code> input type and the definitions for the mutations using the keys we defined on the <code class=\"language-plaintext highlighter-rouge\">FieldKeyProvider</code> extensions.</p>\n\n<div class=\"language-diff highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>        Query([\n            Field(.posts, at: PostController.fetchPosts),\n        ]),\n<span class=\"gi\">+\n+       Input(PostInput.self, [\n+           InputField(.title, at: \\.title),\n+           InputField(.tags, at: \\.tags),\n+           InputField(.authorId, at: \\.authorId)\n+       ]),\n+\n+       Mutation([\n+           Field(.deletePost, at: PostController.deletePost)\n+               .argument(.id, at: \\.id),\n+\n+           Field(.editPost, at: PostController.editPost)\n+               .argument(.id, at: \\.id)\n+               .argument(.title, at: \\.title)\n+               .argument(.tags, at: \\.tags),\n+\n+           Field(.createPost, at: PostController.createPost)\n+               .argument(.input, at: \\.input)\n+       ])\n+   ])\n</span></code></pre></div></div>\n<p>And that’s all folks! We can now build and run the vapor server!</p>\n\n<h2 id=\"how-to-test\">How to test?</h2>\n\n<p>To verify what we have done so far, we are going to use a tool named <a href=\"https://github.com/prisma-labs/graphql-playground\">GraphQL Playground</a>.</p>\n\n<p>The installation process is quite simple, you just have to run <code class=\"language-plaintext highlighter-rouge\">brew cask install graphql-playground</code>. Then, you can use the  Spotlight Search (<code class=\"language-plaintext highlighter-rouge\">⌘</code> + <code class=\"language-plaintext highlighter-rouge\">Space bar</code>) and open the application <code class=\"language-plaintext highlighter-rouge\">GraphQL Playground</code>.</p>\n\n<p>Once GraphQL Playground is running, we could run the following query to fetch the available posts:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">query</span> <span class=\"nx\">AllPosts</span> <span class=\"p\">{</span>\n  <span class=\"nx\">posts</span> <span class=\"p\">{</span>\n    <span class=\"nx\">id</span>\n    <span class=\"nx\">author</span> <span class=\"p\">{</span>\n        <span class=\"nx\">id</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>From the response, we are going to keep the id of the author and we will use it to create a new post with the following query (replace <code class=\"language-plaintext highlighter-rouge\">00000000-0000-0000-0000-000000000000</code> with the UUID from the response):</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">mutation</span> <span class=\"nx\">CreatePost</span> <span class=\"p\">{</span>\n  <span class=\"nx\">createPost</span><span class=\"p\">(</span><span class=\"nx\">input</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nl\">authorId</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"na\">value</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">00000000-0000-0000-0000-000000000000</span><span class=\"dl\">\"</span>\n    <span class=\"p\">},</span>\n    <span class=\"nx\">tags</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nx\">Swift</span><span class=\"p\">,</span> <span class=\"nx\">Vapor</span><span class=\"p\">]</span>\n    <span class=\"nx\">title</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">A new post</span><span class=\"dl\">\"</span>\n  <span class=\"p\">})</span> <span class=\"p\">{</span>\n    <span class=\"nx\">id</span>\n    <span class=\"nx\">title</span>\n    <span class=\"nx\">publishedAt</span>\n    <span class=\"nx\">tags</span>\n    <span class=\"nx\">author</span> <span class=\"p\">{</span>\n      <span class=\"nx\">id</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>This time, keep the id of the post from the response, and use it on the next query to edit the title and the tags of the post:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">mutation</span> <span class=\"nx\">EditPost</span> <span class=\"p\">{</span>\n  <span class=\"nx\">editPost</span><span class=\"p\">(</span>\n    <span class=\"nx\">id</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"nl\">value</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">00000000-0000-0000-0000-000000000000</span><span class=\"dl\">\"</span>\n    <span class=\"p\">},</span>\n    <span class=\"nx\">tags</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nx\">Swift</span><span class=\"p\">,</span> <span class=\"nx\">Vapor</span><span class=\"p\">,</span> <span class=\"nx\">GraphQL</span><span class=\"p\">],</span> \n    <span class=\"nx\">title</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">A new post with an updated title</span><span class=\"dl\">\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">id</span>\n    <span class=\"nx\">title</span>\n    <span class=\"nx\">publishedAt</span>\n    <span class=\"nx\">tags</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Finally, we can delete the post that we have created using the id of the post from the previous query on the following query:</p>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">mutation</span> <span class=\"nx\">DeletePost</span> <span class=\"p\">{</span>\n  <span class=\"nx\">deletePost</span><span class=\"p\">(</span><span class=\"nx\">id</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nl\">value</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">00000000-0000-0000-0000-000000000000</span><span class=\"dl\">\"</span>\n  <span class=\"p\">})</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>And that’s about it! In this post, we have seen how to add mutations to create, edit and delete a <code class=\"language-plaintext highlighter-rouge\">Post</code> on a GraphQL server built with Vapor. We have also seen how to take advantage of GraphQL’s Inputs for arguments with complex types and how to use <a href=\"https://github.com/prisma-labs/graphql-playground\">GraphQL Playground</a> to run our GraphQL queries.</p>\n\n<p>In the next post, I am going to continue this GraphQL &amp; Swift journey and I am going to investigate how to use the mutations that we defined in this post from an iOS app. \nSo stay tuned and follow me on <a href=\"https://twitter.com/diamantidis_io\">Twitter</a> should you want to get notified once the next post is published or you have a question or comment about this post.</p>\n\n<p>Thanks for reading this post, and see you next time!</p>\n\n",
            "tags": ["Swift","Vapor","GraphQL"],
            "image": "https://diamantidis.github.io/%7B%22path%22=%3E%22/assets/social/mutations-on-a-graphql-server-built-with-vapor.png%22,%20%22width%22=%3E828,%20%22height%22=%3E512%7D"
        },
        
        {
            "id": "https://diamantidis.github.io/2020/05/31/custom-graphql-types-on-swift-projects",
            "url": "https://diamantidis.github.io/2020/05/31/custom-graphql-types-on-swift-projects",
            "title": "Custom GraphQL types on Swift projects",
            "date_published": "2020-05-31T04:00:00+00:00",
            
            "date_modified": "2020-05-31T04:00:00+00:00",
            
            "author": {
                "name": "Ioannis Diamantidis",
                "url": "https://diamantidis.github.io"
            },
            "summary": "<p>By default, <a href=\"https://graphql.org/\">GraphQL</a> supports only a handful of basic types that we can use on the schema definition. This list includes <code class=\"language-plaintext highlighter-rouge\">Int</code>, <code class=\"language-plaintext highlighter-rouge\">Float</code>, <code class=\"language-plaintext highlighter-rouge\">String</code>, <code class=\"language-plaintext highlighter-rouge\">Boolean</code> and <code class=\"language-plaintext highlighter-rouge\">ID</code>. But as you can easily understand relying solely on these types is quite restrictive. What if we want to add a date field? Or some other kind of data?</p>\n\n",
            "content_html": "<p>By default, <a href=\"https://graphql.org/\">GraphQL</a> supports only a handful of basic types that we can use on the schema definition. This list includes <code class=\"language-plaintext highlighter-rouge\">Int</code>, <code class=\"language-plaintext highlighter-rouge\">Float</code>, <code class=\"language-plaintext highlighter-rouge\">String</code>, <code class=\"language-plaintext highlighter-rouge\">Boolean</code> and <code class=\"language-plaintext highlighter-rouge\">ID</code>. But as you can easily understand relying solely on these types is quite restrictive. What if we want to add a date field? Or some other kind of data?</p>\n\n<p>Hopefully for us, GraphQL offers plenty of flexibility when it comes to constructing a model with custom types; be it a custom object type, a custom scalar type, enums or a list to name a few.</p>\n\n<p>And that’s what we are going to investigate in this post. We will see how we can use all these custom types on Swift projects.</p>\n\n<h2 id=\"before-we-start\">Before we start</h2>\n\n<p>In a <a href=\"/2020/05/24/swift-loves-graphql-server-with-vapor-and-ios-app-client\">previous post</a>, I described how to create a simple GraphQL server in Swift using <a href=\"https://github.com/vapor/vapor\">Vapor</a> and an iOS app to fetch information from this server using the <a href=\"https://www.apollographql.com/docs/ios/\">Apollo iOS</a> client. For that post, I used a simple <code class=\"language-plaintext highlighter-rouge\">Post</code> type with an <code class=\"language-plaintext highlighter-rouge\">id</code> and a <code class=\"language-plaintext highlighter-rouge\">title</code> property.</p>\n\n<p>This time, we are going one step further and we will enrich the <code class=\"language-plaintext highlighter-rouge\">Post</code> type by adding some more properties. We are going to introduce a custom scalar type that we will use for the id of the model, a Date field for the date that the post was published, a list of enums for the tags and a custom object for the author of the post.</p>\n\n<p>As a side note before we start, the code in this post is a continuation of the code from the <a href=\"/2020/05/24/swift-loves-graphql-server-with-vapor-and-ios-app-client\">previous post</a> that I mentioned earlier. If you want to go through the code as you read this post, you can find on Github a branch on the version of the project at the end of the previous post (<a href=\"https://github.com/diamantidis/vapor-graphql/tree/b3afc1f\">server</a> &amp; <a href=\"https://github.com/diamantidis/ios-graphql/tree/4bc583a\">client</a>) and a branch with the version of the code at the end of this post (<a href=\"https://github.com/diamantidis/vapor-graphql/tree/f414bb1\">server</a> &amp; <a href=\"https://github.com/diamantidis/ios-graphql/tree/c95ebe4\">client</a>). If you want to learn more about the setup and how to run those projects, either refer to my <a href=\"/2020/05/24/swift-loves-graphql-server-with-vapor-and-ios-app-client\">previous post</a> or to the README file of each project.</p>\n\n<p>Following the same pattern as in the previous post, let’s start with the updates on the server side and then we will update the iOS app.</p>\n\n<h2 id=\"server\">Server</h2>\n\n<p>To begin with, let’s introduce three new types. The first one will be a new structure named <code class=\"language-plaintext highlighter-rouge\">CustomUUID</code> that we will as a type for the <code class=\"language-plaintext highlighter-rouge\">id</code> property. The second one will be an <code class=\"language-plaintext highlighter-rouge\">enum</code> named <code class=\"language-plaintext highlighter-rouge\">Tag</code> that we are going to use for the type of the list of tags and lastly a structure name <code class=\"language-plaintext highlighter-rouge\">Author</code> to represent the author of the post.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// CustomUUID.swift</span>\n<span class=\"kd\">struct</span> <span class=\"kt\">CustomUUID</span><span class=\"p\">:</span> <span class=\"kt\">Codable</span> <span class=\"p\">{</span>\n    <span class=\"k\">let</span> <span class=\"nv\">value</span><span class=\"p\">:</span> <span class=\"kt\">UUID</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// Tag.swift</span>\n<span class=\"kd\">enum</span> <span class=\"kt\">Tag</span><span class=\"p\">:</span> <span class=\"kt\">String</span><span class=\"p\">,</span> <span class=\"kt\">Codable</span> <span class=\"p\">{</span>\n    <span class=\"k\">case</span> <span class=\"n\">swift</span> <span class=\"o\">=</span> <span class=\"s\">\"Swift\"</span>\n    <span class=\"k\">case</span> <span class=\"n\">vapor</span> <span class=\"o\">=</span> <span class=\"s\">\"Vapor\"</span>\n    <span class=\"k\">case</span> <span class=\"n\">graphql</span> <span class=\"o\">=</span> <span class=\"s\">\"GraphQL\"</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// Author.swift</span>\n<span class=\"kd\">struct</span> <span class=\"kt\">Author</span><span class=\"p\">:</span> <span class=\"kt\">Codable</span> <span class=\"p\">{</span>\n    <span class=\"k\">let</span> <span class=\"nv\">id</span><span class=\"p\">:</span> <span class=\"kt\">CustomUUID</span>\n    <span class=\"k\">let</span> <span class=\"nv\">name</span><span class=\"p\">:</span> <span class=\"kt\">String</span>\n    <span class=\"k\">let</span> <span class=\"nv\">twitter</span><span class=\"p\">:</span> <span class=\"kt\">String</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Once all those types are added, we can update our <code class=\"language-plaintext highlighter-rouge\">Post</code> model to look like the following snippet:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// Post.swift</span>\n<span class=\"kd\">struct</span> <span class=\"kt\">Post</span><span class=\"p\">:</span> <span class=\"kt\">Codable</span> <span class=\"p\">{</span>\n    <span class=\"k\">let</span> <span class=\"nv\">id</span><span class=\"p\">:</span> <span class=\"kt\">CustomUUID</span>\n    <span class=\"k\">let</span> <span class=\"nv\">title</span><span class=\"p\">:</span> <span class=\"kt\">String</span>\n    <span class=\"k\">let</span> <span class=\"nv\">publishedAt</span><span class=\"p\">:</span> <span class=\"kt\">Date</span>\n    <span class=\"k\">let</span> <span class=\"nv\">tags</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">Tag</span><span class=\"p\">]</span>\n    <span class=\"k\">let</span> <span class=\"nv\">author</span><span class=\"p\">:</span> <span class=\"kt\">Author</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>After that, we will update the <code class=\"language-plaintext highlighter-rouge\">FieldKeyProvider</code> extension for the <code class=\"language-plaintext highlighter-rouge\">Post</code> and add a new key for each new property. We will later use those keys on the schema definition to map the fields of the GraphQL schema to the properties of the <code class=\"language-plaintext highlighter-rouge\">Post</code> structure. The final version of the <code class=\"language-plaintext highlighter-rouge\">Post</code> extension will look like this:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// GraphQL+FieldKeyProvider.swift</span>\n<span class=\"kd\">extension</span> <span class=\"kt\">Post</span><span class=\"p\">:</span> <span class=\"kt\">FieldKeyProvider</span> <span class=\"p\">{</span>\n    <span class=\"kd\">typealias</span> <span class=\"kt\">FieldKey</span> <span class=\"o\">=</span> <span class=\"kt\">FieldKeys</span>\n\n    <span class=\"kd\">enum</span> <span class=\"kt\">FieldKeys</span><span class=\"p\">:</span> <span class=\"kt\">String</span> <span class=\"p\">{</span>\n        <span class=\"k\">case</span> <span class=\"n\">id</span>\n        <span class=\"k\">case</span> <span class=\"n\">title</span>\n        <span class=\"k\">case</span> <span class=\"n\">publishedAt</span>\n        <span class=\"k\">case</span> <span class=\"n\">tags</span>\n        <span class=\"k\">case</span> <span class=\"n\">author</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Since we have add a new structure, the <code class=\"language-plaintext highlighter-rouge\">Author</code>, we will also add an extension for this structure to add conformance to the <code class=\"language-plaintext highlighter-rouge\">FieldKeyProvider</code> protocol. The extension will be like in the following snippet:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// GraphQL+FieldKeyProvider.swift</span>\n<span class=\"kd\">extension</span> <span class=\"kt\">Author</span><span class=\"p\">:</span> <span class=\"kt\">FieldKeyProvider</span> <span class=\"p\">{</span>\n    <span class=\"kd\">typealias</span> <span class=\"kt\">FieldKey</span> <span class=\"o\">=</span> <span class=\"kt\">FieldKeys</span>\n\n    <span class=\"kd\">enum</span> <span class=\"kt\">FieldKeys</span><span class=\"p\">:</span> <span class=\"kt\">String</span> <span class=\"p\">{</span>\n        <span class=\"k\">case</span> <span class=\"n\">id</span>\n        <span class=\"k\">case</span> <span class=\"n\">name</span>\n        <span class=\"k\">case</span> <span class=\"n\">twitter</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Now, we can move on and update the definition of the GraphQL schema:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// Schema.swift</span>\n<span class=\"kd\">enum</span> <span class=\"kt\">Schemas</span> <span class=\"p\">{</span>\n    <span class=\"kd\">static</span> <span class=\"k\">var</span> <span class=\"nv\">postSchema</span> <span class=\"o\">=</span> <span class=\"kt\">Schema</span><span class=\"o\">&lt;</span><span class=\"kt\">PostController</span><span class=\"p\">,</span> <span class=\"kt\">Request</span><span class=\"o\">&gt;</span><span class=\"p\">([</span>\n        <span class=\"kt\">Enum</span><span class=\"p\">(</span><span class=\"kt\">Tag</span><span class=\"o\">.</span><span class=\"k\">self</span><span class=\"p\">,</span> <span class=\"p\">[</span>\n            <span class=\"kt\">Value</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">swift</span><span class=\"p\">)</span>\n                <span class=\"o\">.</span><span class=\"nf\">description</span><span class=\"p\">(</span><span class=\"s\">\"About Swift\"</span><span class=\"p\">),</span>\n            <span class=\"kt\">Value</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">vapor</span><span class=\"p\">)</span>\n                <span class=\"o\">.</span><span class=\"nf\">description</span><span class=\"p\">(</span><span class=\"s\">\"About Vapor\"</span><span class=\"p\">),</span>\n            <span class=\"kt\">Value</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">graphql</span><span class=\"p\">)</span>\n                <span class=\"o\">.</span><span class=\"nf\">description</span><span class=\"p\">(</span><span class=\"s\">\"About GraphQL\"</span><span class=\"p\">),</span>\n        <span class=\"p\">])</span>\n            <span class=\"o\">.</span><span class=\"nf\">description</span><span class=\"p\">(</span><span class=\"s\">\"Tags\"</span><span class=\"p\">),</span>\n\n        <span class=\"kt\">Scalar</span><span class=\"p\">(</span><span class=\"kt\">CustomUUID</span><span class=\"o\">.</span><span class=\"k\">self</span><span class=\"p\">)</span>\n            <span class=\"o\">.</span><span class=\"nf\">description</span><span class=\"p\">(</span><span class=\"s\">\"My custom UUID\"</span><span class=\"p\">),</span>\n\n        <span class=\"kt\">Scalar</span><span class=\"p\">(</span><span class=\"kt\">Date</span><span class=\"o\">.</span><span class=\"k\">self</span><span class=\"p\">)</span>\n            <span class=\"o\">.</span><span class=\"nf\">description</span><span class=\"p\">(</span><span class=\"s\">\"Date Type\"</span><span class=\"p\">),</span>\n\n        <span class=\"kt\">Type</span><span class=\"p\">(</span><span class=\"kt\">Author</span><span class=\"o\">.</span><span class=\"k\">self</span><span class=\"p\">,</span> <span class=\"nv\">fields</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"kt\">Field</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">,</span> <span class=\"nv\">at</span><span class=\"p\">:</span> <span class=\"p\">\\</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">),</span>\n            <span class=\"kt\">Field</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"nv\">at</span><span class=\"p\">:</span> <span class=\"p\">\\</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">),</span>\n            <span class=\"kt\">Field</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">twitter</span><span class=\"p\">,</span> <span class=\"nv\">at</span><span class=\"p\">:</span> <span class=\"p\">\\</span><span class=\"o\">.</span><span class=\"n\">twitter</span><span class=\"p\">)</span>\n        <span class=\"p\">]),</span>\n\n        <span class=\"kt\">Type</span><span class=\"p\">(</span><span class=\"kt\">Post</span><span class=\"o\">.</span><span class=\"k\">self</span><span class=\"p\">,</span> <span class=\"nv\">fields</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"kt\">Field</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">,</span> <span class=\"nv\">at</span><span class=\"p\">:</span> <span class=\"p\">\\</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">),</span>\n            <span class=\"kt\">Field</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"p\">,</span> <span class=\"nv\">at</span><span class=\"p\">:</span> <span class=\"p\">\\</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"p\">),</span>\n            <span class=\"kt\">Field</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">publishedAt</span><span class=\"p\">,</span> <span class=\"nv\">at</span><span class=\"p\">:</span> <span class=\"p\">\\</span><span class=\"o\">.</span><span class=\"n\">publishedAt</span><span class=\"p\">),</span>\n            <span class=\"kt\">Field</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">tags</span><span class=\"p\">,</span> <span class=\"nv\">at</span><span class=\"p\">:</span> <span class=\"p\">\\</span><span class=\"o\">.</span><span class=\"n\">tags</span><span class=\"p\">),</span>\n            <span class=\"kt\">Field</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">author</span><span class=\"p\">,</span> <span class=\"nv\">at</span><span class=\"p\">:</span> <span class=\"p\">\\</span><span class=\"o\">.</span><span class=\"n\">author</span><span class=\"p\">),</span>\n        <span class=\"p\">]),</span>\n\n        <span class=\"kt\">Query</span><span class=\"p\">([</span>\n            <span class=\"kt\">Field</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">posts</span><span class=\"p\">,</span> <span class=\"nv\">at</span><span class=\"p\">:</span> <span class=\"kt\">PostController</span><span class=\"o\">.</span><span class=\"n\">fetchPosts</span><span class=\"p\">),</span>\n        <span class=\"p\">]),</span>\n    <span class=\"p\">])</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>In this snippet, we have added the definition of the enum and all of its cases, the definition of the <code class=\"language-plaintext highlighter-rouge\">CustomUUID</code> and Swift’s <code class=\"language-plaintext highlighter-rouge\">Date</code>, a definition of the new <code class=\"language-plaintext highlighter-rouge\">Author</code> type and updated the definition of the <code class=\"language-plaintext highlighter-rouge\">Post</code> type to include the new fields.</p>\n\n<blockquote>\n  <p><strong>WARNING</strong>: The order of the definitions in the schema does matter. If we were to place the definition of the <code class=\"language-plaintext highlighter-rouge\">CustomUUID</code> after the definition of the <code class=\"language-plaintext highlighter-rouge\">Post</code>, we would get an exception saying <code class=\"language-plaintext highlighter-rouge\">Fatal error: 'try!' expression unexpectedly raised an error: Cannot use type \"CustomUUID\" for field \"id\". Type does not map to a GraphQL type.</code>.</p>\n</blockquote>\n\n<p>Lastly, we are going to update the data that the GraphQL server will return to the client and add values for the new fields:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// PostController.swift</span>\n<span class=\"kd\">private</span> <span class=\"kd\">lazy</span> <span class=\"k\">var</span> <span class=\"nv\">author</span> <span class=\"o\">=</span> <span class=\"kt\">Author</span><span class=\"p\">(</span>\n    <span class=\"nv\">id</span><span class=\"p\">:</span> <span class=\"kt\">CustomUUID</span><span class=\"p\">(</span><span class=\"nv\">value</span><span class=\"p\">:</span> <span class=\"kt\">UUID</span><span class=\"p\">()),</span>\n    <span class=\"nv\">name</span><span class=\"p\">:</span> <span class=\"s\">\"Ioannis Diamantidis\"</span><span class=\"p\">,</span>\n    <span class=\"nv\">twitter</span><span class=\"p\">:</span> <span class=\"s\">\"@diamantidis_io\"</span>\n<span class=\"p\">)</span>\n\n<span class=\"kd\">private</span> <span class=\"kd\">lazy</span> <span class=\"k\">var</span> <span class=\"nv\">posts</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"kt\">Post</span><span class=\"p\">(</span>\n        <span class=\"nv\">id</span><span class=\"p\">:</span> <span class=\"kt\">CustomUUID</span><span class=\"p\">(</span><span class=\"nv\">value</span><span class=\"p\">:</span> <span class=\"kt\">UUID</span><span class=\"p\">()),</span>\n        <span class=\"nv\">title</span><span class=\"p\">:</span> <span class=\"s\">\"My first post\"</span><span class=\"p\">,</span>\n        <span class=\"nv\">publishedAt</span><span class=\"p\">:</span> <span class=\"kt\">Date</span><span class=\"p\">(),</span>\n        <span class=\"nv\">tags</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"o\">.</span><span class=\"n\">swift</span><span class=\"p\">,</span> <span class=\"o\">.</span><span class=\"n\">graphql</span><span class=\"p\">,</span> <span class=\"o\">.</span><span class=\"n\">vapor</span><span class=\"p\">],</span>\n        <span class=\"nv\">author</span><span class=\"p\">:</span> <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">author</span>\n    <span class=\"p\">)</span>\n<span class=\"p\">]</span>\n</code></pre></div></div>\n\n<blockquote>\n  <p><strong>NOTE:</strong> I could have used <code class=\"language-plaintext highlighter-rouge\">UUID</code> directly instead of the <code class=\"language-plaintext highlighter-rouge\">CustomUUID</code>, but for the sake of demonstration, I preferred to use a custom container structure. If you want to use the <code class=\"language-plaintext highlighter-rouge\">UUID</code>, you can follow the same logic as with the <code class=\"language-plaintext highlighter-rouge\">Date</code> type.</p>\n</blockquote>\n\n<p>And this is it for the server side! You can now build and run the project!</p>\n\n<blockquote>\n  <p>The code with all those changes is also available on <a href=\"https://github.com/diamantidis/vapor-graphql/tree/f414bb1\">GitHub</a>.</p>\n</blockquote>\n\n<p>Let’s now jump on to the client side and the iOS app!</p>\n\n<h2 id=\"ios\">iOS</h2>\n\n<p>First and foremost, we will get the updated version of the GraphQL schema. With the server running, run the following command from the root directory of the iOS project to update the <code class=\"language-plaintext highlighter-rouge\">schema.json</code>.</p>\n\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>apollo schema:download <span class=\"nt\">--endpoint</span><span class=\"o\">=</span>http://127.0.0.1:8080/graphql iOSGraphQL/GraphQL/schema.json\n</code></pre></div></div>\n\n<p>Once this is done, let’s open Xcode and update the query file(<code class=\"language-plaintext highlighter-rouge\">AllPosts.graphql</code>) to add the new fields. We are going to add the <code class=\"language-plaintext highlighter-rouge\">tags</code> and the <code class=\"language-plaintext highlighter-rouge\">publishedAt</code> in the same way as we added the <code class=\"language-plaintext highlighter-rouge\">id</code> and <code class=\"language-plaintext highlighter-rouge\">title</code> fields, but for the <code class=\"language-plaintext highlighter-rouge\">author</code> field, we are going to use the concept of <a href=\"https://graphql.org/learn/queries/#fragments\">GraphQL’s fragments</a>. Fragments are reusable components that you can use to split the query definition in smaller chunks and use them in multiple queries.</p>\n\n<p>In our case, we will define a fragment on the <code class=\"language-plaintext highlighter-rouge\">Author</code> type and then use it on the <code class=\"language-plaintext highlighter-rouge\">AllPosts</code> query to fetch the author of the post.</p>\n\n<p>The final version of the query file will be like the following snippet:</p>\n\n<div class=\"language-graphql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">fragment</span><span class=\"w\"> </span><span class=\"n\">AuthorDetails</span><span class=\"w\"> </span><span class=\"k\">on</span><span class=\"w\"> </span><span class=\"n\">Author</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"n\">id</span><span class=\"w\">\n  </span><span class=\"n\">name</span><span class=\"w\">\n  </span><span class=\"n\">twitter</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n\n</span><span class=\"k\">query</span><span class=\"w\"> </span><span class=\"n\">AllPosts</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"n\">posts</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"n\">id</span><span class=\"w\">\n    </span><span class=\"n\">title</span><span class=\"w\">\n    </span><span class=\"n\">publishedAt</span><span class=\"w\">\n    </span><span class=\"n\">tags</span><span class=\"w\">\n    </span><span class=\"n\">author</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n      </span><span class=\"p\">...</span><span class=\"n\">AuthorDetails</span><span class=\"w\">\n    </span><span class=\"p\">}</span><span class=\"w\">\n  </span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<p>Now, let’s jump back to the Terminal and run the following command from the root directory to update <code class=\"language-plaintext highlighter-rouge\">API.swift</code>.</p>\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>./Pods/Apollo/scripts/run-bundled-codegen.sh codegen:generate <span class=\"se\">\\</span>\n    <span class=\"nt\">--target</span><span class=\"o\">=</span>swift <span class=\"se\">\\</span>\n    <span class=\"s1\">'--includes=./**/*.graphql'</span>  <span class=\"se\">\\</span>\n    <span class=\"nt\">--localSchemaFile</span><span class=\"o\">=</span>./path/to/GraphQL/schema.json <span class=\"se\">\\</span>\n    ./path/to/GraphQL/API.swift\n</code></pre></div></div>\n\n<p>If you build and run the app right now, you will get some errors like <code class=\"language-plaintext highlighter-rouge\">Type of expression is ambiguous without more context</code> and <code class=\"language-plaintext highlighter-rouge\">Use of unresolved identifier 'CustomUUID'</code>.</p>\n\n<p>To fix those errors, we will have to add definition for the new structures that we introduced on the GraphQL schema.</p>\n\n<p>Let’s start with the <code class=\"language-plaintext highlighter-rouge\">Author</code> which will have the following definition:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// Author.swift</span>\n<span class=\"kd\">struct</span> <span class=\"kt\">Author</span> <span class=\"p\">{</span>\n    <span class=\"k\">var</span> <span class=\"nv\">id</span><span class=\"p\">:</span> <span class=\"kt\">CustomUUID</span>\n    <span class=\"k\">var</span> <span class=\"nv\">name</span><span class=\"p\">:</span> <span class=\"kt\">String</span>\n    <span class=\"k\">var</span> <span class=\"nv\">twitter</span><span class=\"p\">:</span> <span class=\"kt\">String</span>\n\n    <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"nv\">author</span><span class=\"p\">:</span> <span class=\"kt\">AuthorDetails</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">id</span> <span class=\"o\">=</span> <span class=\"n\">author</span><span class=\"o\">.</span><span class=\"n\">id</span>\n        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">author</span><span class=\"o\">.</span><span class=\"n\">name</span>\n        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">twitter</span> <span class=\"o\">=</span> <span class=\"n\">author</span><span class=\"o\">.</span><span class=\"n\">twitter</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>In this snippet, we map the properties of the structure <code class=\"language-plaintext highlighter-rouge\">AuthorDetails</code> to the properties of our domain model. <code class=\"language-plaintext highlighter-rouge\">AuthorDetails</code> is the structure that the <a href=\"https://www.apollographql.com/docs/ios/\">Apollo iOS</a> client generated when we run the <code class=\"language-plaintext highlighter-rouge\">run-bundled-codegen.sh</code> command.</p>\n\n<p>Next, let’s add the definition for the <code class=\"language-plaintext highlighter-rouge\">CustomUUID</code>:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// CustomUUID.swift</span>\n<span class=\"kd\">public</span> <span class=\"kd\">struct</span> <span class=\"kt\">CustomUUID</span><span class=\"p\">:</span> <span class=\"kt\">JSONDecodable</span> <span class=\"p\">{</span>\n    <span class=\"k\">let</span> <span class=\"nv\">value</span><span class=\"p\">:</span> <span class=\"kt\">UUID</span>\n\n    <span class=\"kd\">public</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">jsonValue</span> <span class=\"nv\">value</span><span class=\"p\">:</span> <span class=\"kt\">JSONValue</span><span class=\"p\">)</span> <span class=\"k\">throws</span> <span class=\"p\">{</span>\n        <span class=\"k\">guard</span> <span class=\"k\">let</span> <span class=\"nv\">stringValue</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">value</span> <span class=\"k\">as</span> <span class=\"kt\">AnyObject</span><span class=\"p\">)[</span><span class=\"s\">\"value\"</span><span class=\"p\">]</span> <span class=\"k\">as?</span> <span class=\"kt\">String</span><span class=\"p\">,</span> <span class=\"k\">let</span> <span class=\"nv\">uuid</span> <span class=\"o\">=</span> <span class=\"kt\">UUID</span><span class=\"p\">(</span><span class=\"nv\">uuidString</span><span class=\"p\">:</span> <span class=\"n\">stringValue</span><span class=\"p\">)</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"k\">throw</span> <span class=\"kt\">JSONDecodingError</span><span class=\"o\">.</span><span class=\"nf\">couldNotConvert</span><span class=\"p\">(</span><span class=\"nv\">value</span><span class=\"p\">:</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nv\">to</span><span class=\"p\">:</span> <span class=\"kt\">CustomUUID</span><span class=\"o\">.</span><span class=\"k\">self</span><span class=\"p\">)</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">uuid</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Here, we make <code class=\"language-plaintext highlighter-rouge\">CustomUUID</code> conform to Apollo’s protocol <code class=\"language-plaintext highlighter-rouge\">JSONDecodable</code> and fulfill the <code class=\"language-plaintext highlighter-rouge\">init(jsonValue value: JSONValue)</code> requirement. \n<code class=\"language-plaintext highlighter-rouge\">JSONDecodable</code> is a protocol that we use to add the logic about decoding the values of custom scalar types.</p>\n\n<p>The same applies for the <code class=\"language-plaintext highlighter-rouge\">publishedAt</code> field and its <code class=\"language-plaintext highlighter-rouge\">Date</code> type, with the only difference being that this time we will add an extension to the Swift’s <code class=\"language-plaintext highlighter-rouge\">Date</code> structure instead of adding a new one.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">extension</span> <span class=\"kt\">Date</span><span class=\"p\">:</span> <span class=\"kt\">JSONDecodable</span> <span class=\"p\">{</span>\n    <span class=\"kd\">public</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">jsonValue</span> <span class=\"nv\">value</span><span class=\"p\">:</span> <span class=\"kt\">JSONValue</span><span class=\"p\">)</span> <span class=\"k\">throws</span> <span class=\"p\">{</span>\n        \n        <span class=\"k\">guard</span> <span class=\"k\">let</span> <span class=\"nv\">timeInterval</span> <span class=\"o\">=</span> <span class=\"k\">try</span><span class=\"p\">?</span> <span class=\"kt\">TimeInterval</span><span class=\"p\">(</span><span class=\"nv\">jsonValue</span><span class=\"p\">:</span> <span class=\"n\">value</span><span class=\"p\">)</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"k\">throw</span> <span class=\"kt\">JSONDecodingError</span><span class=\"o\">.</span><span class=\"nf\">couldNotConvert</span><span class=\"p\">(</span><span class=\"nv\">value</span><span class=\"p\">:</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nv\">to</span><span class=\"p\">:</span> <span class=\"kt\">Date</span><span class=\"o\">.</span><span class=\"k\">self</span><span class=\"p\">)</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">self</span> <span class=\"o\">=</span> <span class=\"kt\">Date</span><span class=\"p\">(</span><span class=\"nv\">timeIntervalSinceReferenceDate</span><span class=\"p\">:</span> <span class=\"n\">timeInterval</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n<p>Lastly, we will update the <code class=\"language-plaintext highlighter-rouge\">Post</code> structure, where we will add the new fields and update the initializer to instantiate them.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// Post.swift</span>\n<span class=\"kd\">struct</span> <span class=\"kt\">Post</span> <span class=\"p\">{</span>\n    <span class=\"k\">let</span> <span class=\"nv\">id</span><span class=\"p\">:</span> <span class=\"kt\">CustomUUID</span>\n    <span class=\"k\">let</span> <span class=\"nv\">title</span><span class=\"p\">:</span> <span class=\"kt\">String</span>\n    <span class=\"k\">let</span> <span class=\"nv\">publishedAt</span><span class=\"p\">:</span> <span class=\"kt\">Date</span>\n    <span class=\"k\">let</span> <span class=\"nv\">tags</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">Tag</span><span class=\"p\">]</span>\n    <span class=\"k\">var</span> <span class=\"nv\">author</span><span class=\"p\">:</span> <span class=\"kt\">Author</span>\n\n    <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"nv\">post</span><span class=\"p\">:</span> <span class=\"kt\">AllPostsQuery</span><span class=\"o\">.</span><span class=\"kt\">Data</span><span class=\"o\">.</span><span class=\"kt\">Post</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">id</span> <span class=\"o\">=</span> <span class=\"n\">post</span><span class=\"o\">.</span><span class=\"n\">id</span>\n        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">post</span><span class=\"o\">.</span><span class=\"n\">title</span>\n        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">publishedAt</span> <span class=\"o\">=</span> <span class=\"n\">post</span><span class=\"o\">.</span><span class=\"n\">publishedAt</span>\n        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">tags</span> <span class=\"o\">=</span> <span class=\"n\">post</span><span class=\"o\">.</span><span class=\"n\">tags</span>\n        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">author</span> <span class=\"o\">=</span> <span class=\"kt\">Author</span><span class=\"p\">(</span><span class=\"nv\">author</span><span class=\"p\">:</span> <span class=\"n\">post</span><span class=\"o\">.</span><span class=\"n\">author</span><span class=\"o\">.</span><span class=\"n\">fragments</span><span class=\"o\">.</span><span class=\"n\">authorDetails</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Now we are ready to build and run the app. If you do so, you should be able to see the post object with all its properties on the console! :tada:</p>\n\n<blockquote>\n  <p>The code with all those changes is also available on <a href=\"https://github.com/diamantidis/ios-graphql/tree/c95ebe4\">GitHub</a>.</p>\n</blockquote>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>And that’s about it! In this post, we have seen how to use GraphQL’s features like custom scalar types, enums, lists and custom objects to enhance the <code class=\"language-plaintext highlighter-rouge\">Post</code> model with fields like the <code class=\"language-plaintext highlighter-rouge\">uuid</code>, the <code class=\"language-plaintext highlighter-rouge\">publishedAt</code>, the <code class=\"language-plaintext highlighter-rouge\">tags</code> and the <code class=\"language-plaintext highlighter-rouge\">author</code>.</p>\n\n<p>Knowing about those possibilities is really valuable when working with GraphQL and can make a huge difference when it comes to designing a GraphQL schema.</p>\n\n<p>In the posts to come, we are going to see how further improve this project by adding support for sorting, filtering, creating a new post, editing an existing, deleting, etc. So stay tuned and follow me on <a href=\"https://twitter.com/diamantidis_io\">Twitter</a> should you want to get notified once these posts are published or you have a question or comment about this post.</p>\n\n<p>Thanks for reading this post, and see you next time!</p>\n\n",
            "tags": ["Swift","Vapor","GraphQL","Apollo","iOS"],
            "image": "https://diamantidis.github.io/%7B%22path%22=%3E%22/assets/social/graphql-types-swift.jpg%22,%20%22width%22=%3E769,%20%22height%22=%3E512%7D"
        },
        
        {
            "id": "https://diamantidis.github.io/2020/05/24/swift-loves-graphql-server-with-vapor-and-ios-app-client",
            "url": "https://diamantidis.github.io/2020/05/24/swift-loves-graphql-server-with-vapor-and-ios-app-client",
            "title": "Swift ❤️ GraphQL: How to create a GraphQL server with Vapor and an iOS app as a client",
            "date_published": "2020-05-24T04:00:00+00:00",
            
            "date_modified": "2020-05-24T04:00:00+00:00",
            
            "author": {
                "name": "Ioannis Diamantidis",
                "url": "https://diamantidis.github.io"
            },
            "summary": "<p>Nowadays, it’s quite common for many iOS apps to rely on the communication with a server to deliver their services to the user. And while in most cases this communication is via a REST API, there are other API paradigms as well. One such example is <a href=\"https://graphql.org/\">GraphQL</a>, and this is going to be the topic of this post.</p>\n\n",
            "content_html": "<p>Nowadays, it’s quite common for many iOS apps to rely on the communication with a server to deliver their services to the user. And while in most cases this communication is via a REST API, there are other API paradigms as well. One such example is <a href=\"https://graphql.org/\">GraphQL</a>, and this is going to be the topic of this post.</p>\n\n<p>In this post, I am going to show you how to create an end-to-end GraphQL use case with Swift. First I will create a GraphQL server using <a href=\"https://github.com/vapor/vapor\">Vapor</a> and then I will build an iOS app that will make a query to fetch information from this server.</p>\n\n<p>Let’s see how!!</p>\n\n<h2 id=\"vapor\">Vapor</h2>\n\n<p>We will start by creating a new Vapor project! For this example, we are going to use the version 4 of Vapor and you can follow the detailed instruction on <a href=\"https://docs.vapor.codes/4.0/install/macos/\">Vapor’s documentation site</a>.</p>\n\n<p>Briefly,</p>\n<ul>\n  <li>Use <code class=\"language-plaintext highlighter-rouge\">Homebrew</code> and run <code class=\"language-plaintext highlighter-rouge\">brew install vapor/tap/vapor-beta</code> to install the <a href=\"https://github.com/vapor/toolbox\">Vapor Toolbox</a>.</li>\n  <li>Run <code class=\"language-plaintext highlighter-rouge\">vapor-beta new &lt;Your Project&gt; -n</code> to create a new project.</li>\n  <li>Once completed, move to the project directory with <code class=\"language-plaintext highlighter-rouge\">cd &lt;Your Project&gt;</code>.</li>\n  <li>Run the command <code class=\"language-plaintext highlighter-rouge\">vapor-beta xcode</code> to open Xcode.</li>\n  <li>Build and try to run the app.</li>\n  <li>Visit <a href=\"localhost:8080\"><code class=\"language-plaintext highlighter-rouge\">localhost:8080</code></a> on your browser and you should be able to see the message <code class=\"language-plaintext highlighter-rouge\">It works!</code>! :tada:</li>\n</ul>\n\n<p>Now that we have our basic server running, let’s move on and add the GraphQL server.</p>\n\n<h2 id=\"graphql-server\">GraphQL server</h2>\n\n<p>First, we are going to add the dependencies. More specifically, we are going to use <a href=\"https://github.com/alexsteinerde/graphql-kit\">GraphQLKit</a> which makes it easy to setup a GraphQL server with Vapor.</p>\n\n<p>Let’s open the file <code class=\"language-plaintext highlighter-rouge\">Package.swift</code> and append the list of dependencies with the following line:</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"o\">.</span><span class=\"nf\">package</span><span class=\"p\">(</span><span class=\"nv\">name</span><span class=\"p\">:</span> <span class=\"s\">\"GraphQLKit\"</span><span class=\"p\">,</span> <span class=\"nv\">url</span><span class=\"p\">:</span> <span class=\"s\">\"https://github.com/alexsteinerde/graphql-kit.git\"</span><span class=\"p\">,</span> <span class=\"nv\">from</span><span class=\"p\">:</span> <span class=\"s\">\"2.0.0-beta.1\"</span><span class=\"p\">),</span>\n</code></pre></div></div>\n\n<p>After that, append the list of dependencies for the app target with <code class=\"language-plaintext highlighter-rouge\">\"GraphQLKit\"</code>.</p>\n\n<p>Once we are done with the dependencies, it’s time to add our Model class. For this example, I am going to use a simple model of a Post, so let’s add the following snippet.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">struct</span> <span class=\"kt\">Post</span><span class=\"p\">:</span> <span class=\"kt\">Codable</span> <span class=\"p\">{</span>\n    <span class=\"k\">var</span> <span class=\"nv\">id</span><span class=\"p\">:</span> <span class=\"kt\">Int</span>\n    <span class=\"k\">var</span> <span class=\"nv\">title</span><span class=\"p\">:</span> <span class=\"kt\">String</span>\n\n    <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"nv\">id</span><span class=\"p\">:</span> <span class=\"kt\">Int</span><span class=\"p\">,</span> <span class=\"nv\">title</span><span class=\"p\">:</span> <span class=\"kt\">String</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">id</span> <span class=\"o\">=</span> <span class=\"n\">id</span>\n        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">title</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Then, we are going to create our Controller.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">import</span> <span class=\"kt\">Vapor</span>\n<span class=\"kd\">import</span> <span class=\"kt\">GraphQLKit</span>\n\n<span class=\"kd\">final</span> <span class=\"kd\">class</span> <span class=\"kt\">PostController</span> <span class=\"p\">{</span>\n    <span class=\"kd\">func</span> <span class=\"nf\">fetchPosts</span><span class=\"p\">(</span><span class=\"nv\">request</span><span class=\"p\">:</span> <span class=\"kt\">Request</span><span class=\"p\">,</span> <span class=\"nv\">_</span><span class=\"p\">:</span> <span class=\"kt\">NoArguments</span><span class=\"p\">)</span> <span class=\"k\">throws</span> <span class=\"o\">-&gt;</span> <span class=\"p\">[</span><span class=\"kt\">Post</span><span class=\"p\">]</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">posts</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">posts</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"kt\">Post</span><span class=\"p\">(</span><span class=\"nv\">id</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nv\">title</span><span class=\"p\">:</span> <span class=\"s\">\"My first post\"</span><span class=\"p\">)</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>In this snippet, we define a function that will return all the posts. For this example, and to keep things simple, we are going to use the private property <code class=\"language-plaintext highlighter-rouge\">posts</code> as our in-memory storage.</p>\n\n<p>After that, we will implement two extensions to make both <code class=\"language-plaintext highlighter-rouge\">Post</code> and <code class=\"language-plaintext highlighter-rouge\">PostController</code> conform to the protocol <code class=\"language-plaintext highlighter-rouge\">FieldKeyProvider</code>.</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">Graphiti</code> uses the protocol <code class=\"language-plaintext highlighter-rouge\">FieldKeyProvider</code> to define the keys that we will use to map the properties of our Model and the function of our Controller to the types and queries of the GraphQL schema.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">import</span> <span class=\"kt\">GraphQLKit</span>\n\n<span class=\"kd\">extension</span> <span class=\"kt\">Post</span><span class=\"p\">:</span> <span class=\"kt\">FieldKeyProvider</span> <span class=\"p\">{</span>\n    <span class=\"kd\">typealias</span> <span class=\"kt\">FieldKey</span> <span class=\"o\">=</span> <span class=\"kt\">FieldKeys</span>\n\n    <span class=\"kd\">enum</span> <span class=\"kt\">FieldKeys</span><span class=\"p\">:</span> <span class=\"kt\">String</span> <span class=\"p\">{</span>\n        <span class=\"k\">case</span> <span class=\"n\">id</span>\n        <span class=\"k\">case</span> <span class=\"n\">title</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">extension</span> <span class=\"kt\">PostController</span><span class=\"p\">:</span> <span class=\"kt\">FieldKeyProvider</span> <span class=\"p\">{</span>\n    <span class=\"kd\">typealias</span> <span class=\"kt\">FieldKey</span> <span class=\"o\">=</span> <span class=\"kt\">FieldKeys</span>\n\n    <span class=\"kd\">enum</span> <span class=\"kt\">FieldKeys</span><span class=\"p\">:</span> <span class=\"kt\">String</span> <span class=\"p\">{</span>\n        <span class=\"k\">case</span> <span class=\"n\">fetchPosts</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>With that in place, we can create our schema by mapping the keys of the <code class=\"language-plaintext highlighter-rouge\">FieldKeyProvider</code> extensions to the properties of our Model and the function of our Controller.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">import</span> <span class=\"kt\">GraphQLKit</span>\n\n<span class=\"kd\">enum</span> <span class=\"kt\">Schemas</span> <span class=\"p\">{</span>\n    <span class=\"kd\">static</span> <span class=\"k\">var</span> <span class=\"nv\">postSchema</span> <span class=\"o\">=</span> <span class=\"kt\">Schema</span><span class=\"o\">&lt;</span><span class=\"kt\">PostController</span><span class=\"p\">,</span> <span class=\"kt\">Request</span><span class=\"o\">&gt;</span><span class=\"p\">([</span>\n        <span class=\"kt\">Type</span><span class=\"p\">(</span><span class=\"kt\">Post</span><span class=\"o\">.</span><span class=\"k\">self</span><span class=\"p\">,</span> <span class=\"nv\">fields</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"kt\">Field</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"p\">,</span> <span class=\"nv\">at</span><span class=\"p\">:</span> <span class=\"p\">\\</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"p\">),</span>\n            <span class=\"kt\">Field</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">,</span> <span class=\"nv\">at</span><span class=\"p\">:</span> <span class=\"p\">\\</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">),</span>\n        <span class=\"p\">]),</span>\n        <span class=\"kt\">Query</span><span class=\"p\">([</span>\n            <span class=\"kt\">Field</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">fetchPosts</span><span class=\"p\">,</span> <span class=\"nv\">at</span><span class=\"p\">:</span> <span class=\"kt\">PostController</span><span class=\"o\">.</span><span class=\"n\">fetchPosts</span><span class=\"p\">),</span>\n        <span class=\"p\">]),</span>\n    <span class=\"p\">])</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Finally, we can open the <code class=\"language-plaintext highlighter-rouge\">routes.swift</code>, add the line <code class=\"language-plaintext highlighter-rouge\">import GraphQLKit</code> and register our GraphQL schema by adding the following line:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"nf\">register</span><span class=\"p\">(</span><span class=\"nv\">graphQLSchema</span><span class=\"p\">:</span> <span class=\"kt\">Schemas</span><span class=\"o\">.</span><span class=\"n\">postSchema</span><span class=\"p\">,</span> <span class=\"nv\">withResolver</span><span class=\"p\">:</span> <span class=\"kt\">PostController</span><span class=\"p\">())</span>\n</code></pre></div></div>\n\n<p>You can now build and run the app! :tada:</p>\n\n<blockquote>\n  <p>The code for this server is available on <a href=\"https://github.com/diamantidis/vapor-graphql/tree/b3afc1f\">GitHub</a>.</p>\n</blockquote>\n\n<h2 id=\"apollo-cli\">Apollo CLI</h2>\n\n<p>To verify the schema we are going to use a tool called <a href=\"https://www.apollographql.com/docs/devtools/cli/\">Apollo CLI</a>. To install it globally, run the following command: <code class=\"language-plaintext highlighter-rouge\">npm install -g apollo</code>.</p>\n\n<p>Once installed, you can use the following command to download the schema.</p>\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>apollo schema:download <span class=\"nt\">--endpoint</span><span class=\"o\">=</span>http://127.0.0.1:8080/graphql schema.json\n</code></pre></div></div>\n\n<p>This command will generate the <code class=\"language-plaintext highlighter-rouge\">schema.json</code> file which will contain the GraphQL schema. It is going to be a really big file, but if you open it and search for the term <code class=\"language-plaintext highlighter-rouge\">fetchPost</code> you will be able to find the definition for our query.</p>\n\n<p>This file will also be used going forward to the iOS implementation. Let’s see how!</p>\n\n<h2 id=\"ios-app\">iOS app</h2>\n\n<p>For the iOS part, we are going to create a simple app that will make a query to the Vapor GraphQL server and fetch the posts.</p>\n\n<p>To do so, we are going to use the <a href=\"https://www.apollographql.com/docs/ios/\">Apollo iOS</a> client. Let’s install it via CocoaPods.</p>\n\n<p>First, add <code class=\"language-plaintext highlighter-rouge\">pod \"Apollo\"</code> on your <code class=\"language-plaintext highlighter-rouge\">Podfile</code> and run <code class=\"language-plaintext highlighter-rouge\">bundle exec pod install</code>.</p>\n\n<p>Next, let’s open the <code class=\"language-plaintext highlighter-rouge\">.xcworkspace</code> file and inside our app Group, let’s create a new Group with the name <code class=\"language-plaintext highlighter-rouge\">GraphQL</code>. This group is where we will place all the GraphQL related logic. Navigate to this directory using your Terminal and run the following command to download the schema.</p>\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>apollo schema:download <span class=\"nt\">--endpoint</span><span class=\"o\">=</span>http://127.0.0.1:8080/graphql schema.json\n</code></pre></div></div>\n\n<p>Then, back to Xcode, use <code class=\"language-plaintext highlighter-rouge\">⌃</code>(Control) click on the <code class=\"language-plaintext highlighter-rouge\">GraphQL</code> group, choose the option “Add files to …”. and add the <code class=\"language-plaintext highlighter-rouge\">schema.json</code> file.</p>\n\n<p>On this directory, create a new file named <code class=\"language-plaintext highlighter-rouge\">AllPosts.graphql</code> and as a content add the query to fetch all the posts:</p>\n\n<div class=\"language-graphql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">query</span><span class=\"w\"> </span><span class=\"n\">AllPosts</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"n\">fetchPosts</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"n\">id</span><span class=\"w\">\n    </span><span class=\"n\">title</span><span class=\"w\">\n  </span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<p>Then, go back to the terminal and from the root directory of your project, run the command (replacing the <code class=\"language-plaintext highlighter-rouge\">path/to</code> with the right path for your project):</p>\n\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>./Pods/Apollo/scripts/run-bundled-codegen.sh codegen:generate <span class=\"se\">\\</span>\n    <span class=\"nt\">--target</span><span class=\"o\">=</span>swift <span class=\"se\">\\</span>\n    <span class=\"s1\">'--includes=./**/*.graphql'</span>  <span class=\"se\">\\</span>\n    <span class=\"nt\">--localSchemaFile</span><span class=\"o\">=</span>./path/to/GraphQL/schema.json <span class=\"se\">\\</span>\n    ./path/to/GraphQL/API.swift\n</code></pre></div></div>\n\n<p>This will generate the file <code class=\"language-plaintext highlighter-rouge\">API.swift</code>, which will contain a class for the query we defined earlier.\nHead back to Xcode and also add this file to the <code class=\"language-plaintext highlighter-rouge\">GraphQL</code> folder.</p>\n\n<p>Now, let’s create the client that will execute the query. Still inside the <code class=\"language-plaintext highlighter-rouge\">GraphQL</code> folder, create a new file and add the following content:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">import</span> <span class=\"kt\">Foundation</span>\n<span class=\"kd\">import</span> <span class=\"kt\">Apollo</span>\n\n<span class=\"kd\">enum</span> <span class=\"kt\">GraphQLClient</span> <span class=\"p\">{</span>\n    <span class=\"kd\">static</span> <span class=\"k\">var</span> <span class=\"nv\">apollo</span> <span class=\"o\">=</span> <span class=\"kt\">ApolloClient</span><span class=\"p\">(</span><span class=\"nv\">url</span><span class=\"p\">:</span> <span class=\"kt\">URL</span><span class=\"p\">(</span><span class=\"nv\">string</span><span class=\"p\">:</span> <span class=\"s\">\"http://127.0.0.1:8080/graphql\"</span><span class=\"p\">)</span><span class=\"o\">!</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>If we were to execute the query now, we would be able to fetch the posts from the server but they would be of a type defined by the <code class=\"language-plaintext highlighter-rouge\">codegen.sh</code> command that we ran previously. It would be nice if we could use the same model as in our backend. Let’s copy the <code class=\"language-plaintext highlighter-rouge\">Post</code> struct from the backend project and replace the <code class=\"language-plaintext highlighter-rouge\">init</code> so that it accepts a parameter of the type defined by <code class=\"language-plaintext highlighter-rouge\">Apollo</code>:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">struct</span> <span class=\"kt\">Post</span><span class=\"p\">:</span> <span class=\"kt\">Codable</span> <span class=\"p\">{</span>\n    <span class=\"k\">var</span> <span class=\"nv\">id</span><span class=\"p\">:</span> <span class=\"kt\">Int</span>\n    <span class=\"k\">var</span> <span class=\"nv\">title</span><span class=\"p\">:</span> <span class=\"kt\">String</span>\n\n    <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"nv\">post</span><span class=\"p\">:</span> <span class=\"kt\">AllPostsQuery</span><span class=\"o\">.</span><span class=\"kt\">Data</span><span class=\"o\">.</span><span class=\"kt\">Post</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">id</span> <span class=\"o\">=</span> <span class=\"n\">post</span><span class=\"o\">.</span><span class=\"n\">id</span>\n        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">post</span><span class=\"o\">.</span><span class=\"n\">title</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Now we are ready perform the query in the following fashion:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">query</span> <span class=\"o\">=</span> <span class=\"kt\">AllPostsQuery</span><span class=\"p\">()</span>\n<span class=\"kt\">GraphQLClient</span><span class=\"o\">.</span><span class=\"n\">apollo</span><span class=\"o\">.</span><span class=\"nf\">fetch</span><span class=\"p\">(</span><span class=\"nv\">query</span><span class=\"p\">:</span> <span class=\"n\">query</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">result</span> <span class=\"k\">in</span>\n    <span class=\"k\">guard</span> <span class=\"k\">let</span> <span class=\"nv\">data</span> <span class=\"o\">=</span> <span class=\"k\">try</span><span class=\"p\">?</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"nf\">get</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">data</span> <span class=\"k\">else</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"p\">}</span>\n    <span class=\"k\">let</span> <span class=\"nv\">posts</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">posts</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">{</span> <span class=\"kt\">Post</span><span class=\"p\">(</span><span class=\"nv\">post</span><span class=\"p\">:</span> <span class=\"nv\">$0</span><span class=\"p\">)}</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">posts</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>If you now run the app and open the console, you will be able to see something like</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">[</span><span class=\"o\">&lt;</span><span class=\"kt\">ProjectName</span><span class=\"o\">&gt;.</span><span class=\"kt\">Post</span><span class=\"p\">(</span><span class=\"nv\">id</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nv\">title</span><span class=\"p\">:</span> <span class=\"s\">\"My first post\"</span><span class=\"p\">)]</span>\n</code></pre></div></div>\n<p>And that’s about it!!</p>\n\n<blockquote>\n  <p>The code for this app is available on <a href=\"https://github.com/diamantidis/ios-graphql/tree/4bc583a\">GitHub</a>.</p>\n</blockquote>\n\n<h1 id=\"conclusion\">Conclusion</h1>\n\n<p>In this post we have seen how to implement a GraphQL server using Vapor and an iOS app using the Apollo client to fetch the posts from the server. \nFor this post I have used a quite simple example, for the sake of demonstrating how we can achieve the communication between the client and the server.</p>\n\n<p>In the post to come, we are going to explore how to add support for sorting, filtering, creating a new post, editing an existing, deleting, etc.</p>\n\n<p>So stay tuned and follow me on <a href=\"https://twitter.com/diamantidis_io\">Twitter</a> should you want to get notified once these posts are published or you have a question or comment about this post.</p>\n\n<p>Thanks for reading this post, and see you next time!</p>\n\n",
            "tags": ["Swift","Vapor","GraphQL","Apollo","iOS"],
            "image": "https://diamantidis.github.io/assets/socialIcon.png"
        },
        
        {
            "id": "https://diamantidis.github.io/2020/05/17/ci-with-github-actions-for-scala-project",
            "url": "https://diamantidis.github.io/2020/05/17/ci-with-github-actions-for-scala-project",
            "title": "Continuous Integration with GitHub Actions for a Scala project",
            "date_published": "2020-05-17T04:00:00+00:00",
            
            "date_modified": "2020-05-17T04:00:00+00:00",
            
            "author": {
                "name": "Ioannis Diamantidis",
                "url": "https://diamantidis.github.io"
            },
            "summary": "<p>In this post, I am going to walk you through the process of setting up a CI(Continuous Integration) workflow with <a href=\"https://github.com/features/actions\">GitHub Actions</a> on a Scala project.</p>\n\n",
            "content_html": "<p>In this post, I am going to walk you through the process of setting up a CI(Continuous Integration) workflow with <a href=\"https://github.com/features/actions\">GitHub Actions</a> on a Scala project.</p>\n\n<p>More specifically, first, we will see how to prepare our project and enable the tasks that we want to include in our CI pipeline. Such tasks could be, for example, unit tests, code coverage and code formatting. Once all the preparation is done, we are going to set up a <code class=\"language-plaintext highlighter-rouge\">GitHub Actions</code> workflow to run those tasks on an open PR(Pull Request) or when we push code to specific branches.</p>\n\n<p>Let’s get started!</p>\n\n<h2 id=\"preparation\">Preparation</h2>\n\n<h3 id=\"unit-tests\">Unit tests</h3>\n\n<p>Let’s start by adding the unit tests. At first, we will create a new file in the directory <code class=\"language-plaintext highlighter-rouge\">src/test/scala/MainTest.scala</code> where we are going to add the unit tests. For this post, I will add a dummy test like the one in the snippet below:</p>\n<div class=\"language-scala highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">import</span> <span class=\"nn\">org.scalatest.funsuite.AnyFunSuite</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MainTest</span> <span class=\"k\">extends</span> <span class=\"nc\">AnyFunSuite</span> <span class=\"o\">{</span>\n  <span class=\"nf\">test</span><span class=\"o\">(</span><span class=\"s\">\"Example test\"</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"nf\">assert</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n<p>Once done, head over to the <code class=\"language-plaintext highlighter-rouge\">build.sbt</code> and add the following line <code class=\"language-plaintext highlighter-rouge\">libraryDependencies += \"org.scalatest\" %% \"scalatest\" % \"3.1.0\" % Test</code> to add the test dependency.</p>\n\n<p>Now, we are ready to use the command <code class=\"language-plaintext highlighter-rouge\">sbt clean test</code> to run our tests.</p>\n\n<h3 id=\"code-coverage\">Code Coverage</h3>\n<p>A term closely related to unit tests is code coverage. Code coverage is a metric that gives you an overview of how much of the program is covered with tests.</p>\n\n<p>Let’s see how we can see the coverage for our project.</p>\n\n<p>In the <code class=\"language-plaintext highlighter-rouge\">project</code> directory, open the file <code class=\"language-plaintext highlighter-rouge\">plugins.sbt</code> or if it doesn’t exist, create a new one and then open it.\nIn this file, add the line <code class=\"language-plaintext highlighter-rouge\">addSbtPlugin(\"org.scoverage\" % \"sbt-scoverage\" % \"1.6.1\")</code>, to add the coverage plugin.\nAfter that, open the file <code class=\"language-plaintext highlighter-rouge\">project/build.properties</code> and make sure that the <code class=\"language-plaintext highlighter-rouge\">SBT</code> version is defined like so: <code class=\"language-plaintext highlighter-rouge\">sbt.version=1.3.9</code>.</p>\n\n<p>Once all these are done, you are ready to execute the command <code class=\"language-plaintext highlighter-rouge\">sbt clean coverage test</code> to run the tests with coverage. This command will create the directory <code class=\"language-plaintext highlighter-rouge\">target/scala-2.13/scoverage-data</code> where you can find the results of the coverage.</p>\n\n<p>If you prefer a more human-readable form of the results, run the command <code class=\"language-plaintext highlighter-rouge\">sbt coverageReport</code> to generate coverage reports. This command will output the coverage and also generate <code class=\"language-plaintext highlighter-rouge\">Cobertura</code>, <code class=\"language-plaintext highlighter-rouge\">XML</code> and <code class=\"language-plaintext highlighter-rouge\">HTML</code> reports on the directory <code class=\"language-plaintext highlighter-rouge\">target/scala-2.13/</code>.</p>\n\n<blockquote>\n  <p><strong>Hint</strong>: You could also run tests and generate the coverage report with a single command: <code class=\"language-plaintext highlighter-rouge\">sbt clean coverage test coverageReport</code>.</p>\n</blockquote>\n\n<h2 id=\"code-formatting\">Code Formatting</h2>\n\n<p>Next one in the list is code formatting. Sometimes it is hard to keep a consistent codebase on a project where a lot of people are working. And for this reason, there are some tools to help us define some set of rules and conventions that we want our code to adhere to.</p>\n\n<p><a href=\"https://scalameta.org/scalafmt/\">scalafmt</a> is one such tool for Scala(if not the most popular). <code class=\"language-plaintext highlighter-rouge\">scalafmt</code> provides a way to define the code style in a configuration file and formats the code according to that.</p>\n\n<p>Let’s see how we can add <code class=\"language-plaintext highlighter-rouge\">scalafmt</code> to our project.</p>\n\n<p>Same as before, open the file <code class=\"language-plaintext highlighter-rouge\">project/plugins.sbt</code> and add the following line <code class=\"language-plaintext highlighter-rouge\">addSbtPlugin(\"org.scalameta\" % \"sbt-scalafmt\"  % \"2.3.0\")</code> to enable <code class=\"language-plaintext highlighter-rouge\">scalafmt</code>. Then, create a new file on the root directory of your project and name it <code class=\"language-plaintext highlighter-rouge\">.scalafmt.conf</code>. In this file, you will add the configuration based on which you want to format your code.</p>\n\n<p>For example, you can use something like the following snippet:</p>\n\n<div class=\"language-conf highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">version</span> = <span class=\"s2\">\"2.4.2\"</span>\n\n<span class=\"n\">style</span> = <span class=\"n\">default</span>\n<span class=\"n\">maxColumn</span> = <span class=\"m\">80</span>\n<span class=\"n\">encoding</span> = <span class=\"s2\">\"UTF-8\"</span>\n<span class=\"n\">continuationIndent</span> {\n  <span class=\"n\">callSite</span> = <span class=\"m\">2</span>\n  <span class=\"n\">defnSite</span> = <span class=\"m\">2</span>\n}\n<span class=\"n\">assumeStandardLibraryStripMargin</span> = <span class=\"n\">true</span>\n\n<span class=\"n\">project</span>.<span class=\"n\">git</span> = <span class=\"n\">true</span>\n\n<span class=\"n\">align</span> = <span class=\"n\">some</span>\n<span class=\"n\">align</span>.<span class=\"n\">tokens</span> = [\n  {<span class=\"n\">code</span> = <span class=\"s2\">\"=&gt;\"</span>, <span class=\"n\">owner</span> = <span class=\"s2\">\"Case\"</span>},\n  {<span class=\"n\">code</span> = <span class=\"s2\">\"%\"</span>, <span class=\"n\">owner</span> = <span class=\"s2\">\"Term.ApplyInfix\"</span>},\n  {<span class=\"n\">code</span> = <span class=\"s2\">\"%%\"</span>, <span class=\"n\">owner</span> = <span class=\"s2\">\"Term.ApplyInfix\"</span>}\n]\n\n<span class=\"n\">newlines</span>.<span class=\"n\">alwaysBeforeTopLevelStatements</span> = <span class=\"n\">true</span>\n\n<span class=\"n\">rewrite</span> {\n  <span class=\"n\">rules</span> = [<span class=\"n\">AvoidInfix</span>, <span class=\"n\">SortImports</span>, <span class=\"n\">RedundantBraces</span>, <span class=\"n\">RedundantParens</span>, <span class=\"n\">PreferCurlyFors</span>]\n}\n</code></pre></div></div>\n\n<blockquote>\n  <p><strong>Note</strong>: You can refer to <a href=\"https://scalameta.org/scalafmt/docs/configuration.html\">scalafmt’s documentation page</a> for a more detailed description of all the available options.</p>\n</blockquote>\n\n<p>Now, you can head to your command line tool and execute the command <code class=\"language-plaintext highlighter-rouge\">sbt scalafmtAll</code> to format the code for all the configurations. Apart from this, <code class=\"language-plaintext highlighter-rouge\">scalafmt</code> supports a few other tasks that you can find on the <a href=\"https://scalameta.org/scalafmt/docs/installation.html#task-keys\">task section of scalafmt’s documentation page</a>.</p>\n\n<p>Cool! With everything ready, it’s time to setup GitHub Actions!</p>\n\n<h2 id=\"github-actions\">GitHub Actions</h2>\n\n<p>On your project, create the directory <code class=\"language-plaintext highlighter-rouge\">.github/workflows</code> and add a file named <code class=\"language-plaintext highlighter-rouge\">scala.yml</code>.\nThis is the file where we are going to define the CI workflow.</p>\n\n<p>Let’s open this file and let’s start by adding a name.</p>\n\n<div class=\"language-yml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">Scala CI</span>\n</code></pre></div></div>\n\n<p>Then, it’s time to specify the events that will trigger the workflow:</p>\n<div class=\"language-yml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"na\">on</span><span class=\"pi\">:</span>\n  <span class=\"na\">push</span><span class=\"pi\">:</span>\n    <span class=\"na\">branches</span><span class=\"pi\">:</span>\n        <span class=\"pi\">-</span> <span class=\"s\">master</span>\n        <span class=\"pi\">-</span> <span class=\"s\">develop</span>\n  <span class=\"na\">pull_request</span><span class=\"pi\">:</span>\n    <span class=\"na\">branches</span><span class=\"pi\">:</span>\n        <span class=\"pi\">-</span> <span class=\"s\">master</span>\n        <span class=\"pi\">-</span> <span class=\"s\">develop</span>\n</code></pre></div></div>\n\n<p>In this area, we set that a push or a pull request to the <code class=\"language-plaintext highlighter-rouge\">master</code> and <code class=\"language-plaintext highlighter-rouge\">develop</code> branch will trigger the workflow.</p>\n\n<p>Now, let’s define our workflow. In our case, we want to run unit tests, generate a coverage report and run the lint check.</p>\n\n<p>Here is a example of such a workflow:</p>\n<div class=\"language-yml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"na\">jobs</span><span class=\"pi\">:</span>\n  <span class=\"na\">test</span><span class=\"pi\">:</span>\n    <span class=\"na\">runs-on</span><span class=\"pi\">:</span> <span class=\"s\">ubuntu-latest</span>\n    <span class=\"na\">steps</span><span class=\"pi\">:</span>\n    <span class=\"pi\">-</span> <span class=\"na\">uses</span><span class=\"pi\">:</span> <span class=\"s\">actions/checkout@v2</span>\n    <span class=\"pi\">-</span> <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">Run tests</span>\n      <span class=\"na\">run</span><span class=\"pi\">:</span> <span class=\"s\">sbt coverage test</span>\n    <span class=\"pi\">-</span> <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">Coverage Report</span>\n      <span class=\"na\">run</span><span class=\"pi\">:</span> <span class=\"s\">sbt coverageReport</span>\n    <span class=\"pi\">-</span> <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">Upload coverage to Codecov</span>\n      <span class=\"na\">uses</span><span class=\"pi\">:</span> <span class=\"s\">codecov/codecov-action@v1</span>\n      <span class=\"na\">with</span><span class=\"pi\">:</span>\n        <span class=\"na\">fail_ci_if_error</span><span class=\"pi\">:</span> <span class=\"no\">true</span>\n  <span class=\"na\">lint</span><span class=\"pi\">:</span>\n    <span class=\"na\">runs-on</span><span class=\"pi\">:</span> <span class=\"s\">ubuntu-latest</span>\n    <span class=\"na\">steps</span><span class=\"pi\">:</span>\n    <span class=\"pi\">-</span> <span class=\"na\">uses</span><span class=\"pi\">:</span> <span class=\"s\">actions/checkout@v2</span>\n    <span class=\"pi\">-</span> <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">Formatting</span>\n      <span class=\"na\">run</span><span class=\"pi\">:</span> <span class=\"s\">sbt scalafmtSbtCheck scalafmtCheck test:scalafmtCheck</span>\n</code></pre></div></div>\n\n<blockquote>\n  <p><strong>Note</strong>: This snippet is also available in <a href=\"https://gist.github.com/diamantidis/f2ffb96d6e874b23b5b39a9f51d91314\">this gist</a>.</p>\n</blockquote>\n\n<p>Let’s explain what we are doing in this snippet. In total we have 2 jobs named <code class=\"language-plaintext highlighter-rouge\">test</code> and <code class=\"language-plaintext highlighter-rouge\">lint</code>. On the <code class=\"language-plaintext highlighter-rouge\">test</code> job, we define three steps: one to run the test with coverage, one to generate the coverage report and one to upload the coverage to <code class=\"language-plaintext highlighter-rouge\">Codecov</code>(More on that <a href=\"#codecov\">in a while</a>). On the <code class=\"language-plaintext highlighter-rouge\">lint</code> job, we define one step that run a command to check for any <code class=\"language-plaintext highlighter-rouge\">scalafmt</code> issues.</p>\n\n<p>Our GitHub Action workflow is ready!!</p>\n\n<blockquote>\n  <p><strong>Note</strong>: Instead of creating a file locally, you could visit your GitHub repository page and press on the <code class=\"language-plaintext highlighter-rouge\">Actions</code> tab on the top navigation bar. In this page, find the template that matches the language and the framework of your project and click on the <code class=\"language-plaintext highlighter-rouge\">Set up this workflow</code>.<br />\n  <img src=\"https://diamantidis.github.io/assets/github_actions/github_actions.png\" alt=\"GitHub Actions Template screenshot\" /></p>\n</blockquote>\n\n<h3 id=\"codecov\"><a href=\"https://codecov.io\">Codecov</a></h3>\n\n<p>Before we push the configuration and run the workflow, we have to setup <a href=\"https://codecov.io\">Codecov</a>.</p>\n\n<p>Codecov is a solution that will help us visualize the code coverage of the project. Some of its advantages are that it requires minimal setup, it’s widely used by the community and it’s free for open source projects.</p>\n\n<p>To integrate your project with Codecov, all you have to do is to sign-up or login on <a href=\": https://codecov.io\">Codecov’s website</a> with your GitHub account, and make sure that you can find the repo you would like to apply the coverage for.</p>\n\n<p>If so, you are good to go and use the <a href=\"https://github.com/codecov/codecov-action\">Codecov GitHub Action</a> from your CI workflow, like I did in <code class=\"language-plaintext highlighter-rouge\">scala.yml</code>. To trigger the workflow, push a new branch with the <code class=\"language-plaintext highlighter-rouge\">scala.yml</code> file and create a new Pull Request targeting the <code class=\"language-plaintext highlighter-rouge\">develop</code> branch. Once the PR is open, the workflow will start.</p>\n\n<p>You can also visit the <code class=\"language-plaintext highlighter-rouge\">Actions</code> tab on GitHub, where you can see the progress of the workflow in details, add a new workflow and create the status badge for your README file.</p>\n\n<p><img src=\"https://diamantidis.github.io/assets/github_actions/create_badge.png\" alt=\"GitHub Actions create badge screenshot\" /></p>\n\n<p>And that’s about it!!</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>In this post, we have seen how to setup unit tests, code coverage, code formatting and how to use all of these on a Continuous Integration pipeline.</p>\n\n<p>From now on, I will know that whenever I make a change in a project, it won’t break any previously tested functionality and it will adhere to the coding style that I have set.</p>\n\n<p>And that’s why I believe that having a Continuous Integration setup is useful. It will be the one responsible for doing all the tedious but yet important tasks of checking the quality and integrity of the changes we want to make, allowing us to focus on more important aspects of the project. :dart:</p>\n\n<p>Thanks for reading this post, I hope you find it useful!</p>\n\n<p>If you would like to get notified when new posts come out or you want to share a question or commend about this post, feel free to follow me on <a href=\"https://twitter.com/diamantidis_io\">Twitter</a>.</p>\n\n",
            "tags": ["Scala","CI","Codecov","Github Actions"],
            "image": "https://diamantidis.github.io/assets/socialIcon.png"
        },
        
        {
            "id": "https://diamantidis.github.io/2020/05/10/add-shield-on-the-app-icon-of-beta-builds",
            "url": "https://diamantidis.github.io/2020/05/10/add-shield-on-the-app-icon-of-beta-builds",
            "title": "How to add a shield on the App Icon of beta builds",
            "date_published": "2020-05-10T04:00:00+00:00",
            
            "date_modified": "2020-05-10T04:00:00+00:00",
            
            "author": {
                "name": "Ioannis Diamantidis",
                "url": "https://diamantidis.github.io"
            },
            "summary": "<p>Have you ever ended up in a situation where you have multiple builds of the same app installed on a device and you find it hard to figure out the configuration and the version of each build? Wouldn’t it be great if we could make it easier to identify which one is which with a single glance?</p>\n\n",
            "content_html": "<p>Have you ever ended up in a situation where you have multiple builds of the same app installed on a device and you find it hard to figure out the configuration and the version of each build? Wouldn’t it be great if we could make it easier to identify which one is which with a single glance?</p>\n\n<p><img src=\"https://diamantidis.github.io/assets/shield_on_app_icon/app_icons_before.png\" alt=\"App Icons before screenshot\" /></p>\n\n<p>The good news is that, with a little imagination, we can find multiple alternatives to ease this issue. For example, we could add this info on the app name, present it somewhere inside the app, use a settings bundle to show it in the app settings or use a different app icon.</p>\n\n<p>Among all these options, I personally believe that the most efficient, when using the app, is to change the app icon. Wouldn’t it make it much easier to recognize them if we were to add a shield on the app icon with information about the configuration and the version for dev or stage builds?</p>\n\n<p><img src=\"https://diamantidis.github.io/assets/shield_on_app_icon/app_icons_after.png\" alt=\"App Icons after screenshot\" /></p>\n\n<p>In this post, we are going to see how we can use a Ruby gem name <a href=\"https://github.com/HazAT/badge\"><code class=\"language-plaintext highlighter-rouge\">badge</code></a> to add this shield on the app icon. Let’s get started!</p>\n\n<h2 id=\"badge-gem\">badge gem</h2>\n\n<p>As I mentioned before, <a href=\"https://github.com/HazAT/badge\"><code class=\"language-plaintext highlighter-rouge\">badge</code></a> is a Ruby gem that makes it easy to add a shield or a badge on the app icon. It also offers the option to either use it directly from the command like or from fastlane’s Fastfile.</p>\n\n<blockquote>\n  <p><strong>Note</strong>: As an alternative to this gem, you can use <a href=\"https://imagemagick.org/index.php\">ImageMagick</a>. <code class=\"language-plaintext highlighter-rouge\">badge</code> itself is using <code class=\"language-plaintext highlighter-rouge\">ImageMagick</code> but it restricts you to a specific style for the shield. If you prefer to create something custom, then <code class=\"language-plaintext highlighter-rouge\">ImageMagick</code> is the way to go, as it allows for more freedom and creativity in regards to the position and the style of the shield.</p>\n</blockquote>\n\n<p>Let’s first see how we can use it from the <code class=\"language-plaintext highlighter-rouge\">Fastfile</code>!</p>\n\n<h2 id=\"the-fastlane-way\">The fastlane way</h2>\n\n<blockquote>\n  <p><strong>Note</strong>: I make the assumption that you already have <code class=\"language-plaintext highlighter-rouge\">Bundler</code> and <code class=\"language-plaintext highlighter-rouge\">fastlane</code> setup. If not, you can refer to my previous posts and find out how you can setup both <a href=\"/2020/04/26/setting-up-an-ios-project-part-i#bundler\">Bundler</a> and <a href=\"/2020/05/03/setting-up-an-ios-project-part-ii#fastlane\">fastlane</a> on an iOS project.</p>\n</blockquote>\n\n<p>To begin with, there is a fastlane plugin for <code class=\"language-plaintext highlighter-rouge\">badge</code>. To install it, we will run the command <code class=\"language-plaintext highlighter-rouge\">bundle exec fastlane add_plugin badge</code> on the root directory of the project.</p>\n\n<p>When this command is completed, we can open the <code class=\"language-plaintext highlighter-rouge\">fastlane/Fastfile</code> and add a new lane to add the shield on the app icon. This lane will look like the following snippet.</p>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"no\">APP_PROJECT</span> <span class=\"o\">=</span> <span class=\"s2\">\"&lt;YourApp&gt;.xcodeproj\"</span>\n\n<span class=\"n\">desc</span> <span class=\"s2\">\"Add a shield on the App Icon\"</span>\n<span class=\"n\">lane</span> <span class=\"ss\">:add_shield</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"n\">options</span><span class=\"o\">|</span>\n  <span class=\"nb\">puts</span> <span class=\"n\">options</span>\n  <span class=\"n\">version</span> <span class=\"o\">=</span> <span class=\"n\">get_version_number</span><span class=\"p\">(</span><span class=\"ss\">xcodeproj: </span><span class=\"no\">APP_PROJECT</span><span class=\"p\">)</span>\n  <span class=\"k\">if</span> <span class=\"n\">options</span><span class=\"p\">[</span><span class=\"ss\">:config</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s2\">\"dev\"</span>\n    <span class=\"n\">add_badge</span><span class=\"p\">(</span>\n      <span class=\"ss\">shield: </span><span class=\"s2\">\"Dev-</span><span class=\"si\">#{</span><span class=\"n\">version</span><span class=\"si\">}</span><span class=\"s2\">-green\"</span><span class=\"p\">,</span>\n      <span class=\"ss\">no_badge: </span><span class=\"kp\">true</span>\n    <span class=\"p\">)</span>\n  <span class=\"k\">elsif</span> <span class=\"n\">options</span><span class=\"p\">[</span><span class=\"ss\">:config</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s2\">\"staging\"</span>\n    <span class=\"n\">add_badge</span><span class=\"p\">(</span>\n      <span class=\"ss\">shield: </span><span class=\"s2\">\"Stag-</span><span class=\"si\">#{</span><span class=\"n\">version</span><span class=\"si\">}</span><span class=\"s2\">-orange\"</span><span class=\"p\">,</span>\n      <span class=\"ss\">no_badge: </span><span class=\"kp\">true</span>\n    <span class=\"p\">)</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre></div></div>\n\n<p>In this lane, we first create a variable with the version of the app and then we run the <code class=\"language-plaintext highlighter-rouge\">add_badge</code> action but with different text and color for each configuration.</p>\n\n<p>Once ready, you can either run the command directly from the terminal, like <code class=\"language-plaintext highlighter-rouge\">bundle exec fastlane add_shield config:dev</code> or use it from another lane, for example from the dev or stage build lane, like so: <code class=\"language-plaintext highlighter-rouge\">add_shield(config: dev)</code>.</p>\n\n<h2 id=\"the-xcode-way\">The Xcode Way</h2>\n\n<p>Alternatively, you can add a <code class=\"language-plaintext highlighter-rouge\">Run Script Phase</code> on the Xcode project and update the icon every time you build the app.</p>\n\n<p>To accomplish this, we will have to follow a different approach. We will have to install the <code class=\"language-plaintext highlighter-rouge\">badge</code> gem globally on our machine so that we can have access to it from the <code class=\"language-plaintext highlighter-rouge\">Run Script Phase</code>. To install the gem globally, you can run <code class=\"language-plaintext highlighter-rouge\">sudo /usr/bin/gem install badge</code>.</p>\n\n<p>Now, we can go to the <code class=\"language-plaintext highlighter-rouge\">Build Phases</code> tab of our app’s target and use the <code class=\"language-plaintext highlighter-rouge\">+</code> sign to add a <code class=\"language-plaintext highlighter-rouge\">New Run Script Phase</code>. Drag this phase just before the <code class=\"language-plaintext highlighter-rouge\">Compile Sources</code> phase and use the following snippet as a content:</p>\n\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">if </span><span class=\"nb\">hash </span>badge 2&gt;/dev/null<span class=\"p\">;</span> <span class=\"k\">then\n    </span><span class=\"nv\">version</span><span class=\"o\">=</span><span class=\"s2\">\"</span><span class=\"k\">${</span><span class=\"nv\">MARKETING_VERSION</span><span class=\"k\">}</span><span class=\"s2\">\"</span>\n    <span class=\"nv\">config</span><span class=\"o\">=</span><span class=\"s2\">\"</span><span class=\"k\">${</span><span class=\"nv\">CONFIGURATION</span><span class=\"k\">}</span><span class=\"s2\">\"</span>\n\n    <span class=\"k\">if</span> <span class=\"o\">[[</span> <span class=\"nv\">$config</span> <span class=\"o\">=</span>~ <span class=\"s2\">\"Debug\"</span> <span class=\"o\">]]</span><span class=\"p\">;</span> <span class=\"k\">then\n        </span><span class=\"nv\">shield</span><span class=\"o\">=</span><span class=\"s2\">\"Dev-</span><span class=\"k\">${</span><span class=\"nv\">version</span><span class=\"k\">}</span><span class=\"s2\">-green\"</span>\n    <span class=\"k\">elif</span> <span class=\"o\">[[</span> <span class=\"k\">${</span><span class=\"nv\">config</span><span class=\"k\">}</span> <span class=\"o\">=</span>~ <span class=\"s2\">\"Stag\"</span> <span class=\"o\">]]</span><span class=\"p\">;</span> <span class=\"k\">then\n        </span><span class=\"nv\">shield</span><span class=\"o\">=</span><span class=\"s2\">\"Stag-</span><span class=\"k\">${</span><span class=\"nv\">version</span><span class=\"k\">}</span><span class=\"s2\">-orange\"</span>\n    <span class=\"k\">fi\n\n    if</span> <span class=\"o\">[</span> <span class=\"nt\">-n</span> <span class=\"s2\">\"</span><span class=\"k\">${</span><span class=\"nv\">shield</span><span class=\"k\">}</span><span class=\"s2\">\"</span> <span class=\"o\">]</span><span class=\"p\">;</span> <span class=\"k\">then\n      </span><span class=\"nb\">echo</span> <span class=\"s2\">\"Addding shield '</span><span class=\"k\">${</span><span class=\"nv\">shield</span><span class=\"k\">}</span><span class=\"s2\">' on the AppIcon\"</span>\n      badge <span class=\"nt\">--shield</span> <span class=\"s2\">\"</span><span class=\"k\">${</span><span class=\"nv\">shield</span><span class=\"k\">}</span><span class=\"s2\">\"</span> <span class=\"nt\">--no_badge</span>\n    <span class=\"k\">fi\nelse\n    </span><span class=\"nb\">echo</span> <span class=\"s2\">\"warning: 'badge' is not installed, run 'sudo /usr/bin/gem install badge'\"</span>\n<span class=\"k\">fi</span>\n</code></pre></div></div>\n\n<p>In the snippet above, we first check if the <code class=\"language-plaintext highlighter-rouge\">badge</code> command is available or else we print a warning.</p>\n\n<p>Then we get the configuration and the version of the build, and, in the same fashion as in the <code class=\"language-plaintext highlighter-rouge\">Fastfile</code>, we apply the different texts and colors according to those values.</p>\n\n<p>Now if you build the app, you will be able to see a different icon for different configurations and versions. :tada:</p>\n\n<p>But we are not done yet, there is one last thing! As part of this process, we are changing the <code class=\"language-plaintext highlighter-rouge\">AppIcon</code> but we never revert it back to the original state.</p>\n\n<p>To fix that, we will have to add a <code class=\"language-plaintext highlighter-rouge\">Run Script Phase</code> that will revert the changes. For this phase, make sure that is the last build phase and use the following as a content:</p>\n\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">if</span> <span class=\"o\">[[</span> <span class=\"s2\">\"</span><span class=\"k\">${</span><span class=\"nv\">CONFIGURATION</span><span class=\"k\">}</span><span class=\"s2\">\"</span> <span class=\"o\">=</span>~ <span class=\"s2\">\"Debug\"</span> <span class=\"o\">]]</span> <span class=\"o\">||</span> <span class=\"o\">[[</span> <span class=\"s2\">\"</span><span class=\"k\">${</span><span class=\"nv\">CONFIGURATION</span><span class=\"k\">}</span><span class=\"s2\">\"</span> <span class=\"o\">=</span>~ <span class=\"s2\">\"Stag\"</span> <span class=\"o\">]]</span><span class=\"p\">;</span> <span class=\"k\">then\n    </span>git checkout <span class=\"nt\">--</span> <span class=\"sb\">`</span>git diff <span class=\"nt\">--name-only</span> | <span class=\"nb\">grep </span>AppIcon.appiconset<span class=\"sb\">`</span>\n<span class=\"k\">fi</span>\n</code></pre></div></div>\n<blockquote>\n  <p><strong>Note</strong>: Despite the fact that the outcome looks nice, please note that this approach will further slow down the build time on every build. So, I would recommend using it only if it’s necessary.</p>\n</blockquote>\n\n<p>And that’s about it!</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>In this post we have seen how we can use the <code class=\"language-plaintext highlighter-rouge\">badge</code> gem to add a shield on the app icon both when creating a new build from <code class=\"language-plaintext highlighter-rouge\">fastlane</code> and when building the app from <code class=\"language-plaintext highlighter-rouge\">Xcode</code>.</p>\n\n<p>In my experience, this comes really handy when distributing beta builds as it makes it much easier to recognize with a single glance the configuration and the version of the build.</p>\n\n<p>Thanks for reading this post, I hope you find it useful!</p>\n\n<p>If you would like to get notified when new posts come out or you want to share a question or commend about this post, feel free to follow me on <a href=\"https://twitter.com/diamantidis_io\">Twitter</a>.</p>\n\n",
            "tags": ["iOS","badge","fastlane"],
            "image": "https://diamantidis.github.io/assets/socialIcon.png"
        },
        
        {
            "id": "https://diamantidis.github.io/2020/05/03/setting-up-an-ios-project-part-ii",
            "url": "https://diamantidis.github.io/2020/05/03/setting-up-an-ios-project-part-ii",
            "title": "Setting up a new iOS project (Part II)",
            "date_published": "2020-05-03T04:00:00+00:00",
            
            "date_modified": "2020-05-03T04:00:00+00:00",
            
            "author": {
                "name": "Ioannis Diamantidis",
                "url": "https://diamantidis.github.io"
            },
            "summary": "<p>This is the second part of a series of posts about the steps that I usually take when creating a new iOS project.</p>\n\n",
            "content_html": "<p>This is the second part of a series of posts about the steps that I usually take when creating a new iOS project.</p>\n\n<p>In the <a href=\"/2020/04/26/setting-up-an-ios-project-part-i\">first part</a> I wrote about <code class=\"language-plaintext highlighter-rouge\">.gitignore</code>, <code class=\"language-plaintext highlighter-rouge\">Bundler</code>, <code class=\"language-plaintext highlighter-rouge\">CocoaPods</code>, <code class=\"language-plaintext highlighter-rouge\">Configurations</code> and <code class=\"language-plaintext highlighter-rouge\">SwiftLint</code>.</p>\n\n<p>Now, in this second part I will try to elaborate on topics like <code class=\"language-plaintext highlighter-rouge\">Fastlane</code>, <code class=\"language-plaintext highlighter-rouge\">Continuous Integration</code>, architectural decisions, custom Xcode templates and <code class=\"language-plaintext highlighter-rouge\">R.swift</code>, a tool which allows you to use strong typed resources.</p>\n\n<p>Let’s go!!</p>\n\n<h2 id=\"fastlane\"><a href=\"https://fastlane.tools/\">fastlane</a></h2>\n\n<p><code class=\"language-plaintext highlighter-rouge\">fastlane</code>, is a tool to automate tasks like running tests, linting, setting up provisioning profiles, deployments, etc</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">fastlane</code> is a RubyGem, so, if we want to install it, we will have to add the following line on the <code class=\"language-plaintext highlighter-rouge\">Gemfile</code> and run <code class=\"language-plaintext highlighter-rouge\">bundle install</code>.</p>\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">gem</span> <span class=\"s1\">'fastlane'</span><span class=\"p\">,</span> <span class=\"s1\">'~&gt;2.145.0'</span>\n</code></pre></div></div>\n\n<p>Once installed, run <code class=\"language-plaintext highlighter-rouge\">bundle exec fastlane init</code> to create the <code class=\"language-plaintext highlighter-rouge\">fastlane</code> folder and some basic files. One of them is the <code class=\"language-plaintext highlighter-rouge\">Fastfile</code>, which is the file where we define our tasks. In fastlane’s terminology, they are called lanes.</p>\n\n<p>A basic <code class=\"language-plaintext highlighter-rouge\">Fastfile</code>, that I use on my projects, looks like the following snippet:</p>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">default_platform</span><span class=\"p\">(</span><span class=\"ss\">:ios</span><span class=\"p\">)</span>\n\n<span class=\"no\">APP_WORKSPACE</span> <span class=\"o\">=</span> <span class=\"s2\">\"&lt;YOUR_APP&gt;.xcworkspace\"</span>\n\n<span class=\"no\">TEST_DEVICES</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"iPhone 11\"</span><span class=\"p\">]</span>\n\n<span class=\"n\">platform</span> <span class=\"ss\">:ios</span> <span class=\"k\">do</span>\n  <span class=\"n\">desc</span> <span class=\"s2\">\"Run iOS unit tests\"</span>\n  <span class=\"n\">lane</span> <span class=\"ss\">:unit_tests</span> <span class=\"k\">do</span>\n    <span class=\"n\">run_tests</span><span class=\"p\">(</span>\n        <span class=\"ss\">workspace: </span><span class=\"no\">APP_WORKSPACE</span><span class=\"p\">,</span>\n        <span class=\"ss\">devices: </span><span class=\"no\">TEST_DEVICES</span><span class=\"p\">,</span>\n        <span class=\"ss\">derived_data_path: </span><span class=\"s2\">\"../build\"</span><span class=\"p\">,</span>\n        <span class=\"ss\">build_for_testing: </span><span class=\"kp\">true</span>\n    <span class=\"p\">)</span>\n  <span class=\"k\">end</span>\n\n  <span class=\"n\">desc</span> <span class=\"s2\">\"Run linting\"</span>\n  <span class=\"n\">lane</span> <span class=\"ss\">:lint</span> <span class=\"k\">do</span>\n    <span class=\"n\">swiftlint</span><span class=\"p\">(</span>\n      <span class=\"ss\">executable: </span><span class=\"s1\">'./Pods/SwiftLint/swiftlint'</span><span class=\"p\">,</span>\n      <span class=\"ss\">mode: :lint</span><span class=\"p\">,</span>\n      <span class=\"ss\">config_file: </span><span class=\"s1\">'.swiftlint.yml'</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n  <span class=\"k\">end</span>\n\n  <span class=\"n\">desc</span> <span class=\"s2\">\"Run lint autocorrect\"</span>\n  <span class=\"n\">lane</span> <span class=\"ss\">:lint_autocorrect</span> <span class=\"k\">do</span>\n    <span class=\"n\">swiftlint</span><span class=\"p\">(</span>\n      <span class=\"ss\">mode: :autocorrect</span><span class=\"p\">,</span>\n      <span class=\"ss\">executable: </span><span class=\"s1\">'./Pods/SwiftLint/swiftlint'</span><span class=\"p\">,</span>\n      <span class=\"ss\">config_file: </span><span class=\"s1\">'.swiftlint.yml'</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n  <span class=\"k\">end</span>\n\n  <span class=\"n\">desc</span> <span class=\"s2\">\"Increment major version and push to git\"</span>\n  <span class=\"n\">lane</span> <span class=\"ss\">:increment_major_version</span> <span class=\"k\">do</span>\n    <span class=\"n\">increment_version_number</span><span class=\"p\">(</span>\n      <span class=\"ss\">bump_type: </span><span class=\"s2\">\"major\"</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">commit_version_bump</span>\n  <span class=\"k\">end</span>\n\n  <span class=\"n\">desc</span> <span class=\"s2\">\"Increment minor version and push to git\"</span>\n  <span class=\"n\">lane</span> <span class=\"ss\">:increment_minor_version</span> <span class=\"k\">do</span>\n    <span class=\"n\">increment_version_number</span><span class=\"p\">(</span>\n      <span class=\"ss\">bump_type: </span><span class=\"s2\">\"minor\"</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">commit_version_bump</span>\n  <span class=\"k\">end</span>\n\n  <span class=\"n\">desc</span> <span class=\"s2\">\"Increment patch version and push to git\"</span>\n  <span class=\"n\">lane</span> <span class=\"ss\">:increment_patch_version</span> <span class=\"k\">do</span>\n    <span class=\"n\">increment_version_number</span><span class=\"p\">(</span>\n      <span class=\"ss\">bump_type: </span><span class=\"s2\">\"patch\"</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">commit_version_bump</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre></div></div>\n\n<p>This example contains some lanes for testing, lint and version handling, and we can use the command <code class=\"language-plaintext highlighter-rouge\">bundle exec fastlane ios &lt;name of the lane&gt;</code> to run them.</p>\n\n<blockquote>\n  <p><strong>Hint</strong>: When running the lanes to increment the version number, if you get an error saying <code class=\"language-plaintext highlighter-rouge\">Your current version ($(MARKETING_VERSION)) does not respect the format A or A.B or A.B.C</code>), try to run <code class=\"language-plaintext highlighter-rouge\">xcrun agvtool new-marketing-version 0.0.1</code>.</p>\n</blockquote>\n\n<p>When time comes to send a build to <code class=\"language-plaintext highlighter-rouge\">TestFlight</code> or some other beta testing tool, I add those lanes as well. In that case, fastlane’s <code class=\"language-plaintext highlighter-rouge\">match</code> action has proven invaluable when it comes to iOS code signing.</p>\n\n<p>As you may assume, <code class=\"language-plaintext highlighter-rouge\">fastlane</code> can help immensely when setting up Continuous Integration(<code class=\"language-plaintext highlighter-rouge\">CI</code>) and Continuous Delivery(<code class=\"language-plaintext highlighter-rouge\">CD</code>) pipelines and that is going to be the next topic.</p>\n\n<h2 id=\"cicd\">CI/CD</h2>\n\n<p>As part of the <code class=\"language-plaintext highlighter-rouge\">CI</code> pipeline, we can use the lanes for testing and lint and trigger it on the open Pull Requests (PRs).</p>\n\n<p>Once the PR is merged, we can trigger the <code class=\"language-plaintext highlighter-rouge\">CD</code> pipeline and run the lanes to build the app and distribute a new build either to TestFlight or any other tool you may use for beta testing.</p>\n\n<p>I won’t delve deeper on one specific tool, as there are a lot of options out there to choose from, like for example <a href=\"https://github.com/features/actions\">GitHub Actions</a>, <a href=\"https://docs.gitlab.com/ee/ci/\">GitLab CI</a>, <a href=\"https://travis-ci.com/\">Travis</a>, <a href=\"https://www.jenkins.io/\">Jenkins</a> and many more.</p>\n\n<p>Despite that, with the <code class=\"language-plaintext highlighter-rouge\">fastlane</code> setup in place, it would be a much easier task to set it up, regardless of what tool you decided to use in your project.</p>\n\n<h2 id=\"architectural-decisions\">Architectural Decisions</h2>\n\n<p>After that, it’s time to think about the architecture of the project. There is a plethora of options to choose from like <code class=\"language-plaintext highlighter-rouge\">MVC</code>, <code class=\"language-plaintext highlighter-rouge\">MVVM</code>, <code class=\"language-plaintext highlighter-rouge\">VIPER</code>, etc and each one of those comes with its pros and cons.</p>\n\n<p>Then, we have to decide on the UI framework that we are going to use. Will it be <code class=\"language-plaintext highlighter-rouge\">UIKit</code> or <code class=\"language-plaintext highlighter-rouge\">SwiftUI</code>?</p>\n\n<p>And quite related to this is the decision regarding the minimum iOS version that the app will support, especially if we decide to go with <code class=\"language-plaintext highlighter-rouge\">SwiftUI</code> which is only available on iOS 13.0 or later.</p>\n\n<p>Contrary, if we decide to go with <code class=\"language-plaintext highlighter-rouge\">UIKit</code>, another decision revolves around the usage of Storyboards, XIB files or solely programmatic views.</p>\n\n<p>All those decisions are quite crucial and will impact the future of the project.</p>\n\n<h2 id=\"file-templates\">File Templates</h2>\n\n<p>Having taken all these decisions, it is time to think about adding some custom file templates tailored to your need and the architectural choices that you made.</p>\n\n<p>When creating a new file, <code class=\"language-plaintext highlighter-rouge\">Xcode</code> offers some options to choose from, like <code class=\"language-plaintext highlighter-rouge\">Cocoa Touch Class</code> for example. However, it’s usually the case that every time you create a new file, you add some boilerplate code to cater for the architectural pattern that you have chosen to use. For example, such boilerplate code can be related to dependency injection.</p>\n\n<p>Hopefully, <code class=\"language-plaintext highlighter-rouge\">Xcode</code> supports the use of custom file templates that you can create based on your use case. This can be really valuable in the long run as it will save you time of typing(or removing) boilerplate code, help you avoid potential errors and also make the codebase more consistent.</p>\n\n<p>If you want to find out more about how to create and use a custom <code class=\"language-plaintext highlighter-rouge\">Xcode</code> template, you can refer to my <a href=\"/2019/07/21/xcode-custom-templates\">detailed step-by-step guide about custom Xcode templates</a>.</p>\n\n<h2 id=\"rswift\"><a href=\"https://github.com/mac-cain13/R.swift\">R.swift</a></h2>\n\n<p>Last but not least in my list for this post is <a href=\"https://github.com/mac-cain13/R.swift\">R.swift</a>, which is a tool to get strong typed resources.</p>\n\n<p>To install it, we are going to use CocoaPods. Let’s open the <code class=\"language-plaintext highlighter-rouge\">Podfile</code>, add <code class=\"language-plaintext highlighter-rouge\">pod 'R.swift', :configurations =&gt; ['Debug']</code> and run <code class=\"language-plaintext highlighter-rouge\">bundle exec pod install</code> to install it.</p>\n\n<p>Once completed, open the <code class=\"language-plaintext highlighter-rouge\">.xcworkspace</code> of your project and head over to the build phases of your app’s target. There, add a <code class=\"language-plaintext highlighter-rouge\">New Run Script Phase</code> which you have to drag and place it above the <code class=\"language-plaintext highlighter-rouge\">Compile Sources</code> phase and below <code class=\"language-plaintext highlighter-rouge\">Check Pods Manifest.lock</code> phase. Then, expand it and add the following snippet as the script content:</p>\n\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"s2\">\"</span><span class=\"nv\">$PODS_ROOT</span><span class=\"s2\">/R.swift/rswift\"</span> generate <span class=\"s2\">\"</span><span class=\"nv\">$SRCROOT</span><span class=\"s2\">/&lt;YourApp&gt;/R.generated.swift\"</span>\n</code></pre></div></div>\n<p>Add <code class=\"language-plaintext highlighter-rouge\">$TEMP_DIR/rswift-lastrun</code> to the <code class=\"language-plaintext highlighter-rouge\">Input Files</code> and <code class=\"language-plaintext highlighter-rouge\">$SRCROOT/&lt;YourApp&gt;/R.generated.swift</code> to the <code class=\"language-plaintext highlighter-rouge\">Output Files</code> of the Script Phase.</p>\n\n<p>We are now ready to build the app. Once the app is built, the aforementioned script will have created a new file on the location that you specified as the argument. You can change that location, but if you do so, don’t forget to change the value of the <code class=\"language-plaintext highlighter-rouge\">Output Files</code> as well, or else you will get an error.</p>\n\n<p>Change it or not, open this directory using the Finder app, find the <code class=\"language-plaintext highlighter-rouge\">R.generated.swift</code> and drag it into your project. At this point, make sure that the <code class=\"language-plaintext highlighter-rouge\">Copy items if needed</code> checkbox is not selected.</p>\n\n<p>And that’s it. Now you can take advantage of <code class=\"language-plaintext highlighter-rouge\">R.swift</code> syntax and access your strings, fonts, colors, images, etc like in the following snippet:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">font</span> <span class=\"o\">=</span> <span class=\"kt\">R</span><span class=\"o\">.</span><span class=\"n\">font</span><span class=\"o\">.</span><span class=\"nf\">customFont</span><span class=\"p\">(</span><span class=\"nv\">size</span><span class=\"p\">:</span> <span class=\"mi\">12</span><span class=\"p\">)</span>\n<span class=\"k\">let</span> <span class=\"nv\">string</span> <span class=\"o\">=</span> <span class=\"kt\">R</span><span class=\"o\">.</span><span class=\"n\">string</span><span class=\"o\">.</span><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"nf\">hello</span><span class=\"p\">()</span>\n<span class=\"k\">let</span> <span class=\"nv\">color</span> <span class=\"o\">=</span> <span class=\"kt\">R</span><span class=\"o\">.</span><span class=\"n\">color</span><span class=\"o\">.</span><span class=\"nf\">blue</span><span class=\"p\">()</span>\n<span class=\"k\">let</span> <span class=\"nv\">image</span> <span class=\"o\">=</span> <span class=\"kt\">R</span><span class=\"o\">.</span><span class=\"n\">image</span><span class=\"o\">.</span><span class=\"nf\">anImage</span><span class=\"p\">())</span>\n</code></pre></div></div>\n\n<blockquote>\n  <p>If you are interested to learn more, you can visit the <a href=\"https://github.com/mac-cain13/R.swift/blob/master/Documentation/Examples.md\">R.swift’s GitHub page</a>.</p>\n</blockquote>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>And that’s about it for now. In these two posts (<a href=\"/2020/04/26/setting-up-an-ios-project-part-i\">Part I here</a>), I enumerated most of the steps that I take when creating a new iOS project.</p>\n\n<p>With this list in place, I am more confident that I will have a proper setup before even starting writing any code. It’s like the checklist that pilots use prior to the take off. :rocket: :smirk:</p>\n\n<p>Thanks for reading this post, I hope you find it useful!</p>\n\n<p>I am really interested to know the steps that you take, so if you want to share them with me, or you have any other comment or question about this post, feel free to reach out to me on <a href=\"https://twitter.com/diamantidis_io\">Twitter</a>!!</p>\n\n",
            "tags": ["iOS","CI","fastlane","R.Swift"],
            "image": "https://diamantidis.github.io/assets/socialIcon.png"
        },
        
        {
            "id": "https://diamantidis.github.io/2020/04/26/setting-up-an-ios-project-part-i",
            "url": "https://diamantidis.github.io/2020/04/26/setting-up-an-ios-project-part-i",
            "title": "Setting up a new iOS project (Part I)",
            "date_published": "2020-04-26T04:00:00+00:00",
            
            "date_modified": "2020-04-26T04:00:00+00:00",
            
            "author": {
                "name": "Ioannis Diamantidis",
                "url": "https://diamantidis.github.io"
            },
            "summary": "<p>What are the initial steps that you take when creating a new iOS project?</p>\n\n<p>Regardless of the language or the framework, it’s quite common when creating a new project, to do some basic project setup before you even start writing the first line of code.</p>\n\n",
            "content_html": "<p>What are the initial steps that you take when creating a new iOS project?</p>\n\n<p>Regardless of the language or the framework, it’s quite common when creating a new project, to do some basic project setup before you even start writing the first line of code.</p>\n\n<p>And of course iOS projects could not be the exception to this. Having a basic setup in place from the beginning of the project can be proved invaluable in the later stage of the development, potentially allowing you to be more efficient and confident, and generally have a better developer experience.</p>\n\n<p>In a series of two (or maybe more?) posts, I am going to try and sum up all the basic actions that I usually do when I create a new iOS project.</p>\n\n<p>In this first post, I will focus on the <a href=\"#gitignore\">.gitignore</a>, <a href=\"#bundler\">Bundler</a>, <a href=\"#cocoapods\">CocoaPods</a>, <a href=\"#configurations\">project configuration</a> and <a href=\"#swiftlint\">SwiftLint</a>.</p>\n\n<p>Let’s start!</p>\n\n<h2 id=\"gitignore\">.gitignore</h2>\n\n<p>The first thing that I usually do when I create a new project is to add a <code class=\"language-plaintext highlighter-rouge\">.gitignore</code> file. It’s the place where you define the files and directories that you don’t want to track in your version control system.</p>\n\n<p>For an iOS project, a basic <code class=\"language-plaintext highlighter-rouge\">.gitignore</code> could be like the following:</p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>## User settings\n**/xcuserdata/*\n\n## App packaging\n*.ipa\n*.dSYM.zip\n*.dSYM\n\n# fastlane\nfastlane/report.xml\nfastlane/Preview.html\nfastlane/screenshots/**/*.png\nfastlane/test_output\n\n# CocoaPods\nPods\n</code></pre></div></div>\n\n<h2 id=\"bundler\">Bundler</h2>\n\n<p>After the <code class=\"language-plaintext highlighter-rouge\">.gitignore</code>, I will add <a href=\"https://bundler.io/\">Bundler</a>. Bundler is a dependency manager for <a href=\"https://rubygems.org/\">RubyGems</a>. Like CocoaPods but for Ruby.</p>\n\n<p>A lot of tools, that are quite common on the daily routing of an iOS developer, are distributed as ruby gems. <a href=\"https://cocoapods.org/\">CocoaPods</a> and <a href=\"https://fastlane.tools/\">Fastlane</a> are two such examples.</p>\n\n<p>Using Bundler, you can have a better control over the versions of those dependencies. This will help you to make sure that everyone working on the project and also CI tools use the same versions.\nFurthermore, contrary to the use of globally installed gems, it allows you to use different versions for different projects in the same machine.</p>\n\n<p>Bundler is a gem as well, so to install it, you have to run <code class=\"language-plaintext highlighter-rouge\">gem install bundler</code>.</p>\n\n<blockquote>\n  <p>I totally recommend using either <a href=\"https://rvm.io/\">RVM</a> or <a href=\"https://github.com/rbenv/rbenv\">rbenv</a> to install Ruby and handle its versions on your local machine.</p>\n</blockquote>\n\n<p>Bundler uses a file named <code class=\"language-plaintext highlighter-rouge\">Gemfile</code> to define dependencies, so let’s run <code class=\"language-plaintext highlighter-rouge\">touch Gemfile</code> on the root directory of the project to create one.</p>\n\n<p>Next, open this file and add the following content:</p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>source 'https://rubygems.org'\n\ngem 'cocoapods', '~&gt;1.9.1'\ngem 'fastlane', '~&gt;2.145.0'\n</code></pre></div></div>\n\n<p>Save this file and run <code class=\"language-plaintext highlighter-rouge\">bundle install</code>. \nIt may take some time and when it’s done, all the dependencies will be installed and a new file named <code class=\"language-plaintext highlighter-rouge\">Gemfile.lock</code> will be created.</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">Gemfile.lock</code> keeps the exact versions of the installed gems, something like the <code class=\"language-plaintext highlighter-rouge\">Podfile.lock</code> but for Bundler.</p>\n\n<p>Now you will be able to use commands like <code class=\"language-plaintext highlighter-rouge\">bundle exec pod install</code> or <code class=\"language-plaintext highlighter-rouge\">bundle exec fastlane lane</code>!</p>\n\n<blockquote>\n  <p>If you find these commands too verbose, remember that you always have the option to create an alias :smirk:</p>\n  <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>alias bep='bundle exec pod'\nalias bef='bundle exec fastlane'\n</code></pre></div>  </div>\n</blockquote>\n\n<h2 id=\"cocoapods\">CocoaPods</h2>\n\n<p>With Bundler ready, we can now set up <a href=\"https://cocoapods.org/\">CocoaPods</a>. CocoaPods is a dependency manager for an iOS project.</p>\n\n<p>Dependencies are defined on a file named <code class=\"language-plaintext highlighter-rouge\">Podfile</code> and to create one, run <code class=\"language-plaintext highlighter-rouge\">bundle exec pod init</code> from the root directory of your project.</p>\n\n<p>This will also create the <code class=\"language-plaintext highlighter-rouge\">.xcworkspace</code> file, which is the file you will have to use from now on instead of the <code class=\"language-plaintext highlighter-rouge\">.xcodeproj</code>.</p>\n\n<p>To install any dependencies and to create the <code class=\"language-plaintext highlighter-rouge\">Podfile.lock</code>, run <code class=\"language-plaintext highlighter-rouge\">bundle exec pod install</code></p>\n\n<blockquote>\n  <p>I am also considering the option of using <a href=\"https://swift.org/package-manager/\">Swift Package Manager</a> for future projects. If you have some experience using both of them, feel free to reach me on <a href=\"https://twitter.com/diamantidis_io\">Twitter</a> and let me know about the pros and cons.</p>\n</blockquote>\n\n<h2 id=\"configurations\">Configurations</h2>\n<p>Next in the list is configurations. By default, a new Xcode project comes with two configurations (<code class=\"language-plaintext highlighter-rouge\">Debug</code> and <code class=\"language-plaintext highlighter-rouge\">Release</code>) but it’s quite common that they are not enough.</p>\n\n<p>If the app makes API requests to a server or uses some 3-party tool with API keys, we may need to define more configuration to handle the different environments. To cater for these scenarios, I usually add configurations for <code class=\"language-plaintext highlighter-rouge\">Dev</code>, <code class=\"language-plaintext highlighter-rouge\">Staging</code> and <code class=\"language-plaintext highlighter-rouge\">Prod</code> for each of the existing configuration, thus ending up with a total of 6 different configurations.</p>\n\n<p>To add a new configuration, open the project file and select the Project from the left pane. Then select the <code class=\"language-plaintext highlighter-rouge\">Info</code> tab from the top bar and find the <code class=\"language-plaintext highlighter-rouge\">Configurations</code> section.</p>\n\n<p><img src=\"https://diamantidis.github.io/assets/ios_project_setup/configurations_section.png\" alt=\"Configuration section screenshot\" /></p>\n\n<p>Press the <code class=\"language-plaintext highlighter-rouge\">+</code> button and select which one from the existing ones you want to duplicate. \nIf you want to change the name of an existing one, double-click on the name and change it.</p>\n\n<p>Now that we have our configurations ready, another problem arises when installing the app on a phone, since all the configurations have the same Bundle Identifier. Because of this, we cannot have both the “Dev” and the “Staging” version of the app on the device at the same time. To fix this problem, let’s provide a different Bundle Identifier for each environment.</p>\n\n<p>First, head to the <code class=\"language-plaintext highlighter-rouge\">Info.plist</code> file and make sure that the key <code class=\"language-plaintext highlighter-rouge\">CFBundleIdentifier</code> has <code class=\"language-plaintext highlighter-rouge\">$(PRODUCT_BUNDLE_IDENTIFIER)</code> as a value. \nThen, open the Project file, select the app target from the left pane and open the <code class=\"language-plaintext highlighter-rouge\">Build Settings</code> tab. There, search for <code class=\"language-plaintext highlighter-rouge\">PRODUCT_BUNDLE_IDENTIFIER</code>. In the <code class=\"language-plaintext highlighter-rouge\">Product Bundle Identifier</code> section, you can change the bundle identifier for each configuration as you wish. For example, based on the environment, you can append the existing value with <code class=\"language-plaintext highlighter-rouge\">.dev</code> or <code class=\"language-plaintext highlighter-rouge\">.staging</code>.</p>\n\n<p>With this, you will be able to have both a <code class=\"language-plaintext highlighter-rouge\">Dev</code> and <code class=\"language-plaintext highlighter-rouge\">Staging</code> version installed at the same time, but it would be hard to recognize which one is which since they use the same name. So, let’s fix that too.</p>\n\n<p>In the <code class=\"language-plaintext highlighter-rouge\">Build Settings</code> tab, click on the <code class=\"language-plaintext highlighter-rouge\">+</code> button on the top bar and select the option <code class=\"language-plaintext highlighter-rouge\">Add User-Defined Setting</code>.</p>\n\n<p><img src=\"https://diamantidis.github.io/assets/ios_project_setup/user_defined_setting.png\" alt=\"Add user-defined setting screenshot\" /></p>\n\n<p>Set <code class=\"language-plaintext highlighter-rouge\">APP_DISPLAY_NAME</code> as the name for the newly created setting and set the value to <code class=\"language-plaintext highlighter-rouge\">${PRODUCT_NAME}</code> for all the configurations and then prepend with <code class=\"language-plaintext highlighter-rouge\">Dev</code> and <code class=\"language-plaintext highlighter-rouge\">Staging</code> for the corresponding configurations.</p>\n\n<p>After that, add an entry to the <code class=\"language-plaintext highlighter-rouge\">Info.plist</code> with key <code class=\"language-plaintext highlighter-rouge\">Bundle display name</code> and set its value to the variable <code class=\"language-plaintext highlighter-rouge\">$(APP_DISPLAY_NAME)</code>. Alternatively, you can open the <code class=\"language-plaintext highlighter-rouge\">Info.plist</code> as a source code and add the following key-value pair inside the root <code class=\"language-plaintext highlighter-rouge\">dict</code>:</p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  &lt;key&gt;CFBundleDisplayName&lt;/key&gt;\n  &lt;string&gt;$(APP_DISPLAY_NAME)&lt;/string&gt;\n</code></pre></div></div>\n\n<p>So, now that we have CocoaPods and Configurations ready, let’s move on and add some tooling!</p>\n\n<h2 id=\"swiftlint\">SwiftLint</h2>\n\n<p>I will start with <a href=\"https://github.com/realm/SwiftLint\">SwiftLint</a>. SwiftLint is a tool to enforce styling conventions on a iOS project.</p>\n\n<p>Since I had wrote a separate <a href=\"/2018/12/23/a-guide-to-swiftlint\">post about SwiftLint</a> before, I will not focus too much on the details of this tool. Feel free to <a href=\"/2018/12/23/a-guide-to-swiftlint\">refer to this post</a>, if you are interested to learn more.</p>\n\n<p>Briefly, we first add the line <code class=\"language-plaintext highlighter-rouge\">pod 'SwiftLint', :configurations =&gt; ['DebugDev']</code> in the <code class=\"language-plaintext highlighter-rouge\">Podfile</code>. After that, save the file and run <code class=\"language-plaintext highlighter-rouge\">bundle exec pod install</code>. Once the execution of this command is over, head to Xcode and create a new <code class=\"language-plaintext highlighter-rouge\">Build Phase</code> for the app’s target.</p>\n\n<p>Press the <code class=\"language-plaintext highlighter-rouge\">+</code> sign on the top right corner and select the option <code class=\"language-plaintext highlighter-rouge\">New Run Script Phase</code>.\nName the Run Script Phase as <code class=\"language-plaintext highlighter-rouge\">SwiftLint</code> and add the following content:</p>\n\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">if </span>which <span class=\"s2\">\"</span><span class=\"k\">${</span><span class=\"nv\">PODS_ROOT</span><span class=\"k\">}</span><span class=\"s2\">/SwiftLint/swiftlint\"</span> <span class=\"o\">&gt;</span>/dev/null<span class=\"p\">;</span> <span class=\"k\">then</span>\n    <span class=\"k\">${</span><span class=\"nv\">PODS_ROOT</span><span class=\"k\">}</span>/SwiftLint/swiftlint <span class=\"nt\">--config</span> .swiftlint.yml\n<span class=\"k\">else\n    </span><span class=\"nb\">echo</span> <span class=\"s2\">\"warning: SwiftLint not installed, download from https://github.com/realm/SwiftLint\"</span>\n<span class=\"k\">fi</span>\n</code></pre></div></div>\n<p>Lastly, create a file named <code class=\"language-plaintext highlighter-rouge\">.swiftlint.yml</code> and add the rules that you want your code to conform to.</p>\n\n<p>Now, every time you build the app, you will be able to see all the linting issues as warnings or errors.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>And that’s about it for this post. Until now, we have set a decent base on top of which we can start building our app. But that’s not all!</p>\n\n<p>In the next post, I am going to focus on topics like <a href=\"https://fastlane.tools/\"><code class=\"language-plaintext highlighter-rouge\">Fastlane</code></a>, <code class=\"language-plaintext highlighter-rouge\">CI</code>, project structure, file templates, tools like <a href=\"https://github.com/mac-cain13/R.swift\"><code class=\"language-plaintext highlighter-rouge\">R.swift</code></a> which allows you to have strongly typed assets and maybe more.</p>\n\n<p>Thanks for reading this post, I hope you find it useful and stay tuned for the second part!\nFeel free to reach out to me on <a href=\"https://twitter.com/diamantidis_io\">Twitter</a> and share your comments about this post!</p>\n\n",
            "tags": ["iOS","Swift","Bundler","CocoaPods","SwiftLint"],
            "image": "https://diamantidis.github.io/assets/socialIcon.png"
        },
        
        {
            "id": "https://diamantidis.github.io/2020/04/19/scala-script-for-fullsize-screenshots-for-different-screen-dimensions",
            "url": "https://diamantidis.github.io/2020/04/19/scala-script-for-fullsize-screenshots-for-different-screen-dimensions",
            "title": "A Scala script to take full size webpage screenshots for different screen dimensions",
            "date_published": "2020-04-19T04:00:00+00:00",
            
            "date_modified": "2020-04-19T04:00:00+00:00",
            
            "author": {
                "name": "Ioannis Diamantidis",
                "url": "https://diamantidis.github.io"
            },
            "summary": "<p>Today, I had yet another usual Sunday morning. Drinking my tea, doing some UI experiments on this blog and using <a href=\"https://developers.google.com/web/tools/chrome-devtools\">Chrome’s DevTools</a> and the <a href=\"https://developers.google.com/web/tools/chrome-devtools/device-mode\">Device Mode</a> to make sure that those changes won’t break the website in different screen dimensions. :joy:</p>\n\n",
            "content_html": "<p>Today, I had yet another usual Sunday morning. Drinking my tea, doing some UI experiments on this blog and using <a href=\"https://developers.google.com/web/tools/chrome-devtools\">Chrome’s DevTools</a> and the <a href=\"https://developers.google.com/web/tools/chrome-devtools/device-mode\">Device Mode</a> to make sure that those changes won’t break the website in different screen dimensions. :joy:</p>\n\n<p>Until the moment I found that Chrome DevTools has an option to capture full size screenshots!!</p>\n\n<p><img src=\"https://diamantidis.github.io/assets/screenshot_script/devTools_capture_screenshot.png\" alt=\"Chrome's DevTool capture full size screenshots screenshot\" /></p>\n\n<p>My first thought was that this is great, I could use it to track the evolution of the UI on my blog over time. A second later though, a light bulb went on in my head. :bulb:</p>\n\n<p>What if I could write a script that would do the same? This would not only help me keep a record of the UI changes over time but potentially could ease the tedious and inefficient process of changing devices and making sure that everything looks good. :thinking: :thought_balloon:</p>\n\n<p>The idea is to create a script that would open a webpage and then simulate me changing the screen devices and dimensions on Chrome DevTools. After that, this script would take screenshots for all these dimensions and store them on the local filesystem (or remote). Finally, I would just have to browse though the images and review them to make sure that everything looks as expected.</p>\n\n<p>And that’s basically the topic of this post. Now that I have the idea, it’s time to start implementing it, right? But in which programming language?</p>\n\n<h2 id=\"the-language-decision\">The language decision</h2>\n\n<p>I decided to go with <a href=\"https://www.scala-lang.org/\">Scala</a>.</p>\n\n<p>A few years ago, I was working on a project using Scala and I had a really good experience, though certain circumstances didn’t make it possible to dig deeper and get more accustomed to language features like functional programming and its ecosystem.</p>\n\n<p>Scala integrates seamlessly features of object-oriented and functional languages, is a type-safe language that uses type inference, and provides syntactic sugar for a lot of use cases such as pattern matching, for-comprehension and case classes.</p>\n\n<p>All of these result in a language with concise syntax and expressiveness. On top of that, it runs on a JVM and because it supports compatibility and interoperability with Java, it allows to use most of the Java libraries.</p>\n\n<p>And though it’s been a while since the last time I worked with Scala, I think that writing this script in Scala, would be a great opportunity to refresh my Scala knowledge and slowly learn to write more intuitive Scala programs.</p>\n\n<h2 id=\"implementation\">Implementation</h2>\n<p>Let’s start with the implementation</p>\n\n<p>First thing first, to run this script, you are going to need <a href=\"https://www.scala-lang.org/\">Scala</a> and <a href=\"https://www.scala-sbt.org/\">sbt</a>. You can refer to <a href=\"https://www.scala-lang.org/download/\">Scala documentation</a> to find more information on how to set up both of them.</p>\n\n<blockquote>\n  <p>This script is built and run with the following versions:</p>\n  <ul>\n    <li><code class=\"language-plaintext highlighter-rouge\">java -version</code>: 1.8.0_172</li>\n    <li><code class=\"language-plaintext highlighter-rouge\">sbt sbtVersion</code>: 1.3.9</li>\n  </ul>\n</blockquote>\n\n<p>To create a new sbt project, just run <code class=\"language-plaintext highlighter-rouge\">sbt new scala/hello-world.g8</code>. At some point, you will be asked to enter the name of the application. In my case, I have used <code class=\"language-plaintext highlighter-rouge\">scala-screenshots</code>.</p>\n\n<p>After this script is completed, the created project will have the following folder structure:</p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>scala-screenshots\n├── build.sbt\n├── project\n│   ├── build.properties\n│   └── target\n├── src\n│   └── main\n│       └── scala\n│           └── Main.scala\n└── target\n</code></pre></div></div>\n\n<p>Starting from the top, <code class=\"language-plaintext highlighter-rouge\">build.sbt</code> is the file where we set the information about the project, like name, version and dependencies.</p>\n\n<p>So, let’s open this file and add the dependencies we will need. We are going to use <a href=\"https://www.selenium.dev/\">Selenium</a> to open the webpage and capture the screenshot and <a href=\"http://commons.apache.org/proper/commons-io/\">Commons IO</a> to save the screenshot to a file. Based on that, <code class=\"language-plaintext highlighter-rouge\">build.sbt</code> should look similar to the following snippet:</p>\n\n<div class=\"language-scala highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">scalaVersion</span> <span class=\"o\">:=</span> <span class=\"s\">\"2.13.1\"</span>\n\n<span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"s\">\"scala-screenshots\"</span>\n<span class=\"n\">organization</span> <span class=\"o\">:=</span> <span class=\"s\">\"io.github.diamantidis\"</span>\n<span class=\"n\">version</span> <span class=\"o\">:=</span> <span class=\"s\">\"1.0\"</span>\n\n<span class=\"n\">libraryDependencies</span> <span class=\"o\">+=</span> <span class=\"s\">\"org.seleniumhq.selenium\"</span> <span class=\"o\">%</span> <span class=\"s\">\"selenium-java\"</span> <span class=\"o\">%</span> <span class=\"s\">\"3.14.0\"</span>\n<span class=\"n\">libraryDependencies</span> <span class=\"o\">+=</span> <span class=\"s\">\"commons-io\"</span> <span class=\"o\">%</span> <span class=\"s\">\"commons-io\"</span> <span class=\"o\">%</span> <span class=\"s\">\"2.6\"</span>\n</code></pre></div></div>\n\n<p>Next, we are going to need a WebDriver for Selenium. You can refer to Selenium website’s <a href=\"https://www.selenium.dev/ecosystem/\">page about supported Browser Drivers</a> to find which of the supported one you would like to use.</p>\n\n<p>In my example I am going to use <a href=\"https://sites.google.com/a/chromium.org/chromedriver/\">ChromeDriver</a>, so make sure that you download it and place it in the root directory of our project.</p>\n\n<blockquote>\n  <p>You may get some security warning on the first run of the script, so make sure to allow the use of <code class=\"language-plaintext highlighter-rouge\">chromedriver</code>.</p>\n</blockquote>\n\n<p><img src=\"https://diamantidis.github.io/assets/screenshot_script/chromedriver_alert.png\" alt=\"ChromeDriver security warning screenshot\" /></p>\n\n<p>Now we can open our <code class=\"language-plaintext highlighter-rouge\">Main.scala</code> file and start building our program.</p>\n\n<p>By default the content of the file is the following:</p>\n<div class=\"language-scala highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">object</span> <span class=\"nc\">Main</span> <span class=\"k\">extends</span> <span class=\"nc\">App</span> <span class=\"o\">{</span>\n  <span class=\"nf\">println</span><span class=\"o\">(</span><span class=\"s\">\"Hello, World!\"</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>You could either use your favourite IDE to run this or you could open the command line, navigate to the root directory of the project and execute <code class=\"language-plaintext highlighter-rouge\">sbt run</code>.</p>\n\n<p>In both cases you should the “Hello, World!” message.</p>\n\n<p>Let’s remove the body part of this object and instead add some variables for the dimensions and the url that we are interested in:</p>\n\n<div class=\"language-scala highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  <span class=\"k\">case</span> <span class=\"k\">class</span> <span class=\"nc\">ScreenDimension</span><span class=\"o\">(</span><span class=\"n\">width</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">,</span> <span class=\"n\">height</span><span class=\"k\">:</span> <span class=\"kt\">Int</span><span class=\"o\">)</span>\n\n  <span class=\"c1\">// Define dimensions and urls</span>\n  <span class=\"k\">val</span> <span class=\"nv\">dimensions</span> <span class=\"k\">=</span> <span class=\"nc\">List</span><span class=\"o\">(</span>\n    <span class=\"nc\">ScreenDimension</span><span class=\"o\">(</span><span class=\"mi\">1920</span><span class=\"o\">,</span> <span class=\"mi\">1080</span><span class=\"o\">),</span> <span class=\"c1\">// Laptop</span>\n    <span class=\"nc\">ScreenDimension</span><span class=\"o\">(</span><span class=\"mi\">414</span><span class=\"o\">,</span> <span class=\"mi\">896</span><span class=\"o\">)</span> <span class=\"c1\">// iPhone XR</span>\n  <span class=\"o\">)</span>\n\n  <span class=\"k\">val</span> <span class=\"nv\">Host</span> <span class=\"k\">=</span> <span class=\"s\">\"https://diamantidis.github.io\"</span>\n  <span class=\"k\">val</span> <span class=\"nv\">url</span> <span class=\"k\">=</span> <span class=\"n\">s</span><span class=\"s\">\"${Host}/2020/04/19/scala-script-for-fullsize-screenshots-for-different-screen-dimensions\"</span>\n\n  <span class=\"c1\">// rest of the code goes here</span>\n</code></pre></div></div>\n\n<p>Next, we are going to setup the WebDriver using the following lines:</p>\n<div class=\"language-scala highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  <span class=\"k\">val</span> <span class=\"nv\">options</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">ChromeOptions</span><span class=\"o\">()</span>\n  <span class=\"nv\">options</span><span class=\"o\">.</span><span class=\"py\">addArguments</span><span class=\"o\">(</span><span class=\"s\">\"headless\"</span><span class=\"o\">)</span>\n  <span class=\"k\">val</span> <span class=\"nv\">webDriver</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">ChromeDriver</span><span class=\"o\">(</span><span class=\"n\">options</span><span class=\"o\">)</span>\n\n  <span class=\"c1\">// rest of the code goes here</span>\n</code></pre></div></div>\n\n<blockquote>\n  <p>We could use some other WebDriver, by replacing those lines. For example, for Safari we could use:</p>\n  <div class=\"language-scala highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  <span class=\"k\">val</span> <span class=\"nv\">webDriver</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">SafariDriver</span><span class=\"o\">()</span>\n</code></pre></div>  </div>\n</blockquote>\n\n<p>After that, I will compute the directory where the screenshots will be saved.</p>\n\n<div class=\"language-scala highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  <span class=\"k\">val</span> <span class=\"nv\">calendar</span> <span class=\"k\">=</span> <span class=\"nv\">Calendar</span><span class=\"o\">.</span><span class=\"py\">getInstance</span><span class=\"o\">()</span>\n  <span class=\"k\">val</span> <span class=\"nv\">baseDir</span> <span class=\"k\">=</span> <span class=\"s\">\"./screenshots\"</span>\n  <span class=\"k\">val</span> <span class=\"nv\">day</span> <span class=\"k\">=</span> <span class=\"s\">\"%02d\"</span><span class=\"o\">.</span><span class=\"py\">format</span><span class=\"o\">(</span><span class=\"nv\">calendar</span><span class=\"o\">.</span><span class=\"py\">get</span><span class=\"o\">(</span><span class=\"nv\">Calendar</span><span class=\"o\">.</span><span class=\"py\">DATE</span><span class=\"o\">))</span>\n  <span class=\"k\">val</span> <span class=\"nv\">month</span> <span class=\"k\">=</span> <span class=\"s\">\"%02d\"</span><span class=\"o\">.</span><span class=\"py\">format</span><span class=\"o\">(</span><span class=\"nv\">calendar</span><span class=\"o\">.</span><span class=\"py\">get</span><span class=\"o\">(</span><span class=\"nv\">Calendar</span><span class=\"o\">.</span><span class=\"py\">MONTH</span><span class=\"o\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"k\">val</span> <span class=\"nv\">year</span> <span class=\"k\">=</span> <span class=\"nv\">calendar</span><span class=\"o\">.</span><span class=\"py\">get</span><span class=\"o\">(</span><span class=\"nv\">Calendar</span><span class=\"o\">.</span><span class=\"py\">YEAR</span><span class=\"o\">)</span>\n\n  <span class=\"k\">val</span> <span class=\"nv\">directory</span> <span class=\"k\">=</span> <span class=\"n\">s</span><span class=\"s\">\"$baseDir/$year-$month-$day\"</span>\n\n  <span class=\"c1\">// rest of the code goes here</span>\n</code></pre></div></div>\n\n<p>Here, I am use the current date so that screenshots don’t override screenshots from previous changes.</p>\n\n<p>After that, I will compute the name of the file where we will save the screenshot:</p>\n\n<div class=\"language-scala highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  <span class=\"k\">val</span> <span class=\"nv\">filename</span> <span class=\"k\">=</span> <span class=\"nv\">url</span><span class=\"o\">.</span><span class=\"py\">replace</span><span class=\"o\">(</span><span class=\"nc\">Host</span><span class=\"o\">,</span> <span class=\"s\">\"\"</span><span class=\"o\">)</span>\n    <span class=\"o\">.</span><span class=\"py\">toLowerCase</span><span class=\"o\">()</span>\n    <span class=\"o\">.</span><span class=\"py\">replaceAll</span><span class=\"o\">(</span><span class=\"s\">\"^/+\"</span><span class=\"o\">,</span> <span class=\"s\">\"\"</span><span class=\"o\">)</span> <span class=\"c1\">// trim leading '/'</span>\n    <span class=\"o\">.</span><span class=\"py\">replaceAll</span><span class=\"o\">(</span><span class=\"s\">\"/+$\"</span><span class=\"o\">,</span> <span class=\"s\">\"\"</span><span class=\"o\">)</span> <span class=\"c1\">// trim trailing '/'</span>\n    <span class=\"o\">.</span><span class=\"py\">replaceAll</span><span class=\"o\">(</span><span class=\"s\">\"/\"</span><span class=\"o\">,</span> <span class=\"s\">\"-\"</span><span class=\"o\">)</span> <span class=\"c1\">// replace '/' with '-'</span>\n    <span class=\"o\">.</span><span class=\"py\">replaceAll</span><span class=\"o\">(</span><span class=\"s\">\"^$\"</span><span class=\"o\">,</span> <span class=\"s\">\"homepage\"</span><span class=\"o\">)</span> <span class=\"c1\">// if it's empty string, then it's the home page</span>\n\n  <span class=\"c1\">//  rest of the code goes here</span>\n</code></pre></div></div>\n\n<p>Now, we can open the webpage and set the screen dimension like in the following screen:</p>\n\n<div class=\"language-scala highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  <span class=\"nv\">webDriver</span><span class=\"o\">.</span><span class=\"py\">get</span><span class=\"o\">(</span><span class=\"n\">url</span><span class=\"o\">)</span>\n  <span class=\"nv\">Thread</span><span class=\"o\">.</span><span class=\"py\">sleep</span><span class=\"o\">(</span><span class=\"mi\">500</span><span class=\"o\">)</span>\n\n  <span class=\"nv\">dimensions</span><span class=\"o\">.</span><span class=\"py\">foreach</span> <span class=\"o\">{</span> <span class=\"n\">dimension</span> <span class=\"k\">=&gt;</span>\n    <span class=\"k\">val</span> <span class=\"nv\">width</span> <span class=\"k\">=</span> <span class=\"nv\">dimension</span><span class=\"o\">.</span><span class=\"py\">width</span>\n    <span class=\"k\">val</span> <span class=\"nv\">originalHeight</span> <span class=\"k\">=</span> <span class=\"nv\">dimension</span><span class=\"o\">.</span><span class=\"py\">height</span>\n\n    <span class=\"k\">val</span> <span class=\"nv\">originalDimension</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Dimension</span><span class=\"o\">(</span><span class=\"n\">width</span><span class=\"o\">,</span> <span class=\"n\">originalHeight</span><span class=\"o\">)</span>\n    <span class=\"nv\">webDriver</span><span class=\"o\">.</span><span class=\"py\">manage</span><span class=\"o\">.</span><span class=\"py\">window</span><span class=\"o\">.</span><span class=\"py\">setSize</span><span class=\"o\">(</span><span class=\"n\">originalDimension</span><span class=\"o\">)</span>\n\n    <span class=\"c1\">// rest of the code goes here</span>\n  <span class=\"o\">}</span>\n\n  <span class=\"nv\">webDriver</span><span class=\"o\">.</span><span class=\"py\">quit</span><span class=\"o\">()</span>\n</code></pre></div></div>\n<p>In this snippet, we open the page once, wait half a second to load, and then iterate over the dimensions and update the window size with each dimension. Also note that it’s important to call <code class=\"language-plaintext highlighter-rouge\">quit()</code> to close all windows, and exit the driver.</p>\n\n<p>Though the above-mentioned snippet will set the dimensions for the window, we won’t be able to get the full size screenshot for the pages that have a height greater than the height we set when defining the dimensions. To fix this problem we are going to get the height of the body of the webpage and update the height of the window to match this value.</p>\n\n<div class=\"language-scala highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>    <span class=\"k\">val</span> <span class=\"nv\">body</span> <span class=\"k\">=</span> <span class=\"nv\">webDriver</span><span class=\"o\">.</span><span class=\"py\">findElementByTagName</span><span class=\"o\">(</span><span class=\"s\">\"body\"</span><span class=\"o\">)</span>\n    <span class=\"k\">val</span> <span class=\"nv\">height</span> <span class=\"k\">=</span> <span class=\"nv\">body</span><span class=\"o\">.</span><span class=\"py\">getSize</span><span class=\"o\">.</span><span class=\"py\">height</span>\n\n    <span class=\"k\">val</span> <span class=\"nv\">newDimension</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">Dimension</span><span class=\"o\">(</span><span class=\"n\">width</span><span class=\"o\">,</span> <span class=\"n\">height</span><span class=\"o\">)</span>\n    <span class=\"nv\">webDriver</span><span class=\"o\">.</span><span class=\"py\">manage</span><span class=\"o\">.</span><span class=\"py\">window</span><span class=\"o\">.</span><span class=\"py\">setSize</span><span class=\"o\">(</span><span class=\"n\">newDimension</span><span class=\"o\">)</span>\n    <span class=\"c1\">// rest of the code goes here</span>\n</code></pre></div></div>\n\n<p>Having done that, we are ready to get the full size screenshot with the following line:</p>\n\n<div class=\"language-scala highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">val</span> <span class=\"nv\">file</span> <span class=\"k\">=</span> <span class=\"nv\">webDriver</span><span class=\"o\">.</span><span class=\"py\">getScreenshotAs</span><span class=\"o\">(</span><span class=\"nv\">OutputType</span><span class=\"o\">.</span><span class=\"py\">FILE</span><span class=\"o\">)</span>\n</code></pre></div></div>\n\n<p>Lastly, we will save the screenshot to the local file system:</p>\n\n<div class=\"language-scala highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>    <span class=\"k\">val</span> <span class=\"nv\">destination</span> <span class=\"k\">=</span> <span class=\"n\">s</span><span class=\"s\">\"$directory/$filename(${width}x$originalHeight).png\"</span>\n    <span class=\"k\">val</span> <span class=\"nv\">destFile</span> <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"nc\">File</span><span class=\"o\">(</span><span class=\"n\">destination</span><span class=\"o\">)</span>\n    <span class=\"nv\">FileUtils</span><span class=\"o\">.</span><span class=\"py\">copyFile</span><span class=\"o\">(</span><span class=\"n\">file</span><span class=\"o\">,</span> <span class=\"n\">destFile</span><span class=\"o\">)</span>\n</code></pre></div></div>\n\n<p>And this is it!</p>\n\n<blockquote>\n  <p>You can find all these snippets on a <a href=\"https://github.com/diamantidis/scala-screenshots/tree/31d1b6b\">GitHub project</a> that I have created.</p>\n</blockquote>\n\n<h2 id=\"result\">Result</h2>\n\n<p>If you run the script (<code class=\"language-plaintext highlighter-rouge\">sbt run</code>), you will see all the screenshots inside the <code class=\"language-plaintext highlighter-rouge\">screenshot</code> folder on the root folder of your directory.</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>screenshots\n└── 2020-04-19\n    ├── 2020-04-19-scala-script-for-fullsize-screenshots-for-different-screen-dimensions(1920x1080).png\n    └── 2020-04-19-scala-script-for-fullsize-screenshots-for-different-screen-dimensions(414x896).png\n</code></pre></div></div>\n\n<p>Thinking about the future, a potential next step is to add support for different WebDrivers so that I could see how the website is rendered on different browsers. And maybe make it a more user-friendly CLI app that would accept arguments and options and provide some feedback to the user.</p>\n\n<p>Lastly, it would be a great opportunity to try and use some libraries like <a href=\"https://zio.dev/\">ZIO</a> to make it run concurrently and also make the code more testable.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>To sum up, in this post, I have created a Scala project that uses Selenium to capture full size screenshots of a webpage for different screen sizes and save them on a local directory.</p>\n\n<p>This could be of use if you make some UI changes on a webpage and you want to verify that everything looks great on different screen sizes, or if you want to keep a record of how the UI of a website evolves over time.</p>\n\n<p>Thanks for reading this post, I hope you find it useful!\nFeel free to reach out to me on <a href=\"https://twitter.com/diamantidis_io\">Twitter</a> and share your comments about this post!</p>\n\n",
            "tags": ["Scala","Selenium"],
            "image": "https://diamantidis.github.io/assets/socialIcon.png"
        },
        
        {
            "id": "https://diamantidis.github.io/2020/04/12/notifying-users-on-ios-app-update",
            "url": "https://diamantidis.github.io/2020/04/12/notifying-users-on-ios-app-update",
            "title": "Notifying users when an iOS app update is available on AppStore",
            "date_published": "2020-04-12T04:00:00+00:00",
            
            "date_modified": "2020-04-12T04:00:00+00:00",
            
            "author": {
                "name": "Ioannis Diamantidis",
                "url": "https://diamantidis.github.io"
            },
            "summary": "<p>Have you ever been into a situation where you would love to see all of your users to update to the latest version of your app?</p>\n\n",
            "content_html": "<p>Have you ever been into a situation where you would love to see all of your users to update to the latest version of your app?</p>\n\n<p>Certain situation such as a serious crash that is fixed, the end of the support for a feature, or a breaking change on the API may make an older version of the app no longer supported, and though most of the users have the auto-update on, there is still a small but still decent percentage who has opted out.</p>\n\n<p>This situation is not the ideal to be in, but there are still things you can do and it’s better to be prepared and your app to support a functionality that will “force” the users to update to the latest version available on the App Store.</p>\n\n<p>Besides that, even if you don’t face this kind of issues, it’s always nice to remind your users that a new version is out, and that by downloading it, they will be able to enjoy all the latest features, bug fixes, better performance or whatever change may have happened in the latest version.</p>\n\n<p>So, long story short, in this post, we are going see how we can implement such a solution by fetching from iTunes some information about the latest version of the app and then use it to decide whether we should force or suggest our users to update the version of the app they are using.</p>\n\n<h2 id=\"solution\">Solution</h2>\n<p>First thing first, we have to decide on the strategy we are going to follow.</p>\n\n<p>For this post, we are going to present an alert that will inform the users that they must update the version in case of a major release (the major part of the version has increased). Instead, if either the minor or patch version is increased, we are going to show an informative alert, but this time the user will have the option to dismiss it and not update the app.</p>\n\n<p>Furthermore, in both scenarios we are going to show the alert if and only if the version is released 7 days ago or more, to cater for <a href=\"https://help.apple.com/app-store-connect/#/dev3d65fcee1\">phased roll-out</a> and also give ourselves some time to identify if there is any potential issues with the latest release and fix them before asking all our users to update the app.</p>\n\n<p>You could also wrap all this logic with some feature toggle mechanism. One such option which is also easy to integrate is <a href=\"https://firebase.google.com/docs/remote-config\">Firebase Remote Config</a>. If you are interested to learn more, you can visit my previous posts on <a href=\"https://diamantidis.github.io/2019/06/22/firebase-remote-config-ab-testing\">how to set it up</a> and <a href=\"https://diamantidis.github.io/2019/06/30/firebase-remote-config-iOS-implementation\">how to add it on your iOS app</a>.</p>\n\n<h2 id=\"implementation\">Implementation</h2>\n\n<p>Let’s start with where we can fetch the information about the latest release from iTunes. There is a URL in the format <code class=\"language-plaintext highlighter-rouge\">http://itunes.apple.com/lookup?bundleId={bundleId}</code>, where <code class=\"language-plaintext highlighter-rouge\">{bundleId}</code> is the Bundle Identifier of your app. The result of this URL is a file with a JSON object which amongst other contains information like the current version of the app, the date of the last release, the release notes, etc.</p>\n\n<p>So, the first thing that we are going to do in the app is to implement the corresponding models to decode this information. We are going to introduce 3 models: <code class=\"language-plaintext highlighter-rouge\">iTunesInfo</code> which represent the external JSON object, <code class=\"language-plaintext highlighter-rouge\">AppInfo</code> which represents the information about the app, like the version and date of the current release and lastly, <code class=\"language-plaintext highlighter-rouge\">Version</code> which represent the version of the app in three <code class=\"language-plaintext highlighter-rouge\">Int</code> properties, major, minor and patch.</p>\n\n<p>The following snippet contains the implementation for all these 3 models:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">import</span> <span class=\"kt\">Foundation</span>\n\n<span class=\"kd\">struct</span> <span class=\"nv\">iTunesInfo</span><span class=\"p\">:</span> <span class=\"kt\">Decodable</span> <span class=\"p\">{</span>\n    <span class=\"k\">var</span> <span class=\"nv\">results</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">AppInfo</span><span class=\"p\">]</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">struct</span> <span class=\"kt\">AppInfo</span><span class=\"p\">:</span> <span class=\"kt\">Decodable</span> <span class=\"p\">{</span>\n    <span class=\"k\">var</span> <span class=\"nv\">version</span><span class=\"p\">:</span> <span class=\"kt\">Version</span>\n    <span class=\"k\">var</span> <span class=\"nv\">currentVersionReleaseDate</span><span class=\"p\">:</span> <span class=\"kt\">Date</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">struct</span> <span class=\"kt\">Version</span><span class=\"p\">:</span> <span class=\"kt\">Decodable</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// MARK: - Enumerations</span>\n    <span class=\"kd\">enum</span> <span class=\"kt\">VersionError</span><span class=\"p\">:</span> <span class=\"kt\">Error</span> <span class=\"p\">{</span>\n        <span class=\"k\">case</span> <span class=\"n\">invalidFormat</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\">// MARK: - Public properties</span>\n    <span class=\"k\">let</span> <span class=\"nv\">major</span><span class=\"p\">:</span> <span class=\"kt\">Int</span>\n    <span class=\"k\">let</span> <span class=\"nv\">minor</span><span class=\"p\">:</span> <span class=\"kt\">Int</span>\n    <span class=\"k\">let</span> <span class=\"nv\">patch</span><span class=\"p\">:</span> <span class=\"kt\">Int</span>\n\n    <span class=\"c1\">// MARK: - Initializers</span>\n    <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">from</span> <span class=\"nv\">decoder</span><span class=\"p\">:</span> <span class=\"kt\">Decoder</span><span class=\"p\">)</span> <span class=\"k\">throws</span> <span class=\"p\">{</span>\n        <span class=\"k\">do</span> <span class=\"p\">{</span>\n            <span class=\"k\">let</span> <span class=\"nv\">container</span> <span class=\"o\">=</span> <span class=\"k\">try</span> <span class=\"n\">decoder</span><span class=\"o\">.</span><span class=\"nf\">singleValueContainer</span><span class=\"p\">()</span>\n            <span class=\"k\">let</span> <span class=\"nv\">version</span> <span class=\"o\">=</span> <span class=\"k\">try</span> <span class=\"n\">container</span><span class=\"o\">.</span><span class=\"nf\">decode</span><span class=\"p\">(</span><span class=\"kt\">String</span><span class=\"o\">.</span><span class=\"k\">self</span><span class=\"p\">)</span>\n            <span class=\"k\">try</span> <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"nv\">from</span><span class=\"p\">:</span> <span class=\"n\">version</span><span class=\"p\">)</span>\n        <span class=\"p\">}</span> <span class=\"k\">catch</span> <span class=\"p\">{</span>\n            <span class=\"k\">throw</span> <span class=\"kt\">VersionError</span><span class=\"o\">.</span><span class=\"n\">invalidFormat</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">from</span> <span class=\"nv\">version</span><span class=\"p\">:</span> <span class=\"kt\">String</span><span class=\"p\">)</span> <span class=\"k\">throws</span> <span class=\"p\">{</span>\n        <span class=\"k\">let</span> <span class=\"nv\">versionComponents</span> <span class=\"o\">=</span> <span class=\"n\">version</span><span class=\"o\">.</span><span class=\"nf\">components</span><span class=\"p\">(</span><span class=\"nv\">separatedBy</span><span class=\"p\">:</span> <span class=\"s\">\".\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">map</span> <span class=\"p\">{</span> <span class=\"kt\">Int</span><span class=\"p\">(</span><span class=\"nv\">$0</span><span class=\"p\">)</span> <span class=\"p\">}</span>\n        <span class=\"k\">guard</span> <span class=\"n\">versionComponents</span><span class=\"o\">.</span><span class=\"n\">count</span> <span class=\"o\">==</span> <span class=\"mi\">3</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"k\">throw</span> <span class=\"kt\">VersionError</span><span class=\"o\">.</span><span class=\"n\">invalidFormat</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"k\">guard</span> <span class=\"k\">let</span> <span class=\"nv\">major</span> <span class=\"o\">=</span> <span class=\"n\">versionComponents</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"k\">let</span> <span class=\"nv\">minor</span> <span class=\"o\">=</span> <span class=\"n\">versionComponents</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span>\n            <span class=\"k\">let</span> <span class=\"nv\">patch</span> <span class=\"o\">=</span> <span class=\"n\">versionComponents</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n                <span class=\"k\">throw</span> <span class=\"kt\">VersionError</span><span class=\"o\">.</span><span class=\"n\">invalidFormat</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">major</span> <span class=\"o\">=</span> <span class=\"n\">major</span>\n        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">minor</span> <span class=\"o\">=</span> <span class=\"n\">minor</span>\n        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">patch</span> <span class=\"o\">=</span> <span class=\"n\">patch</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Then, let’s move on to the implementation of the <code class=\"language-plaintext highlighter-rouge\">AppUpdateManager</code>, which will be responsible about the decision of whether we will prompt the users to update the app, and what time of update is it (required or optional). The implementation will be like the snippet below:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">import</span> <span class=\"kt\">Foundation</span>\n\n<span class=\"kd\">class</span> <span class=\"kt\">AppUpdateManager</span> <span class=\"p\">{</span>\n\n    <span class=\"c1\">// MARK: - Enumerations</span>\n    <span class=\"kd\">enum</span> <span class=\"kt\">Status</span> <span class=\"p\">{</span>\n        <span class=\"k\">case</span> <span class=\"kd\">required</span>\n        <span class=\"k\">case</span> <span class=\"kd\">optional</span>\n        <span class=\"k\">case</span> <span class=\"n\">noUpdate</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\">// MARK: - Initializers</span>\n    <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"nv\">bundle</span><span class=\"p\">:</span> <span class=\"kt\">BundleType</span> <span class=\"o\">=</span> <span class=\"kt\">Bundle</span><span class=\"o\">.</span><span class=\"n\">main</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">bundle</span> <span class=\"o\">=</span> <span class=\"n\">bundle</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\">// MARK: - Public methods</span>\n    <span class=\"kd\">func</span> <span class=\"nf\">updateStatus</span><span class=\"p\">(</span><span class=\"k\">for</span> <span class=\"nv\">bundleId</span><span class=\"p\">:</span> <span class=\"kt\">String</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Status</span> <span class=\"p\">{</span>\n\n        <span class=\"c1\">// Get the version of the app</span>\n        <span class=\"k\">let</span> <span class=\"nv\">appVersionKey</span> <span class=\"o\">=</span> <span class=\"s\">\"CFBundleShortVersionString\"</span>\n        <span class=\"k\">guard</span> <span class=\"k\">let</span> <span class=\"nv\">appVersionValue</span> <span class=\"o\">=</span> <span class=\"n\">bundle</span><span class=\"o\">.</span><span class=\"nf\">object</span><span class=\"p\">(</span><span class=\"nv\">forInfoDictionaryKey</span><span class=\"p\">:</span> <span class=\"n\">appVersionKey</span><span class=\"p\">)</span> <span class=\"k\">as?</span> <span class=\"kt\">String</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span> <span class=\"o\">.</span><span class=\"n\">noUpdate</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"k\">guard</span> <span class=\"k\">let</span> <span class=\"nv\">appVersion</span> <span class=\"o\">=</span> <span class=\"k\">try</span><span class=\"p\">?</span> <span class=\"kt\">Version</span><span class=\"p\">(</span><span class=\"nv\">from</span><span class=\"p\">:</span> <span class=\"n\">appVersionValue</span><span class=\"p\">)</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span> <span class=\"o\">.</span><span class=\"n\">noUpdate</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"c1\">// Get app info from App Store</span>\n        <span class=\"k\">let</span> <span class=\"nv\">iTunesURL</span> <span class=\"o\">=</span> <span class=\"kt\">URL</span><span class=\"p\">(</span><span class=\"nv\">string</span><span class=\"p\">:</span> <span class=\"s\">\"http://itunes.apple.com/lookup?bundleId=</span><span class=\"se\">\\(</span><span class=\"n\">bundleId</span><span class=\"se\">)</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n\n        <span class=\"k\">guard</span> <span class=\"k\">let</span> <span class=\"nv\">url</span> <span class=\"o\">=</span> <span class=\"n\">iTunesURL</span><span class=\"p\">,</span> <span class=\"k\">let</span> <span class=\"nv\">data</span> <span class=\"o\">=</span> <span class=\"kt\">NSData</span><span class=\"p\">(</span><span class=\"nv\">contentsOf</span><span class=\"p\">:</span> <span class=\"n\">url</span><span class=\"p\">)</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span> <span class=\"o\">.</span><span class=\"n\">noUpdate</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"c1\">// Decode the response</span>\n        <span class=\"k\">let</span> <span class=\"nv\">decoder</span> <span class=\"o\">=</span> <span class=\"kt\">JSONDecoder</span><span class=\"p\">()</span>\n        <span class=\"n\">decoder</span><span class=\"o\">.</span><span class=\"n\">dateDecodingStrategy</span> <span class=\"o\">=</span> <span class=\"o\">.</span><span class=\"n\">iso8601</span>\n\n        <span class=\"k\">guard</span> <span class=\"k\">let</span> <span class=\"nv\">response</span> <span class=\"o\">=</span> <span class=\"k\">try</span><span class=\"p\">?</span> <span class=\"n\">decoder</span><span class=\"o\">.</span><span class=\"nf\">decode</span><span class=\"p\">(</span><span class=\"n\">iTunesInfo</span><span class=\"o\">.</span><span class=\"k\">self</span><span class=\"p\">,</span> <span class=\"nv\">from</span><span class=\"p\">:</span> <span class=\"n\">data</span> <span class=\"k\">as</span> <span class=\"kt\">Data</span><span class=\"p\">)</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span> <span class=\"o\">.</span><span class=\"n\">noUpdate</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"c1\">// Verify that there is at least on result in the response</span>\n        <span class=\"k\">guard</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">results</span><span class=\"o\">.</span><span class=\"n\">count</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"k\">let</span> <span class=\"nv\">appInfo</span> <span class=\"o\">=</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">results</span><span class=\"o\">.</span><span class=\"n\">first</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span> <span class=\"o\">.</span><span class=\"n\">noUpdate</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"k\">let</span> <span class=\"nv\">appStoreVersion</span> <span class=\"o\">=</span> <span class=\"n\">appInfo</span><span class=\"o\">.</span><span class=\"n\">version</span>\n        <span class=\"k\">let</span> <span class=\"nv\">releaseDate</span> <span class=\"o\">=</span> <span class=\"n\">appInfo</span><span class=\"o\">.</span><span class=\"n\">currentVersionReleaseDate</span>\n\n        <span class=\"k\">let</span> <span class=\"nv\">oneWeekInSeconds</span><span class=\"p\">:</span> <span class=\"kt\">TimeInterval</span> <span class=\"o\">=</span> <span class=\"mi\">7</span> <span class=\"o\">*</span> <span class=\"mi\">24</span> <span class=\"o\">*</span> <span class=\"mi\">60</span> <span class=\"o\">*</span> <span class=\"mi\">60</span>\n        <span class=\"k\">let</span> <span class=\"nv\">dateOneWeekAgo</span> <span class=\"o\">=</span> <span class=\"kt\">Date</span><span class=\"p\">(</span><span class=\"nv\">timeIntervalSinceNow</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"n\">oneWeekInSeconds</span><span class=\"p\">)</span>\n\n        <span class=\"c1\">// Decide if it's a required or optional update based on the release date and the version change</span>\n        <span class=\"k\">if</span> <span class=\"k\">case</span> <span class=\"o\">.</span><span class=\"n\">orderedAscending</span> <span class=\"o\">=</span> <span class=\"n\">releaseDate</span><span class=\"o\">.</span><span class=\"nf\">compare</span><span class=\"p\">(</span><span class=\"n\">dateOneWeekAgo</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">if</span> <span class=\"n\">appStoreVersion</span><span class=\"o\">.</span><span class=\"n\">major</span> <span class=\"o\">&gt;</span> <span class=\"n\">appVersion</span><span class=\"o\">.</span><span class=\"n\">major</span> <span class=\"p\">{</span>\n                <span class=\"k\">return</span> <span class=\"o\">.</span><span class=\"kd\">required</span>\n            <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">appStoreVersion</span><span class=\"o\">.</span><span class=\"n\">minor</span> <span class=\"o\">&gt;</span> <span class=\"n\">appVersion</span><span class=\"o\">.</span><span class=\"n\">minor</span> <span class=\"p\">{</span>\n                <span class=\"k\">return</span> <span class=\"o\">.</span><span class=\"kd\">optional</span>\n            <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">appStoreVersion</span><span class=\"o\">.</span><span class=\"n\">patch</span> <span class=\"o\">&gt;</span> <span class=\"n\">appVersion</span><span class=\"o\">.</span><span class=\"n\">patch</span> <span class=\"p\">{</span>\n                <span class=\"k\">return</span> <span class=\"o\">.</span><span class=\"kd\">optional</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"o\">.</span><span class=\"n\">noUpdate</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\">// MARK: - Private properties</span>\n    <span class=\"kd\">private</span> <span class=\"k\">let</span> <span class=\"nv\">bundle</span><span class=\"p\">:</span> <span class=\"kt\">BundleType</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Firstly, we define an enumeration which represent the 3 different options regarding the update; it could be <code class=\"language-plaintext highlighter-rouge\">required</code>, <code class=\"language-plaintext highlighter-rouge\">optional</code>, or there is no need to update right now.</p>\n\n<p>Then, we provide an initializer which is used to inject the dependency. We need to fetch the version of the running app, and instead of directly using the <code class=\"language-plaintext highlighter-rouge\">Bundle.main</code>, we inject a property which conforms to the protocol <code class=\"language-plaintext highlighter-rouge\">BundleType</code>. In this way, we could later provide a mock implementation and write some unit tests.</p>\n\n<p>The following snippet contains the definition of <code class=\"language-plaintext highlighter-rouge\">BundleType</code> as well the conformance of <code class=\"language-plaintext highlighter-rouge\">Bundle</code> to it:</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">protocol</span> <span class=\"kt\">BundleType</span> <span class=\"p\">{</span>\n    <span class=\"kd\">func</span> <span class=\"nf\">object</span><span class=\"p\">(</span><span class=\"n\">forInfoDictionaryKey</span> <span class=\"nv\">key</span><span class=\"p\">:</span> <span class=\"kt\">String</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Any</span><span class=\"p\">?</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">extension</span> <span class=\"kt\">Bundle</span><span class=\"p\">:</span> <span class=\"kt\">BundleType</span> <span class=\"p\">{}</span>\n</code></pre></div></div>\n\n<p>Going back to the <code class=\"language-plaintext highlighter-rouge\">AppUpdateManager</code> class, we have the <code class=\"language-plaintext highlighter-rouge\">updateStatus</code> method. In its body, we start by getting the version of the running app. Then, we fetch the app info from iTunes using the URL we mentioned before and decode the response. \nAs we move on, we are calculating what was the day one week ago.</p>\n\n<p>Last, using the release date, the version we fetched from iTunes, the day one week ago and the version of the app that’s running, we implement the logic of our strategy and return the corresponding status.</p>\n\n<p>And that’s about the <code class=\"language-plaintext highlighter-rouge\">AppUpdateManager</code>. Before we see how we can use it, we have to decide on how we are going to present this information to the user. For this reason, we are going to need two extensions.</p>\n\n<p>The first one will be responsible for opening the AppStore page for the app so that the users can update the app. We are going to add it as an extension to <code class=\"language-plaintext highlighter-rouge\">UIApplication</code> and its implementation is in the following snippet:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">extension</span> <span class=\"kt\">UIApplication</span> <span class=\"p\">{</span>\n    <span class=\"kd\">func</span> <span class=\"nf\">openAppStore</span><span class=\"p\">(</span><span class=\"k\">for</span> <span class=\"nv\">appID</span><span class=\"p\">:</span> <span class=\"kt\">String</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">let</span> <span class=\"nv\">appStoreURL</span> <span class=\"o\">=</span> <span class=\"s\">\"https://itunes.apple.com/app/</span><span class=\"se\">\\(</span><span class=\"n\">appID</span><span class=\"se\">)</span><span class=\"s\">\"</span>\n        <span class=\"k\">guard</span> <span class=\"k\">let</span> <span class=\"nv\">url</span> <span class=\"o\">=</span> <span class=\"kt\">URL</span><span class=\"p\">(</span><span class=\"nv\">string</span><span class=\"p\">:</span> <span class=\"n\">appStoreURL</span><span class=\"p\">)</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"kt\">DispatchQueue</span><span class=\"o\">.</span><span class=\"n\">main</span><span class=\"o\">.</span><span class=\"n\">async</span> <span class=\"p\">{</span>\n            <span class=\"k\">if</span> <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"nf\">canOpenURL</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"nf\">open</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">)</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>The second one, will be responsible of creating a <code class=\"language-plaintext highlighter-rouge\">UIAlertController</code> based on the value returned from the <code class=\"language-plaintext highlighter-rouge\">updateStatus</code> method. For this reason, we are going to provide a convenience initializer to the <code class=\"language-plaintext highlighter-rouge\">UIAlertController</code> and in the snippet below you can find the implementation:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">extension</span> <span class=\"kt\">UIAlertController</span> <span class=\"p\">{</span>\n    <span class=\"kd\">convenience</span> <span class=\"nf\">init</span><span class=\"p\">?(</span><span class=\"k\">for</span> <span class=\"nv\">status</span><span class=\"p\">:</span> <span class=\"kt\">AppUpdateManager</span><span class=\"o\">.</span><span class=\"kt\">Status</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"k\">case</span> <span class=\"o\">.</span><span class=\"n\">noUpdate</span> <span class=\"o\">=</span> <span class=\"n\">status</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span> <span class=\"kc\">nil</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"nf\">init</span><span class=\"p\">()</span>\n        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"s\">\"App Update\"</span>\n\n        <span class=\"k\">let</span> <span class=\"nv\">updateNowAction</span> <span class=\"o\">=</span> <span class=\"kt\">UIAlertAction</span><span class=\"p\">(</span><span class=\"nv\">title</span><span class=\"p\">:</span> <span class=\"s\">\"Update now\"</span><span class=\"p\">,</span> <span class=\"nv\">style</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"k\">default</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">_</span> <span class=\"k\">in</span>\n            <span class=\"k\">let</span> <span class=\"nv\">appId</span> <span class=\"o\">=</span> <span class=\"s\">\"idXXXXXXXXXX\"</span> <span class=\"c1\">// Replace with your appId</span>\n            <span class=\"kt\">UIApplication</span><span class=\"o\">.</span><span class=\"n\">shared</span><span class=\"o\">.</span><span class=\"nf\">openAppStore</span><span class=\"p\">(</span><span class=\"nv\">for</span><span class=\"p\">:</span> <span class=\"n\">appId</span><span class=\"p\">)</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"nf\">addAction</span><span class=\"p\">(</span><span class=\"n\">updateNowAction</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"k\">case</span> <span class=\"o\">.</span><span class=\"kd\">required</span> <span class=\"o\">=</span> <span class=\"n\">status</span> <span class=\"p\">{</span>\n            <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"s\">\"You have to update the app.\"</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">case</span> <span class=\"o\">.</span><span class=\"kd\">optional</span> <span class=\"o\">=</span> <span class=\"n\">status</span> <span class=\"p\">{</span>\n            <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"s\">\"There is a new version of the app.\"</span>\n            <span class=\"k\">let</span> <span class=\"nv\">cancelAction</span> <span class=\"o\">=</span> <span class=\"kt\">UIAlertAction</span><span class=\"p\">(</span><span class=\"nv\">title</span><span class=\"p\">:</span> <span class=\"s\">\"Not now\"</span><span class=\"p\">,</span> <span class=\"nv\">style</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">cancel</span><span class=\"p\">)</span>\n            <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"nf\">addAction</span><span class=\"p\">(</span><span class=\"n\">cancelAction</span><span class=\"p\">)</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Now, with everything set up, we can move to one <code class=\"language-plaintext highlighter-rouge\">UIViewController</code> and add the following snippet, to present the alert if an update is available on AppStore:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">bundleId</span> <span class=\"o\">=</span> <span class=\"s\">\"com.example.yourapp\"</span>\n<span class=\"k\">let</span> <span class=\"nv\">appUpdater</span> <span class=\"o\">=</span> <span class=\"kt\">AppUpdateManager</span><span class=\"p\">()</span>\n<span class=\"k\">let</span> <span class=\"nv\">updateStatus</span> <span class=\"o\">=</span> <span class=\"n\">appUpdater</span><span class=\"o\">.</span><span class=\"nf\">updateStatus</span><span class=\"p\">(</span><span class=\"nv\">for</span><span class=\"p\">:</span> <span class=\"n\">bundleId</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"nv\">alertController</span> <span class=\"o\">=</span> <span class=\"kt\">UIAlertController</span><span class=\"p\">(</span><span class=\"nv\">for</span><span class=\"p\">:</span> <span class=\"n\">updateStatus</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"nf\">present</span><span class=\"p\">(</span><span class=\"n\">alertController</span><span class=\"p\">,</span> <span class=\"nv\">animated</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<blockquote>\n  <p>If your app is not yet available on the App Store, you can use the bundleID of another app. Here is <a href=\"https://support.apple.com/guide/mdm/ios-and-ipados-bundle-ids-mdm90f60c1ce/web\">a list of the bundleID of Apple’s apps</a>.</p>\n</blockquote>\n\n<p>All these snippets as well as the implementation of some unit tests can be found on GitHub in this <a href=\"https://gist.github.com/diamantidis/fa7a5d4dce336e5b8f83827cb229fa9c\">gist</a>.</p>\n\n<h2 id=\"result\">Result</h2>\n\n<p>The outcome of this implementation will look like the following screenshots depending on the AppStore’s and your app’s version:</p>\n\n<p><img src=\"https://diamantidis.github.io/assets/app_updates/optional_update.png\" alt=\"Optional Update alert screenshot\" />         <img src=\"https://diamantidis.github.io/assets/app_updates/required_update.png\" alt=\"Required Update alert screenshot\" /></p>\n\n<p>Of course, in your app you could use a different UI component to present the information and maybe follow a different strategy and define your own set of rules on whether the app should present the update prompt or not.</p>\n\n<blockquote>\n  <p>FYI, there is an open-source project named <a href=\"https://github.com/ArtSabintsev/Siren\">Siren</a> which you could alternatively use.</p>\n</blockquote>\n\n<p>As a side note, it seems that Android already offers a solution for <a href=\"https://developer.android.com/guide/playcore/in-app-updates\">in-app-updates</a>, so hopefully, I can see it coming on iOS soon, and then we will not have to force the users to open AppStore to make the update.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>And that’s about it! In this post, we have seen how we can notify the users of an iOS app when a new update is available on the AppStore. First we have seen why it important to act proactively and support such a feature so that it is available by the time we need it and then we have walked through the steps needed to develop such a solution.</p>\n\n<p>I hope that by adding this feature in your app more and more users will move to the latest version.</p>\n\n<p>Thanks for reading this post, I hope you find it useful!\nFeel free to follow me on <a href=\"https://twitter.com/diamantidis_io\">Twitter</a> and share your comments about this post!</p>\n\n",
            "tags": ["Swift","iOS"],
            "image": "https://diamantidis.github.io/assets/socialIcon.png"
        },
        
        {
            "id": "https://diamantidis.github.io/2020/04/05/app-reviews-for-iOS-apps",
            "url": "https://diamantidis.github.io/2020/04/05/app-reviews-for-iOS-apps",
            "title": "Help your user rate and review your iOS app!",
            "date_published": "2020-04-05T04:00:00+00:00",
            
            "date_modified": "2020-04-05T04:00:00+00:00",
            
            "author": {
                "name": "Ioannis Diamantidis",
                "url": "https://diamantidis.github.io"
            },
            "summary": "<p>Nowadays, more and more users rely on ratings and reviews when they are about to make a purchasing decision, whether it is buying products, deciding on a travel destination, etc. And downloading an app from the App Store could not be an exception to this rule. Having a high rating and many reviews can be a decisive factor on user’s decision to download an app.</p>\n\n",
            "content_html": "<p>Nowadays, more and more users rely on ratings and reviews when they are about to make a purchasing decision, whether it is buying products, deciding on a travel destination, etc. And downloading an app from the App Store could not be an exception to this rule. Having a high rating and many reviews can be a decisive factor on user’s decision to download an app.</p>\n\n<p>What are you going to do if you land on the App Store page of an app that seems to fulfill your requirements functionality-wise, but has poor rating and no reviews? Are you going to download it or continue the search, in the hope of finding another app with higher rating and more reviews?</p>\n\n<p>On top of that, it is rumored that the rating and number of reviews play an important role on the ranking of your app on App Store’s search and category results. This could also lead to increased downloads as more and more user will visit your app’s App Store page.</p>\n\n<p>From all the above, it is quite evident how important having a high rating and many reviews is.</p>\n\n<p>Nevertheless, it’s also true that the majority of users who will bother to leave the app and head to the App Store to rate or write a review, are usually the ones who are not satisfied from the app or face an issue while using it.</p>\n\n<p>Contrary, users who have a positive experience while using the app, and who are the ones more likely to leave a high rating and a positive review, will continue using the app but are probably less motivated to make the effort to visit the app’s App Store page and rate the app.</p>\n\n<p>For this reason, it’s our responsibility as developers to guide those users to rate the app and this is going to be the topic of this post.</p>\n\n<h2 id=\"in-app-review-to-the-rescue\">In app review to the rescue</h2>\n\n<p>On <code class=\"language-plaintext highlighter-rouge\">iOS 10.3</code>, Apple has introduced the <a href=\"https://developer.apple.com/documentation/storekit/skstorereviewcontroller\">SKStoreReviewController</a>, which provides an easy and native way that allows users to rate and review your app without having to actually leave the app. This is done by presenting a popup that asks the user to rate the app.</p>\n\n<p>Let’s see how we can add this in an app.</p>\n\n<h2 id=\"strategy\">Strategy</h2>\n\n<p>As we mentioned before, we want to show the review popup to users who has a positive experience using the app. Engagement could be one metric for this, so in this post we are going to implement a strategy to present the popup three weeks after the user has installed the app and only if the user has opened the app at least 3 times. Furthermore, we are going to check the bundle version of the app to make sure that we are not asking the user to review the same version of the app more than once.</p>\n\n<blockquote>\n  <p>One drawback of the <code class=\"language-plaintext highlighter-rouge\">SKStoreReviewController</code> is that it doesn’t support a way of knowing whether the prompt was presented or not. Apple handles this logic and according to the <a href=\"https://developer.apple.com/design/human-interface-guidelines/ios/system-capabilities/ratings-and-reviews#system-rating-and-review-prompts\">documentation</a>, the only thing that we know is that the prompt will be displayed at most 3 times in 365 days.</p>\n</blockquote>\n\n<p>Let’s dive into the implementation!</p>\n\n<h2 id=\"implementation\">Implementation</h2>\n\n<p>First, we are going to create a class named <code class=\"language-plaintext highlighter-rouge\">InAppReviewManager</code> which will be responsible for deciding whether we should trigger the review prompt or not.</p>\n\n<p>Before we focus on the implementation of the <code class=\"language-plaintext highlighter-rouge\">InAppReviewManager</code>, let’s think about the dependencies. We are probably going to need some storing mechanism to save all the required info (date of first open, number of times the user has opened the app, etc) and we should also be able to retrieve the current version of the app.</p>\n\n<p>It would also be great to be able to easily test this class since it is going to contain all the business logic, so ideally it should depend on abstractions instead of concrete classes.</p>\n\n<p>For this reason, we are going to define two protocols (<code class=\"language-plaintext highlighter-rouge\">Storage</code> and <code class=\"language-plaintext highlighter-rouge\">BundleType</code>) and provide the required extensions for <code class=\"language-plaintext highlighter-rouge\">UserDefaults</code> and <code class=\"language-plaintext highlighter-rouge\">Bundle</code> respectively to adhere to those protocols.</p>\n\n<p>The following snippet contains the definition of <code class=\"language-plaintext highlighter-rouge\">Storage</code> as well the conformance of <code class=\"language-plaintext highlighter-rouge\">UserDefaults</code> to it:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">enum</span> <span class=\"kt\">StorageKey</span><span class=\"p\">:</span> <span class=\"kt\">String</span> <span class=\"p\">{</span>\n    <span class=\"k\">case</span> <span class=\"n\">lastVersionPromptedReview</span>\n    <span class=\"k\">case</span> <span class=\"n\">dayOfFirstAction</span>\n    <span class=\"k\">case</span> <span class=\"n\">actionCount</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">protocol</span> <span class=\"kt\">Storage</span> <span class=\"p\">{</span>\n    <span class=\"kd\">func</span> <span class=\"nf\">integer</span><span class=\"p\">(</span><span class=\"n\">forKey</span> <span class=\"nv\">key</span><span class=\"p\">:</span> <span class=\"kt\">StorageKey</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Int</span>\n    <span class=\"kd\">func</span> <span class=\"nf\">set</span><span class=\"p\">(</span><span class=\"n\">_</span> <span class=\"nv\">value</span><span class=\"p\">:</span> <span class=\"kt\">Int</span><span class=\"p\">,</span> <span class=\"n\">forKey</span> <span class=\"nv\">key</span><span class=\"p\">:</span> <span class=\"kt\">StorageKey</span><span class=\"p\">)</span>\n    <span class=\"kd\">func</span> <span class=\"nf\">object</span><span class=\"p\">(</span><span class=\"n\">forKey</span> <span class=\"nv\">key</span><span class=\"p\">:</span> <span class=\"kt\">StorageKey</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Any</span><span class=\"p\">?</span>\n    <span class=\"kd\">func</span> <span class=\"nf\">set</span><span class=\"p\">(</span><span class=\"n\">_</span> <span class=\"nv\">value</span><span class=\"p\">:</span> <span class=\"kt\">NSDate</span><span class=\"p\">,</span> <span class=\"n\">forKey</span> <span class=\"nv\">key</span><span class=\"p\">:</span> <span class=\"kt\">StorageKey</span><span class=\"p\">)</span>\n    <span class=\"kd\">func</span> <span class=\"nf\">string</span><span class=\"p\">(</span><span class=\"n\">forKey</span> <span class=\"nv\">key</span><span class=\"p\">:</span> <span class=\"kt\">StorageKey</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">String</span><span class=\"p\">?</span>\n    <span class=\"kd\">func</span> <span class=\"nf\">set</span><span class=\"p\">(</span><span class=\"n\">_</span> <span class=\"nv\">value</span><span class=\"p\">:</span> <span class=\"kt\">String</span><span class=\"p\">,</span> <span class=\"n\">forKey</span> <span class=\"nv\">key</span><span class=\"p\">:</span> <span class=\"kt\">StorageKey</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">extension</span> <span class=\"kt\">UserDefaults</span><span class=\"p\">:</span> <span class=\"kt\">Storage</span> <span class=\"p\">{</span>\n    <span class=\"kd\">func</span> <span class=\"nf\">integer</span><span class=\"p\">(</span><span class=\"n\">forKey</span> <span class=\"nv\">key</span><span class=\"p\">:</span> <span class=\"kt\">StorageKey</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Int</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"nf\">integer</span><span class=\"p\">(</span><span class=\"nv\">forKey</span><span class=\"p\">:</span> <span class=\"n\">key</span><span class=\"o\">.</span><span class=\"n\">rawValue</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kd\">func</span> <span class=\"nf\">set</span><span class=\"p\">(</span><span class=\"n\">_</span> <span class=\"nv\">value</span><span class=\"p\">:</span> <span class=\"kt\">Int</span><span class=\"p\">,</span> <span class=\"n\">forKey</span> <span class=\"nv\">key</span><span class=\"p\">:</span> <span class=\"kt\">StorageKey</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"nf\">set</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nv\">forKey</span><span class=\"p\">:</span> <span class=\"n\">key</span><span class=\"o\">.</span><span class=\"n\">rawValue</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kd\">func</span> <span class=\"nf\">object</span><span class=\"p\">(</span><span class=\"n\">forKey</span> <span class=\"nv\">key</span><span class=\"p\">:</span> <span class=\"kt\">StorageKey</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Any</span><span class=\"p\">?</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"nf\">object</span><span class=\"p\">(</span><span class=\"nv\">forKey</span><span class=\"p\">:</span> <span class=\"n\">key</span><span class=\"o\">.</span><span class=\"n\">rawValue</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kd\">func</span> <span class=\"nf\">set</span><span class=\"p\">(</span><span class=\"n\">_</span> <span class=\"nv\">value</span><span class=\"p\">:</span> <span class=\"kt\">NSDate</span><span class=\"p\">,</span> <span class=\"n\">forKey</span> <span class=\"nv\">key</span><span class=\"p\">:</span> <span class=\"kt\">StorageKey</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"nf\">set</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nv\">forKey</span><span class=\"p\">:</span> <span class=\"n\">key</span><span class=\"o\">.</span><span class=\"n\">rawValue</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kd\">func</span> <span class=\"nf\">string</span><span class=\"p\">(</span><span class=\"n\">forKey</span> <span class=\"nv\">key</span><span class=\"p\">:</span> <span class=\"kt\">StorageKey</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">String</span><span class=\"p\">?</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"nf\">string</span><span class=\"p\">(</span><span class=\"nv\">forKey</span><span class=\"p\">:</span> <span class=\"n\">key</span><span class=\"o\">.</span><span class=\"n\">rawValue</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kd\">func</span> <span class=\"nf\">set</span><span class=\"p\">(</span><span class=\"n\">_</span> <span class=\"nv\">value</span><span class=\"p\">:</span> <span class=\"kt\">String</span><span class=\"p\">,</span> <span class=\"n\">forKey</span> <span class=\"nv\">key</span><span class=\"p\">:</span> <span class=\"kt\">StorageKey</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"nf\">set</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nv\">forKey</span><span class=\"p\">:</span> <span class=\"n\">key</span><span class=\"o\">.</span><span class=\"n\">rawValue</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Similarly, in the next snippet, you can find the definition of <code class=\"language-plaintext highlighter-rouge\">BundleType</code> and the conformance of <code class=\"language-plaintext highlighter-rouge\">Bundle</code> to it:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">protocol</span> <span class=\"kt\">BundleType</span> <span class=\"p\">{</span>\n    <span class=\"kd\">func</span> <span class=\"nf\">object</span><span class=\"p\">(</span><span class=\"n\">forInfoDictionaryKey</span> <span class=\"nv\">key</span><span class=\"p\">:</span> <span class=\"kt\">String</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Any</span><span class=\"p\">?</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">extension</span> <span class=\"kt\">Bundle</span><span class=\"p\">:</span> <span class=\"kt\">BundleType</span> <span class=\"p\">{}</span>\n</code></pre></div></div>\n\n<p>Now, we can return to the <code class=\"language-plaintext highlighter-rouge\">InAppReviewManager</code> class and provide the implementation, which can be found in the snippet below:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"kt\">InAppReviewManager</span> <span class=\"p\">{</span>\n\n    <span class=\"c1\">// MARK: - Initializers</span>\n    <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"nv\">storage</span><span class=\"p\">:</span> <span class=\"kt\">Storage</span> <span class=\"o\">=</span> <span class=\"kt\">UserDefaults</span><span class=\"o\">.</span><span class=\"n\">standard</span><span class=\"p\">,</span> <span class=\"nv\">bundle</span><span class=\"p\">:</span> <span class=\"kt\">BundleType</span> <span class=\"o\">=</span> <span class=\"kt\">Bundle</span><span class=\"o\">.</span><span class=\"n\">main</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">storage</span> <span class=\"o\">=</span> <span class=\"n\">storage</span>\n        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">bundle</span> <span class=\"o\">=</span> <span class=\"n\">bundle</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\">// MARK: - Public methods</span>\n    <span class=\"kd\">func</span> <span class=\"nf\">shouldAskForReview</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Bool</span> <span class=\"p\">{</span>\n\n        <span class=\"c1\">// Count the number of actions</span>\n        <span class=\"k\">var</span> <span class=\"nv\">actionCount</span> <span class=\"o\">=</span> <span class=\"n\">storage</span><span class=\"o\">.</span><span class=\"nf\">integer</span><span class=\"p\">(</span><span class=\"nv\">forKey</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">actionCount</span><span class=\"p\">)</span>\n        <span class=\"n\">actionCount</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n        <span class=\"n\">storage</span><span class=\"o\">.</span><span class=\"nf\">set</span><span class=\"p\">(</span><span class=\"n\">actionCount</span><span class=\"p\">,</span> <span class=\"nv\">forKey</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">actionCount</span><span class=\"p\">)</span>\n\n        <span class=\"c1\">// Store the day of first action</span>\n        <span class=\"k\">let</span> <span class=\"nv\">dateOfFirstActionObj</span> <span class=\"o\">=</span> <span class=\"n\">storage</span><span class=\"o\">.</span><span class=\"nf\">object</span><span class=\"p\">(</span><span class=\"nv\">forKey</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">dayOfFirstAction</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">dateOfFirstActionObj</span> <span class=\"o\">==</span> <span class=\"kc\">nil</span> <span class=\"p\">{</span>\n            <span class=\"n\">storage</span><span class=\"o\">.</span><span class=\"nf\">set</span><span class=\"p\">(</span><span class=\"kt\">NSDate</span><span class=\"p\">(),</span> <span class=\"nv\">forKey</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">dayOfFirstAction</span><span class=\"p\">)</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"c1\">// Calculate if there have been three weeks since the first action</span>\n        <span class=\"k\">let</span> <span class=\"nv\">threeWeeksInSeconds</span><span class=\"p\">:</span> <span class=\"kt\">TimeInterval</span> <span class=\"o\">=</span> <span class=\"mi\">3</span> <span class=\"o\">*</span> <span class=\"mi\">7</span> <span class=\"o\">*</span> <span class=\"mi\">24</span> <span class=\"o\">*</span> <span class=\"mi\">60</span> <span class=\"o\">*</span> <span class=\"mi\">60</span>\n        <span class=\"k\">let</span> <span class=\"nv\">threeWeeksAgo</span> <span class=\"o\">=</span> <span class=\"kt\">Date</span><span class=\"p\">(</span><span class=\"nv\">timeIntervalSinceNow</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"n\">threeWeeksInSeconds</span><span class=\"p\">)</span>\n\n        <span class=\"k\">guard</span> <span class=\"k\">let</span> <span class=\"nv\">dateOfFirstAction</span> <span class=\"o\">=</span> <span class=\"n\">dateOfFirstActionObj</span> <span class=\"k\">as?</span> <span class=\"kt\">Date</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span> <span class=\"kc\">false</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"k\">let</span> <span class=\"nv\">comparisonResult</span> <span class=\"o\">=</span> <span class=\"n\">dateOfFirstAction</span><span class=\"o\">.</span><span class=\"nf\">compare</span><span class=\"p\">(</span><span class=\"n\">threeWeeksAgo</span><span class=\"p\">)</span>\n\n        <span class=\"c1\">// Check if user has reviewed this version</span>\n        <span class=\"k\">let</span> <span class=\"nv\">bundleVersionKey</span> <span class=\"o\">=</span> <span class=\"n\">kCFBundleVersionKey</span> <span class=\"k\">as</span> <span class=\"kt\">String</span>\n        <span class=\"k\">guard</span> <span class=\"k\">let</span> <span class=\"nv\">bundleVersion</span> <span class=\"o\">=</span> <span class=\"n\">bundle</span><span class=\"o\">.</span><span class=\"nf\">object</span><span class=\"p\">(</span><span class=\"nv\">forInfoDictionaryKey</span><span class=\"p\">:</span> <span class=\"n\">bundleVersionKey</span><span class=\"p\">)</span> <span class=\"k\">as?</span> <span class=\"kt\">String</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span> <span class=\"kc\">false</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">let</span> <span class=\"nv\">lastVersion</span> <span class=\"o\">=</span> <span class=\"n\">storage</span><span class=\"o\">.</span><span class=\"nf\">string</span><span class=\"p\">(</span><span class=\"nv\">forKey</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">lastVersionPromptedReview</span><span class=\"p\">)</span>\n\n        <span class=\"k\">guard</span> <span class=\"k\">case</span> <span class=\"o\">.</span><span class=\"n\">orderedAscending</span> <span class=\"o\">=</span> <span class=\"n\">comparisonResult</span><span class=\"p\">,</span> <span class=\"n\">actionCount</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">lastVersion</span> <span class=\"o\">==</span> <span class=\"kc\">nil</span> <span class=\"o\">||</span> <span class=\"n\">lastVersion</span> <span class=\"o\">!=</span> <span class=\"n\">bundleVersion</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span> <span class=\"kc\">false</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"n\">storage</span><span class=\"o\">.</span><span class=\"nf\">set</span><span class=\"p\">(</span><span class=\"n\">bundleVersion</span><span class=\"p\">,</span> <span class=\"nv\">forKey</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">lastVersionPromptedReview</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"kc\">true</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\">// MARK: - Private properties</span>\n    <span class=\"kd\">private</span> <span class=\"k\">let</span> <span class=\"nv\">storage</span><span class=\"p\">:</span> <span class=\"kt\">Storage</span>\n    <span class=\"kd\">private</span> <span class=\"k\">let</span> <span class=\"nv\">bundle</span><span class=\"p\">:</span> <span class=\"kt\">BundleType</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>In this snippet, we are using the previously defined protocols to inject the dependencies through the initializer.</p>\n\n<p>Then, we have the <code class=\"language-plaintext highlighter-rouge\">shouldAskForReview()</code> method which is responsible to decide whether we should ask the user to review the app or not.</p>\n\n<p>In the body of this method, we first retrieve the action count. In our case, this count represents the times the user has opened the app.</p>\n\n<p>Then, we retrieve the date of the first trigger of the action. If the value of the variable is <code class=\"language-plaintext highlighter-rouge\">nil</code>, it means that it’s the first open, so we are saving the current date.</p>\n\n<blockquote>\n  <p>I am using <code class=\"language-plaintext highlighter-rouge\">NSDate</code> because it’s easier to manipulate the time and time travel using swizzling.</p>\n</blockquote>\n\n<p>As we move on, we are calculating what was the day three weeks ago and compare that with the date of the first trigger of the action.</p>\n\n<p>After that, we are fetching the version of the current app as well as the version of the app the time we last triggered the review.</p>\n\n<p>Finally, we are checking if all the requirements are met, and if they are, we are updating the version of the app in the storage and return <code class=\"language-plaintext highlighter-rouge\">true</code> to the caller of the function. Otherwise, we return <code class=\"language-plaintext highlighter-rouge\">false</code>.</p>\n\n<blockquote>\n  <p>As I pointed before, Apple will show the review popup only 3 times per 365 days, so the above mention implementation will work just fine. Alternatively, you can enrich the logic and in addition to the existing checks, you can add another one for the number of days that has passed since the last time that we have trigger the review popup.</p>\n</blockquote>\n\n<p>Now we are ready to use the <code class=\"language-plaintext highlighter-rouge\">InAppReviewManager</code> like this:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">manager</span> <span class=\"o\">=</span> <span class=\"kt\">InAppReviewManager</span><span class=\"p\">()</span>\n<span class=\"k\">if</span> <span class=\"n\">manager</span><span class=\"o\">.</span><span class=\"nf\">shouldAskForReview</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"kt\">DispatchQueue</span><span class=\"o\">.</span><span class=\"n\">main</span><span class=\"o\">.</span><span class=\"nf\">asyncAfter</span><span class=\"p\">(</span><span class=\"nv\">deadline</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"nf\">now</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"o\">.</span><span class=\"nf\">seconds</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n        <span class=\"kt\">SKStoreReviewController</span><span class=\"o\">.</span><span class=\"nf\">requestReview</span><span class=\"p\">()</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<blockquote>\n  <p>To be able to use <code class=\"language-plaintext highlighter-rouge\">SKStoreReviewController</code>, you will have to add <code class=\"language-plaintext highlighter-rouge\">import StoreKit</code>.</p>\n</blockquote>\n\n<p>As a result, if you run the app and satisfy the requirements, the app will show the review popup, which looks like the following screenshots:</p>\n\n<p><img src=\"https://diamantidis.github.io/assets/appreviews/review_without_selection.png\" alt=\"Review without star selection screenshot\" />         <img src=\"https://diamantidis.github.io/assets/appreviews/review_with_selection.png\" alt=\"Review with star selection screenshot\" /></p>\n\n<blockquote>\n  <p>When in development, you won’t be able to review the app. The prompt will appear but you will not be able to submit the review.</p>\n</blockquote>\n\n<p>These snippets as well as the implementation of some unit tests can be found on GitHub in this <a href=\"https://gist.github.com/diamantidis/7c615a886acb04b87428a81f9c1029b8\">gist</a>.</p>\n\n<blockquote>\n  <p>There is an option in Settings where a user can disable In-App Ratings and Reviews. This option is not app specific and it affects all the apps.</p>\n</blockquote>\n\n<h2 id=\"other-options\">Other options</h2>\n\n<p>Though <code class=\"language-plaintext highlighter-rouge\">SKStoreReviewController</code> is a great solution, there are certain scenarios where it is not suitable.</p>\n\n<p>What if you have to still support versions older than <code class=\"language-plaintext highlighter-rouge\">iOS 10.3</code>? Or you want to have more control over when you ask the users to rate the app? Maybe you want to have a button on the settings to ask the user to review the app.</p>\n\n<p>Fortunately, there is a solution. You could lead the users to the iTunes and let them leave a review there. Of course, contrary to <code class=\"language-plaintext highlighter-rouge\">SKStoreReviewController</code>, this solution requires the user to leave the app, and this is one of the drawbacks that we have to take into consideration.</p>\n\n<p>iTunes offers a URL that opens the <code class=\"language-plaintext highlighter-rouge\">Write a Review</code> modal automatically and this is what we can use. The format of the url is the following, where appID is the appID of your app:</p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>https://itunes.apple.com/app/id{appID}?action=write-review\n</code></pre></div></div>\n\n<p>In the following snippet, you can see an implementation:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">private</span> <span class=\"kd\">func</span> <span class=\"nf\">showItunesReview</span><span class=\"p\">(</span><span class=\"k\">for</span> <span class=\"nv\">appID</span><span class=\"p\">:</span> <span class=\"kt\">String</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">let</span> <span class=\"nv\">appURL</span> <span class=\"o\">=</span> <span class=\"s\">\"https://itunes.apple.com/app/</span><span class=\"se\">\\(</span><span class=\"n\">appID</span><span class=\"se\">)</span><span class=\"s\">\"</span>\n\n    <span class=\"k\">var</span> <span class=\"nv\">components</span> <span class=\"o\">=</span> <span class=\"kt\">URLComponents</span><span class=\"p\">(</span><span class=\"nv\">string</span><span class=\"p\">:</span> <span class=\"n\">appURL</span><span class=\"p\">)</span>\n\n    <span class=\"n\">components</span><span class=\"p\">?</span><span class=\"o\">.</span><span class=\"n\">queryItems</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"kt\">URLQueryItem</span><span class=\"p\">(</span><span class=\"nv\">name</span><span class=\"p\">:</span> <span class=\"s\">\"action\"</span><span class=\"p\">,</span> <span class=\"nv\">value</span><span class=\"p\">:</span> <span class=\"s\">\"write-review\"</span><span class=\"p\">)</span>\n    <span class=\"p\">]</span>\n\n    <span class=\"k\">guard</span> <span class=\"k\">let</span> <span class=\"nv\">url</span> <span class=\"o\">=</span> <span class=\"n\">components</span><span class=\"p\">?</span><span class=\"o\">.</span><span class=\"n\">url</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n      <span class=\"k\">return</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">if</span> <span class=\"kt\">UIApplication</span><span class=\"o\">.</span><span class=\"n\">shared</span><span class=\"o\">.</span><span class=\"nf\">canOpenURL</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kt\">UIApplication</span><span class=\"o\">.</span><span class=\"n\">shared</span><span class=\"o\">.</span><span class=\"nf\">open</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>As a result, when this function is called, the App Store app will open, showing the screen in the following screenshot.</p>\n\n<p><img src=\"https://diamantidis.github.io/assets/appreviews/app_store_review.png\" alt=\"App Store &quot;write a review&quot; screenshot\" /></p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>And that’s about it! In this post, I initially stressed the importance of ratings and reviews for any iOS app.</p>\n\n<p>Then, we walked through the implementations of two different ways we can use to ask users to rate the app and write a review. \nIn the first one, I am making use of <code class=\"language-plaintext highlighter-rouge\">SKStoreReviewController</code> to trigger the in-app-review prompt, while in the second I am using the <code class=\"language-plaintext highlighter-rouge\">action</code> query parameter to open the review page on App Store.</p>\n\n<p>Making it easier for your user to rate the app and with the right strategy in place (when, to which users), it will most likely have a positive impact on the App Store presence of your app and it is something I would totally recommend using.</p>\n\n<p>Thanks for reading this post, I hope you find this post useful!\nFeel free to reach out to me on <a href=\"https://twitter.com/diamantidis_io\">Twitter</a> and share your comments about this post!</p>\n\n",
            "tags": ["Swift","iOS"],
            "image": "https://diamantidis.github.io/assets/socialIcon.png"
        },
        
        {
            "id": "https://diamantidis.github.io/2020/03/28/introduction-to-open-source-licenses",
            "url": "https://diamantidis.github.io/2020/03/28/introduction-to-open-source-licenses",
            "title": "A brief introduction to open source licenses",
            "date_published": "2020-03-28T04:00:00+00:00",
            
            "date_modified": "2020-03-28T04:00:00+00:00",
            
            "author": {
                "name": "Ioannis Diamantidis",
                "url": "https://diamantidis.github.io"
            },
            "summary": "<p>As you may have noticed from the URL, I am using <a href=\"https://pages.github.com/\">GitHub Pages</a> to host this blog, which means that the whole code is open-sourced. Amongst other things, and one thing that I totally missed until recently, is that an open source repository should have a LICENSE.</p>\n\n",
            "content_html": "<p>As you may have noticed from the URL, I am using <a href=\"https://pages.github.com/\">GitHub Pages</a> to host this blog, which means that the whole code is open-sourced. Amongst other things, and one thing that I totally missed until recently, is that an open source repository should have a LICENSE.</p>\n\n<p>I wanted to fix this but the problem was that I had no clue what each license means and how to choose one for my repository. As a result, I started to search and read more about Open Source licenses and in this post, I will try to document my learnings, in an attempt to help others who have the same problem and also have a post that could act as a future reference for myself.</p>\n\n<blockquote>\n  <p>Disclaimer: I am not a lawyer, so handle the following with care. If I have any error, misunderstanding or you have any suggestion, you can either contact me on <a href=\"https://twitter.com/diamantidis_io\">Twitter</a>, fill an <a href=\"https://github.com/diamantidis/diamantidis.github.io/issues/new\">issue</a> on GitHub or fork the <a href=\"https://github.com/diamantidis/diamantidis.github.io\">project</a> and submit a pull request against the <a href=\"https://github.com/diamantidis/diamantidis.github.io/tree/source\">source</a> branch. :smiley:</p>\n</blockquote>\n\n<h2 id=\"introduction\">Introduction</h2>\n\n<p>Before we dive deeper into open source licenses, let’s introduce some background and terminology starting from the <code class=\"language-plaintext highlighter-rouge\">Open Source Initiative</code>.</p>\n\n<p><a href=\"https://opensource.org/\">Open Source Initiative (OSI)</a> is a non-profit organization that promotes the use of open source and maintains the <a href=\"https://opensource.org/osd\">Open Source Definition</a>, which is a set of 10 criterias that any open source project should comply to.</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">Open Source Initiative</code> uses the following definition for <a href=\"https://opensource.org/licenses\">open source licenses</a>:</p>\n\n<blockquote>\n  <p>Open source licenses are licenses that comply with the Open Source Definition — in brief, they allow software to be freely used, modified, and shared.</p>\n</blockquote>\n\n<p>As we mention earlier, the <code class=\"language-plaintext highlighter-rouge\">Open Source Definition</code> defines a list of requirements that open source projects should adhere to, and some of those are related with the license, like the following:</p>\n\n<ul>\n  <li>Distribution of license</li>\n  <li>License must not be specific to a product</li>\n  <li>License must not restrict other software</li>\n  <li>License must be technology-neutral</li>\n</ul>\n\n<p>From my understanding and in an attempt to rephrase it, open source licenses are setting the rules required for open source to work. If a repository doesn’t explicitly specify the license, it means that you don’t have any legal right to use it, modify or share the code without the consent of the author of the repository. And that’s why having a license is important.</p>\n\n<h2 id=\"copyleft-and-permissive\">Copyleft and Permissive</h2>\n\n<p>Before we start describing the details for each license, it is worth mentioning that licenses can be classified in two big categories: <code class=\"language-plaintext highlighter-rouge\">copyleft</code> and <code class=\"language-plaintext highlighter-rouge\">non-copyleft</code> or <code class=\"language-plaintext highlighter-rouge\">permissive</code>.</p>\n\n<p>Licenses under the first category allow derivative works but require them to use the same license as the original work. So, for example, if you write some software and it is released under a <code class=\"language-plaintext highlighter-rouge\">copyleft</code> license, and someone else wants to modify your software and distribute the modified version, then this modified version must have the same license as your software. For more info about <code class=\"language-plaintext highlighter-rouge\">copyleft</code>, you can refer to <a href=\"https://opensource.org/faq#copyleft\">OSI’s FAQ</a>.</p>\n\n<p>Contrary, a permissive open source license allows the derivative work to use and be distributed under another license, open or proprietary.</p>\n\n<p>Depending on the preferences and the goals of the owner of the project, each category has its own advantages and drawbacks. Due to that, there are examples of both categories amongst the most widely used licenses. Let’s try to take a look on a few of them.</p>\n\n<h2 id=\"licenses\">Licenses</h2>\n\n<h3 id=\"gnu-general-public-license\"><a href=\"https://www.gnu.org/licenses/gpl-3.0.html\">GNU General Public License</a></h3>\n<p>The GNU General Public License(GNU GPL) is a series of <code class=\"language-plaintext highlighter-rouge\">copyleft</code> licenses and probably it is the most popular example of this kind. \nIt’s quite restrictive in the sense that it doesn’t allow to build commercial software on top of open source software.</p>\n\n<p>It comes in three versions and the most widely used are the <code class=\"language-plaintext highlighter-rouge\">GPLv3</code> and the <code class=\"language-plaintext highlighter-rouge\">GPLv2</code>, with the main difference being the addition of a clause on patent grants on <code class=\"language-plaintext highlighter-rouge\">GPLv3</code>. Some popular projects using a GNU General Public License are <code class=\"language-plaintext highlighter-rouge\">Bash</code>(GPLv3) and <code class=\"language-plaintext highlighter-rouge\">Linux</code>(GPLv2).</p>\n\n<blockquote>\n  <p>TIL, <a href=\"https://support.apple.com/en-ca/HT208050\">Apple’s decision</a> to drop <code class=\"language-plaintext highlighter-rouge\">Bash</code> in favor of <code class=\"language-plaintext highlighter-rouge\">zsh</code>, amongst others, maybe has something to do with Bash being licensed under GPLv3. Interestingly, though Bash has evolved a lot over the last years, Apple was stuck in version <code class=\"language-plaintext highlighter-rouge\">3.2.*</code>, released in 2007, because after that version Bash changed the license from <code class=\"language-plaintext highlighter-rouge\">GPLv2</code> to <code class=\"language-plaintext highlighter-rouge\">GPLv3</code>.</p>\n</blockquote>\n\n<h3 id=\"apache-license-20\"><a href=\"https://www.apache.org/licenses/LICENSE-2.0\">Apache License 2.0</a></h3>\n\n<p>Apache License is a permissive license written by the <a href=\"https://www.apache.org/\">Apache Software Foundation(ASF)</a>.</p>\n\n<p>It allows you to distribute the modified parts under any license, but you are required to release all the unmodified part under the license of the initial project (in that case the Apache License). Also, if the initial project contains a “NOTICE” file, any derivative project must include a copy of this file. Lastly, similarly to <code class=\"language-plaintext highlighter-rouge\">GPLv3</code>, it has a specific clause to address patent rights.</p>\n\n<p>Some popular projects using Apache License 2.0 are Swift, Android and most of the <a href=\"https://www.apache.org/\">Apache Software Foundation(ASF)</a> software.</p>\n\n<h3 id=\"berkeley-software-distribution-bsd-licenses\"><a href=\"https://en.wikipedia.org/wiki/BSD_licenses\">Berkeley Software Distribution (BSD) licenses</a></h3>\n\n<p>BSD licenses are also a series of permissive licenses like the <a href=\"https://www.apache.org/licenses/LICENSE-2.0\">Apache License 2.0</a>. \nThere are 4 versions and the original one was released containing 4-clauses. Then it came the 3-clause license or the <code class=\"language-plaintext highlighter-rouge\">Modified BSD License</code>, with the difference being the removal of the advertising clause which required that:</p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>All advertising materials mentioning features or use of this software must display the following acknowledgement:\nThis product includes software developed by the &lt;organization&gt;.\n</code></pre></div></div>\n\n<p>Another version is the 2-clause license or the <code class=\"language-plaintext highlighter-rouge\">FreeBSD License</code>, due to its usage in the FreeBSB operating system. The difference between the 3-clause and this license is the removal of the non-endorsement clause which states that:</p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Neither the name of the &lt;organization&gt; nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n</code></pre></div></div>\n\n<p>Finally, there is the 0-clause license or the <code class=\"language-plaintext highlighter-rouge\">Zero Clause BSD</code>, which goes a step further and omits the clauses about the requirement to include the copyright notice, license text, or disclaimer in either source or binary forms.</p>\n\n<p>A popular project that is using a BSD license and more specifically the 3-clause version is Go.</p>\n\n<p>Another popular project that was using a BSD license was React, until <a href=\"https://engineering.fb.com/web/relicensing-react-jest-flow-and-immutable-js/\">it was relicensed under the MIT license in 2017</a>. React was initially licensed under the 3-clause BSD plus a patent clause and if you are interested, <a href=\"https://github.com/facebook/react/commit/b765fb25ebc6e53bb8de2496d2828d9d01c2774b\">here is the commit with the change of the license</a>.</p>\n\n<h3 id=\"mit-license\"><a href=\"https://en.wikipedia.org/wiki/MIT_License\">MIT License</a></h3>\n\n<p>As mentioned earlier, React is currently licensed under the MIT license. This license is a short, permissive license and basically it allows the reuse as a proprietary software, with the only requirement to keep a copy of the license and the copyright notice. Alternatively, the software can be relicensed under a different license to avoid having to comply to this requirement.</p>\n\n<p>MIT license is one of the most used license (if not the most) in the open source world, and a lot of popular projects are using it. \nFor example, React, Ruby on Rails, jQuery, Angular.js and Bootstrap are some of the projects licensed under the MIT license</p>\n\n<p>Due to its simplicity, openness and popularity, the MIT license is the one that I have decided to go for the repository of this blog.</p>\n\n<p>Now, let’s see how we can add a license in case we don’t have in a GitHub repository.</p>\n\n<h2 id=\"how-to-add-a-license-on-a-github-repository\">How to add a license on a GitHub repository</h2>\n\n<p>Nowadays, adding a license on a GitHub repository is an easy process.</p>\n\n<p>First of all, navigate to the main screen of your project and click on the “Create new file” button as shown in the following screenshot.</p>\n\n<p><img src=\"https://diamantidis.github.io/assets/license/create_new_file.png\" alt=\"Create new file screenshot\" /></p>\n\n<p>You will get redirected to a new screen. There, you will be prompted to enter a file name, where you should type the name <code class=\"language-plaintext highlighter-rouge\">LICENSE</code>.</p>\n\n<p><img src=\"https://diamantidis.github.io/assets/license/file_name.png\" alt=\"File name screenshot\" /></p>\n\n<p>As you can see from the above screenshot, on the right side of the screen, a button with a label “Choose a license template” will appear. Click on this button and you are going to be redirected to a new screen which will have a list of license to choose from.</p>\n\n<p><img src=\"https://diamantidis.github.io/assets/license/license_list.png\" alt=\"License name screenshot\" /></p>\n\n<p>Select a license from this list and then check the form that appears on the right side of the screen to fill all the information needed, like the full name of the owner and the year.</p>\n\n<p><img src=\"https://diamantidis.github.io/assets/license/license_fields.png\" alt=\"License fields screenshot\" /></p>\n\n<p>After that, you can press the “Review and submit” button.</p>\n\n<p>Then add a commit message and choose from the options if you want to commit directly to the default branch or create a new branch and start a pull request.</p>\n\n<p><img src=\"https://diamantidis.github.io/assets/license/license_commit_name.png\" alt=\"License commit name screenshot\" /></p>\n\n<p>Lastly, when you are ready, press the “Commit new file” button and you are good to go.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>And that’s about it! In this post, we have examined some terminology related to open-source licenses such as the <code class=\"language-plaintext highlighter-rouge\">Open Source Initiative</code>, the <code class=\"language-plaintext highlighter-rouge\">Open Source Definition</code> and what is the differences between a <code class=\"language-plaintext highlighter-rouge\">copyleft</code> and a <code class=\"language-plaintext highlighter-rouge\">permissive</code> license. Then, we learn some basic information about the most used <code class=\"language-plaintext highlighter-rouge\">copyleft</code> and <code class=\"language-plaintext highlighter-rouge\">permissive</code> licenses. Finally, we have enumerated the steps needed to add a <code class=\"language-plaintext highlighter-rouge\">LICENSE</code> on a <code class=\"language-plaintext highlighter-rouge\">GitHub</code> repository.</p>\n\n<p>Definitely, after writing this post, I now acknowledge why it is important to have one license in every repository and what are the differences between the licenses, which is quite useful when the time comes to choose one for your repository.</p>\n\n<p>Thanks for reading, I hope you find this post useful too!\nFeel free to reach out to me on <a href=\"https://twitter.com/diamantidis_io\">Twitter</a> and share your comments about this post!</p>\n\n",
            "tags": ["Open Source","Licenses"],
            "image": "https://diamantidis.github.io/assets/socialIcon.png"
        },
        
        {
            "id": "https://diamantidis.github.io/2020/02/16/broadcast-and-scan-nearby-devices-using-corebluetooth",
            "url": "https://diamantidis.github.io/2020/02/16/broadcast-and-scan-nearby-devices-using-corebluetooth",
            "title": "Scan and broadcast to nearby devices with Core Bluetooth",
            "date_published": "2020-02-16T04:00:00+00:00",
            
            "date_modified": "2020-02-16T04:00:00+00:00",
            
            "author": {
                "name": "Ioannis Diamantidis",
                "url": "https://diamantidis.github.io"
            },
            "summary": "<p>The topic of this post is about Bluetooth and how we can use it in our applications.</p>\n\n",
            "content_html": "<p>The topic of this post is about Bluetooth and how we can use it in our applications.</p>\n\n<p>Bluetooth technology can be used in a variety of ways, and in this post I am going to focus on how we can make our device broadcast its presence to nearby devices, and also how we can scan for nearby devices that are running our app.</p>\n\n<p>In order to implement this app, we are going to use <a href=\"https://developer.apple.com/documentation/corebluetooth\"><code class=\"language-plaintext highlighter-rouge\">Core Bluetooth</code></a>, a framework to communicate between BLE devices provided by Apple.</p>\n\n<p>Long story short, in this article, I am going to create a simple app to demonstrate how to use <code class=\"language-plaintext highlighter-rouge\">Core Bluetooth</code> to implement the above mentioned scenario. The app will consists of a <code class=\"language-plaintext highlighter-rouge\">UITextField</code>, where the user will enter the name for the device and two instances of <code class=\"language-plaintext highlighter-rouge\">UIButton</code>. The one button will act as a trigger to start broadcasting, while the other will start the process of scanning other nearby devices.</p>\n\n<p><img src=\"https://diamantidis.github.io/assets/corebluetooth/sample_app.png\" alt=\"Sample app screenshot\" /></p>\n\n<h2 id=\"implementation\">Implementation</h2>\n\n<p>Before we dig deeper to the implementation, let’s take a look on some terminology. A BLE(Bluetooth Low Energy) device can be categorized into two roles: <code class=\"language-plaintext highlighter-rouge\">peripheral</code> and <code class=\"language-plaintext highlighter-rouge\">central</code>. A device acting as a peripheral advertises its presence, whereas a device acting as a central listens to these advertising packets. So in our case, we want our application to act both as a peripheral and a central.</p>\n\n<p>With separation of concerns in mind, we are going to create a class that will handle the logic of broadcasting and scanning for devices using <code class=\"language-plaintext highlighter-rouge\">CoreBluetooth</code>, and then we will see how we can use this class in a Catalyst application.</p>\n\n<p>Before we jump to the actual implementation, let’s take some time to think about the desired behavior of this class and define the corresponding <code class=\"language-plaintext highlighter-rouge\">protocol</code>.</p>\n\n<p>First of all, we are going to need two functions that will be responsible for the initialization of the advertising and the scanning process. For the advertising one, we need to pass a <code class=\"language-plaintext highlighter-rouge\">String</code> as a parameter, which is going to be used as the name of our device. Then, we have to somehow notify the uses of this class when a new device is discover. Maybe for this, we can use a delegate with a function that will be called once a new device is found and a hash map to store the peripherals.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">protocol</span> <span class=\"kt\">BluetoothManagerDelegate</span><span class=\"p\">:</span> <span class=\"kt\">AnyObject</span> <span class=\"p\">{</span>\n    <span class=\"kd\">func</span> <span class=\"nf\">peripheralsDidUpdate</span><span class=\"p\">()</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">protocol</span> <span class=\"kt\">BluetoothManager</span> <span class=\"p\">{</span>\n    <span class=\"k\">var</span> <span class=\"nv\">peripherals</span><span class=\"p\">:</span> <span class=\"kt\">Dictionary</span><span class=\"o\">&lt;</span><span class=\"kt\">UUID</span><span class=\"p\">,</span> <span class=\"kt\">CBPeripheral</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span> <span class=\"k\">get</span> <span class=\"p\">}</span>\n    <span class=\"k\">var</span> <span class=\"nv\">delegate</span><span class=\"p\">:</span> <span class=\"kt\">BluetoothManagerDelegate</span><span class=\"p\">?</span> <span class=\"p\">{</span> <span class=\"k\">get</span> <span class=\"k\">set</span> <span class=\"p\">}</span>\n    <span class=\"kd\">func</span> <span class=\"nf\">startAdvertising</span><span class=\"p\">(</span><span class=\"n\">with</span> <span class=\"nv\">name</span><span class=\"p\">:</span> <span class=\"kt\">String</span><span class=\"p\">)</span>\n    <span class=\"kd\">func</span> <span class=\"nf\">startScanning</span><span class=\"p\">()</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Now that we have our protocol ready, we can move on to the actual implementation. Let’s create a new class named <code class=\"language-plaintext highlighter-rouge\">CoreBluetoothManager</code>. This class will conform to the <code class=\"language-plaintext highlighter-rouge\">BluetoothManager</code> protocol and will have the following content:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"kt\">CoreBluetoothManager</span><span class=\"p\">:</span> <span class=\"kt\">NSObject</span><span class=\"p\">,</span> <span class=\"kt\">BluetoothManager</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// MARK: - Public properties</span>\n    <span class=\"k\">weak</span> <span class=\"k\">var</span> <span class=\"nv\">delegate</span><span class=\"p\">:</span> <span class=\"kt\">BluetoothManagerDelegate</span><span class=\"p\">?</span>\n    <span class=\"kd\">private(set)</span> <span class=\"k\">var</span> <span class=\"nv\">peripherals</span> <span class=\"o\">=</span> <span class=\"kt\">Dictionary</span><span class=\"o\">&lt;</span><span class=\"kt\">UUID</span><span class=\"p\">,</span> <span class=\"kt\">CBPeripheral</span><span class=\"o\">&gt;</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">didSet</span> <span class=\"p\">{</span>\n            <span class=\"n\">delegate</span><span class=\"p\">?</span><span class=\"o\">.</span><span class=\"nf\">peripheralsDidUpdate</span><span class=\"p\">()</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\">// MARK: - Public methods</span>\n    <span class=\"kd\">func</span> <span class=\"nf\">startAdvertising</span><span class=\"p\">(</span><span class=\"n\">with</span> <span class=\"nv\">name</span><span class=\"p\">:</span> <span class=\"kt\">String</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n        <span class=\"n\">peripheralManager</span> <span class=\"o\">=</span> <span class=\"kt\">CBPeripheralManager</span><span class=\"p\">(</span><span class=\"nv\">delegate</span><span class=\"p\">:</span> <span class=\"k\">self</span><span class=\"p\">,</span> <span class=\"nv\">queue</span><span class=\"p\">:</span> <span class=\"kc\">nil</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kd\">func</span> <span class=\"nf\">startScanning</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"n\">centralManager</span> <span class=\"o\">=</span> <span class=\"kt\">CBCentralManager</span><span class=\"p\">(</span><span class=\"nv\">delegate</span><span class=\"p\">:</span> <span class=\"k\">self</span><span class=\"p\">,</span> <span class=\"nv\">queue</span><span class=\"p\">:</span> <span class=\"kc\">nil</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\">// MARK: - Private properties</span>\n    <span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">peripheralManager</span><span class=\"p\">:</span> <span class=\"kt\">CBPeripheralManager</span><span class=\"p\">?</span>\n    <span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">centralManager</span><span class=\"p\">:</span> <span class=\"kt\">CBCentralManager</span><span class=\"p\">?</span>\n    <span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">name</span><span class=\"p\">:</span> <span class=\"kt\">String</span><span class=\"p\">?</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<blockquote>\n  <p>Please mind that you have to add <code class=\"language-plaintext highlighter-rouge\">import CoreBluetooth</code> in the beginning of the file.</p>\n</blockquote>\n\n<p>First, we describe the public properties for the <code class=\"language-plaintext highlighter-rouge\">delegate</code> and the <code class=\"language-plaintext highlighter-rouge\">peripherals</code>. When the value of the <code class=\"language-plaintext highlighter-rouge\">peripherals</code> is updated, we call the <code class=\"language-plaintext highlighter-rouge\">peripheralsDidUpdate</code> function to notify the delegate.</p>\n\n<p>Then, we define the implementation for the <code class=\"language-plaintext highlighter-rouge\">func startAdvertising(with name: String)</code> requirement. In this function, we initialize an instance of <code class=\"language-plaintext highlighter-rouge\">CBPeripheralManager</code> which we will store in a private property. <code class=\"language-plaintext highlighter-rouge\">CBPeripheralManager</code> is part of the  <code class=\"language-plaintext highlighter-rouge\">CoreBluetooth</code> framework and its primary function is to allow us to advertise to other devices.</p>\n\n<blockquote>\n  <p>For now the compiler will complain because we have set <code class=\"language-plaintext highlighter-rouge\">self</code> as the delegate and it is not conforming to the <code class=\"language-plaintext highlighter-rouge\">CBPeripheralManagerDelegate</code> protocol. We are going to fix this soon.</p>\n</blockquote>\n\n<p>Moving on, we have the implementation for the <code class=\"language-plaintext highlighter-rouge\">startScanning</code> requirement. In this case we initialize an instance of <code class=\"language-plaintext highlighter-rouge\">CBCentralManager</code> which we also store in a private property. <code class=\"language-plaintext highlighter-rouge\">CBCentralManager</code> is responsible for scanning for nearby BLE devices.</p>\n\n<p>Since the compiler is complaining about the delegate, let’s try to implement them. First, let’s add an extension to the <code class=\"language-plaintext highlighter-rouge\">CoreBluetoothManager</code> that will conform to the <code class=\"language-plaintext highlighter-rouge\">CBPeripheralManagerDelegate</code> protocol and add the following content:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">extension</span> <span class=\"kt\">CoreBluetoothManager</span><span class=\"p\">:</span> <span class=\"kt\">CBPeripheralManagerDelegate</span> <span class=\"p\">{</span>\n    <span class=\"kd\">func</span> <span class=\"nf\">peripheralManagerDidUpdateState</span><span class=\"p\">(</span><span class=\"n\">_</span> <span class=\"nv\">peripheral</span><span class=\"p\">:</span> <span class=\"kt\">CBPeripheralManager</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"n\">peripheral</span><span class=\"o\">.</span><span class=\"n\">state</span> <span class=\"o\">==</span> <span class=\"o\">.</span><span class=\"n\">poweredOn</span> <span class=\"p\">{</span>\n            <span class=\"k\">if</span> <span class=\"n\">peripheral</span><span class=\"o\">.</span><span class=\"n\">isAdvertising</span> <span class=\"p\">{</span>\n                <span class=\"n\">peripheral</span><span class=\"o\">.</span><span class=\"nf\">stopAdvertising</span><span class=\"p\">()</span>\n            <span class=\"p\">}</span>\n\n            <span class=\"k\">let</span> <span class=\"nv\">uuid</span> <span class=\"o\">=</span> <span class=\"kt\">CBUUID</span><span class=\"p\">(</span><span class=\"nv\">string</span><span class=\"p\">:</span> <span class=\"kt\">Constants</span><span class=\"o\">.</span><span class=\"kt\">SERVICE_UUID</span><span class=\"o\">.</span><span class=\"n\">rawValue</span><span class=\"p\">)</span>\n            <span class=\"k\">var</span> <span class=\"nv\">advertisingData</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">String</span> <span class=\"p\">:</span> <span class=\"kt\">Any</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                <span class=\"kt\">CBAdvertisementDataServiceUUIDsKey</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">uuid</span><span class=\"p\">]</span>\n            <span class=\"p\">]</span>\n\n            <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"nv\">name</span> <span class=\"o\">=</span> <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"p\">{</span>\n                <span class=\"n\">advertisingData</span><span class=\"p\">[</span><span class=\"kt\">CBAdvertisementDataLocalNameKey</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n            <span class=\"p\">}</span>\n            <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">peripheralManager</span><span class=\"p\">?</span><span class=\"o\">.</span><span class=\"nf\">startAdvertising</span><span class=\"p\">(</span><span class=\"n\">advertisingData</span><span class=\"p\">)</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"cp\">#warning(\"handle other states\")</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Here, we provide an implementation for the <code class=\"language-plaintext highlighter-rouge\">peripheralManagerDidUpdateState</code> requirement. In the body of this function we check if the <code class=\"language-plaintext highlighter-rouge\">peripheral.state</code> is <code class=\"language-plaintext highlighter-rouge\">.poweredOn</code> as described on <a href=\"https://developer.apple.com/documentation/corebluetooth/cbperipheralmanager\">Apple’s documentation</a>.</p>\n\n<blockquote>\n  <p>Before you call CBPeripheralManager methods, the peripheral manager object must be in the powered-on state, as indicated by the <code class=\"language-plaintext highlighter-rouge\">CBPeripheralManagerState.poweredOn</code>. This state indicates that the device (your iPhone or iPad, for instance) supports Bluetooth low energy and that its Bluetooth is on and available for use.</p>\n</blockquote>\n\n<p>After that, we check if the peripheral is already advertising and if it does, we stop it so that we can start advertising again with the new <code class=\"language-plaintext highlighter-rouge\">advertisingData</code> which we are doing exactly after. <code class=\"language-plaintext highlighter-rouge\">advertisingData</code> is a dictionary that contains the data to advertise. The supported advertising data types are <code class=\"language-plaintext highlighter-rouge\">CBAdvertisementDataServiceUUIDsKey</code> and <code class=\"language-plaintext highlighter-rouge\">CBAdvertisementDataLocalNameKey</code>. The first one is a UUID specific to our application and it will be used to filter out other BLE devices, whereas the second one is the local name of the peripheral.</p>\n\n<p>For the service UUID, we add an <code class=\"language-plaintext highlighter-rouge\">enum</code> named <code class=\"language-plaintext highlighter-rouge\">Constants</code>, where we add a case for the <code class=\"language-plaintext highlighter-rouge\">SERVICE_UUID</code>, like in the following snippet</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">enum</span> <span class=\"kt\">Constants</span><span class=\"p\">:</span> <span class=\"kt\">String</span> <span class=\"p\">{</span>\n    <span class=\"k\">case</span> <span class=\"kt\">SERVICE_UUID</span> <span class=\"o\">=</span> <span class=\"s\">\"4DF91029-B356-463E-9F48-BAB077BF3EF5\"</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Finally, we can call the <code class=\"language-plaintext highlighter-rouge\">startAdvertising</code> function to initiate the advertising process.</p>\n\n<p>Let’s move now to the scanning part of our class. We are going to add another extension to <code class=\"language-plaintext highlighter-rouge\">CoreBluetoothManager</code> and this time it will conform to the <code class=\"language-plaintext highlighter-rouge\">CBCentralManagerDelegate</code> protocol. The content of this extension will be the following:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">extension</span> <span class=\"kt\">CoreBluetoothManager</span><span class=\"p\">:</span> <span class=\"kt\">CBCentralManagerDelegate</span> <span class=\"p\">{</span>\n    <span class=\"kd\">func</span> <span class=\"nf\">centralManagerDidUpdateState</span><span class=\"p\">(</span><span class=\"n\">_</span> <span class=\"nv\">central</span><span class=\"p\">:</span> <span class=\"kt\">CBCentralManager</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"n\">central</span><span class=\"o\">.</span><span class=\"n\">state</span> <span class=\"o\">==</span> <span class=\"o\">.</span><span class=\"n\">poweredOn</span> <span class=\"p\">{</span>\n\n            <span class=\"k\">if</span> <span class=\"n\">central</span><span class=\"o\">.</span><span class=\"n\">isScanning</span> <span class=\"p\">{</span>\n                <span class=\"n\">central</span><span class=\"o\">.</span><span class=\"nf\">stopScan</span><span class=\"p\">()</span>\n            <span class=\"p\">}</span>\n\n            <span class=\"k\">let</span> <span class=\"nv\">uuid</span> <span class=\"o\">=</span> <span class=\"kt\">CBUUID</span><span class=\"p\">(</span><span class=\"nv\">string</span><span class=\"p\">:</span> <span class=\"kt\">Constants</span><span class=\"o\">.</span><span class=\"kt\">SERVICE_UUID</span><span class=\"o\">.</span><span class=\"n\">rawValue</span><span class=\"p\">)</span>\n            <span class=\"n\">central</span><span class=\"o\">.</span><span class=\"nf\">scanForPeripherals</span><span class=\"p\">(</span><span class=\"nv\">withServices</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">uuid</span><span class=\"p\">])</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"cp\">#warning(\"Error handling\")</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kd\">func</span> <span class=\"nf\">centralManager</span><span class=\"p\">(</span><span class=\"n\">_</span> <span class=\"nv\">central</span><span class=\"p\">:</span> <span class=\"kt\">CBCentralManager</span><span class=\"p\">,</span> <span class=\"n\">didDiscover</span> <span class=\"nv\">peripheral</span><span class=\"p\">:</span> <span class=\"kt\">CBPeripheral</span><span class=\"p\">,</span> <span class=\"nv\">advertisementData</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">String</span><span class=\"p\">:</span> <span class=\"kt\">Any</span><span class=\"p\">],</span> <span class=\"n\">rssi</span> <span class=\"kt\">RSSI</span><span class=\"p\">:</span> <span class=\"kt\">NSNumber</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">peripherals</span><span class=\"p\">[</span><span class=\"n\">peripheral</span><span class=\"o\">.</span><span class=\"n\">identifier</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">peripheral</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>In the same fashion as with the <code class=\"language-plaintext highlighter-rouge\">CBPeripheralManagerDelegate</code> extension, we satisfy the <code class=\"language-plaintext highlighter-rouge\">centralManagerDidUpdateState</code> requirement for the <code class=\"language-plaintext highlighter-rouge\">CBCentralManager</code> this time, and again we are checking if the <code class=\"language-plaintext highlighter-rouge\">central.state</code> is <code class=\"language-plaintext highlighter-rouge\">.poweredOn</code> and if it is already scanning then we call the <code class=\"language-plaintext highlighter-rouge\">stopScan</code>. Finally, we call <code class=\"language-plaintext highlighter-rouge\">scanForPeripherals</code> and pass the <code class=\"language-plaintext highlighter-rouge\">CBUUID</code> with the <code class=\"language-plaintext highlighter-rouge\">SERVICE_UUID</code> that we are using for our application. This way, we are going to scan for devices that advertise this service and ignore all the others.</p>\n\n<p>After starting the scanning process, we have to get informed when a device is discovered and for this reason, we add an implementation for the <code class=\"language-plaintext highlighter-rouge\">didDiscover</code> requirement of the <code class=\"language-plaintext highlighter-rouge\">CBCentralManagerDelegate</code>. There, we just update the peripherals dictionary with the peripheral that we have just discovered.</p>\n\n<p>And that’s it regarding the <code class=\"language-plaintext highlighter-rouge\">BluetoothManager</code>. Let’s now move on and see how we can use this class.</p>\n\n<h2 id=\"application\">Application</h2>\n\n<p>As mentioned in the introduction, the application will have one screen which will contain a <code class=\"language-plaintext highlighter-rouge\">UITextField</code> to enter the device name that we will use when calling the <code class=\"language-plaintext highlighter-rouge\">startAdvertising</code>, and two instances of <code class=\"language-plaintext highlighter-rouge\">UIButton</code>, one for triggering the advertising process and one for triggering the scanning process.</p>\n\n<p>Since the post is about <code class=\"language-plaintext highlighter-rouge\">Core Bluetooth</code> I will focus on how to use the class <code class=\"language-plaintext highlighter-rouge\">CoreBluetoothManager</code> that we have just created and skip the UI part. The UI is created with UIKit, AutoLayout and programmatic views. Furthermore, the whole code can be found on <a href=\"https://github.com/diamantidis/DemoBluetooth/tree/93f64c32\">GitHub</a> and it’s a Catalyst application, meaning you can run it on iPhone, iPad or Mac.</p>\n\n<p>To use the <code class=\"language-plaintext highlighter-rouge\">CoreBluetoothManager</code>, we instantiate an instance of it in the <code class=\"language-plaintext highlighter-rouge\">SceneDelegate</code> and we inject it to our only <code class=\"language-plaintext highlighter-rouge\">UIViewController</code>, the <code class=\"language-plaintext highlighter-rouge\">BluetoothViewController</code>.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// SceneDelegate.swift</span>\n\n<span class=\"kd\">class</span> <span class=\"kt\">SceneDelegate</span><span class=\"p\">:</span> <span class=\"kt\">UIResponder</span><span class=\"p\">,</span> <span class=\"kt\">UIWindowSceneDelegate</span> <span class=\"p\">{</span>\n    <span class=\"kd\">private</span> <span class=\"kd\">lazy</span> <span class=\"k\">var</span> <span class=\"nv\">bluetoothManager</span> <span class=\"o\">=</span> <span class=\"kt\">CoreBluetoothManager</span><span class=\"p\">()</span>\n    <span class=\"o\">.</span>\n    <span class=\"o\">.</span> \n    <span class=\"o\">.</span> \n\n\n    <span class=\"kd\">func</span> <span class=\"nf\">scene</span><span class=\"p\">(</span><span class=\"n\">_</span> <span class=\"nv\">scene</span><span class=\"p\">:</span> <span class=\"kt\">UIScene</span><span class=\"p\">,</span> <span class=\"n\">willConnectTo</span> <span class=\"nv\">session</span><span class=\"p\">:</span> <span class=\"kt\">UISceneSession</span><span class=\"p\">,</span> <span class=\"n\">options</span> <span class=\"nv\">connectionOptions</span><span class=\"p\">:</span> <span class=\"kt\">UIScene</span><span class=\"o\">.</span><span class=\"kt\">ConnectionOptions</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"o\">.</span>\n        <span class=\"o\">.</span> \n        <span class=\"o\">.</span> \n        <span class=\"k\">let</span> <span class=\"nv\">vc</span> <span class=\"o\">=</span> <span class=\"kt\">BluetoothViewController</span><span class=\"p\">(</span><span class=\"nv\">bluetoothManager</span><span class=\"p\">:</span> <span class=\"n\">bluetoothManager</span><span class=\"p\">)</span>\n        <span class=\"o\">.</span>\n        <span class=\"o\">.</span> \n        <span class=\"o\">.</span> \n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n</code></pre></div></div>\n\n<p>In the <code class=\"language-plaintext highlighter-rouge\">BluetoothViewController</code>, we receive an instance of a class that conforms to the protocol <code class=\"language-plaintext highlighter-rouge\">BluetoothManager</code> in the init function and we store it in a private property.</p>\n\n<p>Then, we provide the implementations for the two buttons. For the first one, we use the  <code class=\"language-plaintext highlighter-rouge\">bluetoothManager</code> to call the <code class=\"language-plaintext highlighter-rouge\">startAdvertising</code> and we pass the value of the <code class=\"language-plaintext highlighter-rouge\">UITextField</code> as the device name. For the second button, we set the <code class=\"language-plaintext highlighter-rouge\">delegate</code> of the <code class=\"language-plaintext highlighter-rouge\">bluetoothManager</code> to <code class=\"language-plaintext highlighter-rouge\">self</code> and call the <code class=\"language-plaintext highlighter-rouge\">startScanning</code> function to trigger the scanning process.</p>\n\n<p>As a result, we have to make <code class=\"language-plaintext highlighter-rouge\">BluetoothViewController</code> conform to the protocol <code class=\"language-plaintext highlighter-rouge\">BluetoothManagerDelegate</code>, by adding an extension and providing an implementation of the method <code class=\"language-plaintext highlighter-rouge\">peripheralsDidUpdate</code> to fulfill <code class=\"language-plaintext highlighter-rouge\">BluetoothManagerDelegate</code>’s requirement. In this function, we just print the names of the peripherals on the console, but we could potentially reload an instance of a <code class=\"language-plaintext highlighter-rouge\">UITableView</code> that would present the nearby devices.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// BluetoothViewController.swift</span>\n\n<span class=\"kd\">class</span> <span class=\"kt\">BluetoothViewController</span><span class=\"p\">:</span> <span class=\"kt\">UIViewController</span> <span class=\"p\">{</span>\n    <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"nv\">bluetoothManager</span><span class=\"p\">:</span> <span class=\"kt\">BluetoothManager</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">bluetoothManager</span> <span class=\"o\">=</span> <span class=\"n\">bluetoothManager</span>\n        <span class=\"k\">super</span><span class=\"o\">.</span><span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"nv\">nibName</span><span class=\"p\">:</span> <span class=\"kc\">nil</span><span class=\"p\">,</span> <span class=\"nv\">bundle</span><span class=\"p\">:</span> <span class=\"kc\">nil</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"o\">.</span>\n    <span class=\"o\">.</span>\n    <span class=\"o\">.</span>\n\n    <span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">bluetoothManager</span><span class=\"p\">:</span> <span class=\"kt\">BluetoothManager</span>\n\n    <span class=\"kd\">@objc</span> <span class=\"kd\">private</span> <span class=\"kd\">func</span> <span class=\"nf\">startAdvertising</span><span class=\"p\">(</span><span class=\"nv\">sender</span><span class=\"p\">:</span> <span class=\"kt\">UIButton</span><span class=\"o\">!</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">nameTextField</span><span class=\"o\">.</span><span class=\"nf\">resignFirstResponder</span><span class=\"p\">()</span>\n        <span class=\"o\">.</span>\n        <span class=\"o\">.</span>\n        <span class=\"o\">.</span>\n\n        <span class=\"n\">bluetoothManager</span><span class=\"o\">.</span><span class=\"nf\">startAdvertising</span><span class=\"p\">(</span><span class=\"nv\">with</span><span class=\"p\">:</span> <span class=\"n\">name</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kd\">@objc</span> <span class=\"kd\">private</span> <span class=\"kd\">func</span> <span class=\"nf\">startScanning</span><span class=\"p\">(</span><span class=\"nv\">sender</span><span class=\"p\">:</span> <span class=\"kt\">UIButton</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">bluetoothManager</span><span class=\"o\">.</span><span class=\"n\">delegate</span> <span class=\"o\">=</span> <span class=\"k\">self</span>\n        <span class=\"n\">bluetoothManager</span><span class=\"o\">.</span><span class=\"nf\">startScanning</span><span class=\"p\">()</span>\n    <span class=\"p\">}</span>\n\n<span class=\"p\">}</span>\n\n<span class=\"kd\">extension</span> <span class=\"kt\">BluetoothViewController</span><span class=\"p\">:</span> <span class=\"kt\">BluetoothManagerDelegate</span> <span class=\"p\">{</span>\n    <span class=\"kd\">func</span> <span class=\"nf\">peripheralsDidUpdate</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">bluetoothManager</span><span class=\"o\">.</span><span class=\"n\">peripherals</span><span class=\"o\">.</span><span class=\"n\">mapValues</span><span class=\"p\">{</span><span class=\"nv\">$0</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">})</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n</code></pre></div></div>\n\n<p>And that’s about it for the application code. But before we run the application, we have to make some further adjustments, to enable the usage of Bluetooth.</p>\n\n<p>First, we have to add an entry for the key <code class=\"language-plaintext highlighter-rouge\">NSBluetoothAlwaysUsageDescription</code> to our <code class=\"language-plaintext highlighter-rouge\">Info.plist</code> file, like in the following snippet</p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>    &lt;key&gt;NSBluetoothAlwaysUsageDescription&lt;/key&gt;\n    &lt;string&gt;Our app uses Bluetooth to find other devices&lt;/string&gt;\n</code></pre></div></div>\n\n<p>Then, we have to select the target of the app, go to <code class=\"language-plaintext highlighter-rouge\">Signing &amp; Capabilities</code> &gt; <code class=\"language-plaintext highlighter-rouge\">App Sandbox</code> and enable the <code class=\"language-plaintext highlighter-rouge\">Bluetooth</code> checkbox.</p>\n\n<p><img src=\"https://diamantidis.github.io/assets/corebluetooth/bluetooth_sandbox.png\" alt=\"Bluetooth sandbox screenshot\" /></p>\n\n<p>Lastly, make sure to enable the Bluetooth on the device that you are running the application. :smirk:</p>\n\n<p>Now our app is ready!! Feel free to run it and start advertising and scanning for nearby devices! :rocket:</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>In this post, we have seen how to use the <code class=\"language-plaintext highlighter-rouge\">CoreBluetooth</code> framework to advertise that an application is running on a device and also scan for nearby devices that are running the application. These concepts can be used as a base and build more complex application that will rely on Bluetooth and the communication of nearby devices, like for example a chat app, or maybe an AirDrop-like solution to share documents with other non-Apple devices.</p>\n\n<p>Thanks for reading, I hope you find this post useful!\nFeel free to find me on <a href=\"https://twitter.com/diamantidis_io\">Twitter</a> and share your comments about this post!</p>\n\n",
            "tags": ["Swift","Core Bluetooth","Catalyst","iOS"],
            "image": "https://diamantidis.github.io/assets/socialIcon.png"
        },
        
        {
            "id": "https://diamantidis.github.io/2020/02/02/two-way-communication-between-ios-wkwebview-and-web-page",
            "url": "https://diamantidis.github.io/2020/02/02/two-way-communication-between-ios-wkwebview-and-web-page",
            "title": "Two-way communication between an iOS WKWebView and a web page",
            "date_published": "2020-02-02T04:00:00+00:00",
            
            "date_modified": "2020-02-02T04:00:00+00:00",
            
            "author": {
                "name": "Ioannis Diamantidis",
                "url": "https://diamantidis.github.io"
            },
            "summary": "<p>Sometimes, on a native iOS app, there is the need to embed a web page within the application. To cater for cases like this, <code class=\"language-plaintext highlighter-rouge\">iOS</code> provides <code class=\"language-plaintext highlighter-rouge\">WKWebView</code>, an object that allows us to display web content in apps. <code class=\"language-plaintext highlighter-rouge\">WKWebView</code> makes it easy and quite straightforward to load a web page, but what happens when we want to open a communication channel between the app and the web-page?</p>\n\n",
            "content_html": "<p>Sometimes, on a native iOS app, there is the need to embed a web page within the application. To cater for cases like this, <code class=\"language-plaintext highlighter-rouge\">iOS</code> provides <code class=\"language-plaintext highlighter-rouge\">WKWebView</code>, an object that allows us to display web content in apps. <code class=\"language-plaintext highlighter-rouge\">WKWebView</code> makes it easy and quite straightforward to load a web page, but what happens when we want to open a communication channel between the app and the web-page?</p>\n\n<p>In this post I will show how to use Swift and JavaScript to communicate between the app and the web-page that is loaded on the <code class=\"language-plaintext highlighter-rouge\">WKWebView</code>.</p>\n\n<p>In order to do so, I am going to use an example to demonstrate how to achieve communication in both directions; both from the web page to the app and from the app to the web-page.</p>\n\n<p>Let’s get started!</p>\n\n<h2 id=\"implementation\">Implementation</h2>\n\n<h3 id=\"the-html-file\">The HTML file</h3>\n\n<p>For the sake of this article and for ease, instead of loading a URL, I am going to add an HTML file on the project and load that on the WKWebView. If you still want to use a URL, the process remains the same, with the only difference being that you need to load a URLRequest instead of a fileURL on the <code class=\"language-plaintext highlighter-rouge\">WKWebView</code>.</p>\n\n<p>Let’s create the HTML file, name it <code class=\"language-plaintext highlighter-rouge\">index.html</code> and add the following content:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"nt\">&lt;html&gt;</span>\n    <span class=\"nt\">&lt;head&gt;</span>\n        <span class=\"nt\">&lt;meta</span> <span class=\"na\">name=</span><span class=\"s\">\"viewport\"</span> <span class=\"na\">content=</span><span class=\"s\">\"width=device-width, initial-scale=1\"</span><span class=\"nt\">/&gt;</span>\n        <span class=\"nt\">&lt;style&gt;</span>\n            <span class=\"nc\">.switch</span> <span class=\"p\">{</span> <span class=\"nl\">position</span><span class=\"p\">:</span> <span class=\"nb\">relative</span><span class=\"p\">;</span> <span class=\"nl\">display</span><span class=\"p\">:</span> <span class=\"n\">inline-block</span><span class=\"p\">;</span> <span class=\"nl\">width</span><span class=\"p\">:</span> <span class=\"m\">60px</span><span class=\"p\">;</span> <span class=\"nl\">height</span><span class=\"p\">:</span> <span class=\"m\">34px</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n            <span class=\"nc\">.switch</span> <span class=\"nt\">input</span> <span class=\"p\">{</span> <span class=\"nl\">opacity</span><span class=\"p\">:</span> <span class=\"m\">0</span><span class=\"p\">;</span> <span class=\"nl\">width</span><span class=\"p\">:</span> <span class=\"m\">0</span><span class=\"p\">;</span> <span class=\"nl\">height</span><span class=\"p\">:</span> <span class=\"m\">0</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n            <span class=\"nt\">label</span><span class=\"nc\">.switch</span> <span class=\"p\">{</span> <span class=\"nl\">outline</span><span class=\"p\">:</span> <span class=\"nb\">none</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n            <span class=\"nc\">.slider</span> <span class=\"p\">{</span> <span class=\"nl\">position</span><span class=\"p\">:</span> <span class=\"nb\">absolute</span><span class=\"p\">;</span> <span class=\"nl\">cursor</span><span class=\"p\">:</span> <span class=\"nb\">pointer</span><span class=\"p\">;</span> <span class=\"nl\">top</span><span class=\"p\">:</span> <span class=\"m\">0</span><span class=\"p\">;</span> <span class=\"nl\">left</span><span class=\"p\">:</span> <span class=\"m\">0</span><span class=\"p\">;</span> <span class=\"nl\">right</span><span class=\"p\">:</span> <span class=\"m\">0</span><span class=\"p\">;</span> <span class=\"nl\">bottom</span><span class=\"p\">:</span> <span class=\"m\">0</span><span class=\"p\">;</span> <span class=\"nl\">background-color</span><span class=\"p\">:</span> <span class=\"m\">#ccc</span><span class=\"p\">;</span> <span class=\"nl\">-webkit-transition</span><span class=\"p\">:</span> <span class=\"m\">.4s</span><span class=\"p\">;</span> <span class=\"nl\">transition</span><span class=\"p\">:</span> <span class=\"m\">.4s</span><span class=\"p\">;</span> <span class=\"nl\">outline</span><span class=\"p\">:</span> <span class=\"nb\">none</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n            <span class=\"nc\">.slider</span><span class=\"nd\">:before</span> <span class=\"p\">{</span> <span class=\"nl\">position</span><span class=\"p\">:</span> <span class=\"nb\">absolute</span><span class=\"p\">;</span> <span class=\"nl\">content</span><span class=\"p\">:</span> <span class=\"s1\">\"\"</span><span class=\"p\">;</span> <span class=\"nl\">height</span><span class=\"p\">:</span> <span class=\"m\">26px</span><span class=\"p\">;</span> <span class=\"nl\">width</span><span class=\"p\">:</span> <span class=\"m\">26px</span><span class=\"p\">;</span> <span class=\"nl\">left</span><span class=\"p\">:</span> <span class=\"m\">4px</span><span class=\"p\">;</span> <span class=\"nl\">bottom</span><span class=\"p\">:</span> <span class=\"m\">4px</span><span class=\"p\">;</span> <span class=\"nl\">background-color</span><span class=\"p\">:</span> <span class=\"no\">white</span><span class=\"p\">;</span> <span class=\"nl\">-webkit-transition</span><span class=\"p\">:</span> <span class=\"m\">.4s</span><span class=\"p\">;</span> <span class=\"nl\">transition</span><span class=\"p\">:</span> <span class=\"m\">.4s</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n            <span class=\"nt\">input</span><span class=\"nd\">:checked</span> <span class=\"o\">+</span> <span class=\"nc\">.slider</span> <span class=\"p\">{</span> <span class=\"nl\">background-color</span><span class=\"p\">:</span> <span class=\"m\">#2196F3</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n            <span class=\"nt\">input</span><span class=\"nd\">:focus</span> <span class=\"o\">+</span> <span class=\"nc\">.slider</span> <span class=\"p\">{</span> <span class=\"nl\">box-shadow</span><span class=\"p\">:</span> <span class=\"m\">0</span> <span class=\"m\">0</span> <span class=\"m\">1px</span> <span class=\"m\">#2196F3</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n            <span class=\"nt\">input</span><span class=\"nd\">:checked</span> <span class=\"o\">+</span> <span class=\"nc\">.slider</span><span class=\"nd\">:before</span> <span class=\"p\">{</span> <span class=\"nl\">-webkit-transform</span><span class=\"p\">:</span> <span class=\"n\">translateX</span><span class=\"p\">(</span><span class=\"m\">26px</span><span class=\"p\">);</span> <span class=\"nl\">-ms-transform</span><span class=\"p\">:</span> <span class=\"n\">translateX</span><span class=\"p\">(</span><span class=\"m\">26px</span><span class=\"p\">);</span> <span class=\"nl\">transform</span><span class=\"p\">:</span> <span class=\"n\">translateX</span><span class=\"p\">(</span><span class=\"m\">26px</span><span class=\"p\">);</span> <span class=\"p\">}</span>\n            <span class=\"nc\">.slider.round</span> <span class=\"p\">{</span> <span class=\"nl\">border-radius</span><span class=\"p\">:</span> <span class=\"m\">34px</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n            <span class=\"nc\">.slider.round</span><span class=\"nd\">:before</span> <span class=\"p\">{</span> <span class=\"nl\">border-radius</span><span class=\"p\">:</span> <span class=\"m\">50%</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n        <span class=\"nt\">&lt;/style&gt;</span>\n    <span class=\"nt\">&lt;/head&gt;</span>\n    <span class=\"nt\">&lt;body&gt;</span>\n        <span class=\"nt\">&lt;h2</span> <span class=\"na\">id=</span><span class=\"s\">\"value\"</span><span class=\"nt\">&gt;</span>Toggle Switch is off<span class=\"nt\">&lt;/h2&gt;</span>\n        <span class=\"nt\">&lt;label</span> <span class=\"na\">class=</span><span class=\"s\">\"switch\"</span><span class=\"nt\">&gt;</span>\n            <span class=\"nt\">&lt;input</span> <span class=\"na\">type=</span><span class=\"s\">\"checkbox\"</span> <span class=\"na\">name=</span><span class=\"s\">\"myCheckbox\"</span><span class=\"nt\">&gt;</span>\n            <span class=\"nt\">&lt;span</span> <span class=\"na\">class=</span><span class=\"s\">\"slider round\"</span><span class=\"nt\">&gt;&lt;/span&gt;</span>\n        <span class=\"nt\">&lt;/label&gt;</span>\n    <span class=\"nt\">&lt;/body&gt;</span>\n<span class=\"nt\">&lt;/html&gt;</span>\n\n</code></pre></div></div>\n\n<blockquote>\n  <p>For brevity reasons, the CSS part is minimized.</p>\n</blockquote>\n\n<p>This HTML produces a web page with a label and a toggle switch. Our goal is to listen to the toggle events and update the text on the label to represent the corresponding state of the toggle switch.</p>\n\n<h3 id=\"adding-the-wkwebview\">Adding the WKWebView</h3>\n\n<p>To start with, we are going to add an instance of a WKWebView to a <code class=\"language-plaintext highlighter-rouge\">UIViewController</code> and load the HTML file that we created earlier.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">import</span> <span class=\"kt\">UIKit</span>\n<span class=\"kd\">import</span> <span class=\"kt\">WebKit</span>\n\n<span class=\"kd\">class</span> <span class=\"kt\">ViewController</span><span class=\"p\">:</span> <span class=\"kt\">UIViewController</span> <span class=\"p\">{</span>\n\n    <span class=\"k\">override</span> <span class=\"kd\">func</span> <span class=\"nf\">viewDidLoad</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">super</span><span class=\"o\">.</span><span class=\"nf\">viewDidLoad</span><span class=\"p\">()</span>\n\n        <span class=\"n\">view</span><span class=\"o\">.</span><span class=\"nf\">addSubview</span><span class=\"p\">(</span><span class=\"n\">webView</span><span class=\"p\">)</span>\n        <span class=\"kt\">NSLayoutConstraint</span><span class=\"o\">.</span><span class=\"nf\">activate</span><span class=\"p\">([</span>\n            <span class=\"n\">webView</span><span class=\"o\">.</span><span class=\"n\">leadingAnchor</span><span class=\"o\">.</span><span class=\"nf\">constraint</span><span class=\"p\">(</span><span class=\"nv\">equalTo</span><span class=\"p\">:</span> <span class=\"n\">view</span><span class=\"o\">.</span><span class=\"n\">leadingAnchor</span><span class=\"p\">),</span>\n            <span class=\"n\">webView</span><span class=\"o\">.</span><span class=\"n\">trailingAnchor</span><span class=\"o\">.</span><span class=\"nf\">constraint</span><span class=\"p\">(</span><span class=\"nv\">equalTo</span><span class=\"p\">:</span> <span class=\"n\">view</span><span class=\"o\">.</span><span class=\"n\">trailingAnchor</span><span class=\"p\">),</span>\n            <span class=\"n\">webView</span><span class=\"o\">.</span><span class=\"n\">bottomAnchor</span><span class=\"o\">.</span><span class=\"nf\">constraint</span><span class=\"p\">(</span><span class=\"nv\">equalTo</span><span class=\"p\">:</span> <span class=\"n\">view</span><span class=\"o\">.</span><span class=\"n\">layoutMarginsGuide</span><span class=\"o\">.</span><span class=\"n\">bottomAnchor</span><span class=\"p\">),</span>\n            <span class=\"n\">webView</span><span class=\"o\">.</span><span class=\"n\">topAnchor</span><span class=\"o\">.</span><span class=\"nf\">constraint</span><span class=\"p\">(</span><span class=\"nv\">equalTo</span><span class=\"p\">:</span> <span class=\"n\">view</span><span class=\"o\">.</span><span class=\"n\">layoutMarginsGuide</span><span class=\"o\">.</span><span class=\"n\">topAnchor</span><span class=\"p\">)</span>\n        <span class=\"p\">])</span>\n\n        <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"nv\">url</span> <span class=\"o\">=</span> <span class=\"kt\">Bundle</span><span class=\"o\">.</span><span class=\"n\">main</span><span class=\"o\">.</span><span class=\"nf\">url</span><span class=\"p\">(</span><span class=\"nv\">forResource</span><span class=\"p\">:</span> <span class=\"s\">\"index\"</span><span class=\"p\">,</span> <span class=\"nv\">withExtension</span><span class=\"p\">:</span> <span class=\"s\">\"html\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">webView</span><span class=\"o\">.</span><span class=\"nf\">loadFileURL</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"nv\">allowingReadAccessTo</span><span class=\"p\">:</span> <span class=\"n\">url</span><span class=\"o\">.</span><span class=\"nf\">deletingLastPathComponent</span><span class=\"p\">())</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kd\">private</span> <span class=\"kd\">lazy</span> <span class=\"k\">var</span> <span class=\"nv\">webView</span><span class=\"p\">:</span> <span class=\"kt\">WKWebView</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"k\">let</span> <span class=\"nv\">webView</span> <span class=\"o\">=</span> <span class=\"kt\">WKWebView</span><span class=\"p\">()</span>\n        <span class=\"n\">webView</span><span class=\"o\">.</span><span class=\"n\">translatesAutoresizingMaskIntoConstraints</span> <span class=\"o\">=</span> <span class=\"kc\">false</span>\n        <span class=\"k\">return</span> <span class=\"n\">webView</span>\n    <span class=\"p\">}()</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Quite self-descriptive, we create a private instance of a <code class=\"language-plaintext highlighter-rouge\">WKWebView</code>, we add it as a subview to the <code class=\"language-plaintext highlighter-rouge\">ViewController</code>’s view, add the required <code class=\"language-plaintext highlighter-rouge\">AutoLayout</code> constraints and then load the file.</p>\n\n<p>Try to run the app, and you will see the page with the label and toggle, loaded in your <code class=\"language-plaintext highlighter-rouge\">WKWebView</code> like in the following screenshot:</p>\n\n<p><img src=\"https://diamantidis.github.io/assets/wkwebview/toggle_off.png\" alt=\"WKWebView with a toggle screenshot\" /></p>\n\n<h3 id=\"adding-the-message-handler\">Adding the message handler</h3>\n\n<p>The next step is to enable our <code class=\"language-plaintext highlighter-rouge\">WKWebView</code> to receive messages from the web-page and to accomplish that, we will make our <code class=\"language-plaintext highlighter-rouge\">UIViewController</code> conform to the <code class=\"language-plaintext highlighter-rouge\">WKScriptMessageHandler</code> protocol.</p>\n\n<p>According to the <a href=\"https://developer.apple.com/documentation/webkit/wkscriptmessagehandler\">documentation</a>:</p>\n\n<blockquote>\n  <p>A class conforming to the <code class=\"language-plaintext highlighter-rouge\">WKScriptMessageHandler</code> protocol provides a method for receiving messages from JavaScript running in a webpage.</p>\n</blockquote>\n\n<p>This protocol requires the definition of the function <code class=\"language-plaintext highlighter-rouge\">userContentController(_: didReceive:)</code>, so let’s add an extension to our ViewController class, add conformance to the <code class=\"language-plaintext highlighter-rouge\">WKScriptMessageHandler</code> protocol and provide an implementation for this function.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">extension</span> <span class=\"kt\">ViewController</span><span class=\"p\">:</span> <span class=\"kt\">WKScriptMessageHandler</span><span class=\"p\">{</span>\n    <span class=\"kd\">func</span> <span class=\"nf\">userContentController</span><span class=\"p\">(</span><span class=\"n\">_</span> <span class=\"nv\">userContentController</span><span class=\"p\">:</span> <span class=\"kt\">WKUserContentController</span><span class=\"p\">,</span> <span class=\"n\">didReceive</span> <span class=\"nv\">message</span><span class=\"p\">:</span> <span class=\"kt\">WKScriptMessage</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">guard</span> <span class=\"k\">let</span> <span class=\"nv\">dict</span> <span class=\"o\">=</span> <span class=\"n\">message</span><span class=\"o\">.</span><span class=\"n\">body</span> <span class=\"k\">as?</span> <span class=\"p\">[</span><span class=\"kt\">String</span> <span class=\"p\">:</span> <span class=\"kt\">AnyObject</span><span class=\"p\">]</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">dict</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>For now, we are assuming that the message sent from the web-page will be a dictionary, so we just transforming the body of a message to a dictionary and print the result.</p>\n\n<p>After that, we have to make our <code class=\"language-plaintext highlighter-rouge\">WKWebView</code> aware of this message handler. This can be done by adding this script message handler to the user content controller of the WKWebView.</p>\n\n<p>According to the documentation:</p>\n\n<blockquote>\n  <p>A <code class=\"language-plaintext highlighter-rouge\">WKUserContentController</code> object provides a way for JavaScript to post messages to a web view. The user content controller associated with a web view is specified by its web view configuration.</p>\n</blockquote>\n\n<p>Let’s add the following lines directly after the <code class=\"language-plaintext highlighter-rouge\">AutoLayout</code> constraints on the <code class=\"language-plaintext highlighter-rouge\">viewDidLoad</code> function.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">contentController</span> <span class=\"o\">=</span> <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">webView</span><span class=\"o\">.</span><span class=\"n\">configuration</span><span class=\"o\">.</span><span class=\"n\">userContentController</span>\n<span class=\"n\">contentController</span><span class=\"o\">.</span><span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"k\">self</span><span class=\"p\">,</span> <span class=\"nv\">name</span><span class=\"p\">:</span> <span class=\"s\">\"toggleMessageHandler\"</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>In this snippet, we are accessing the <code class=\"language-plaintext highlighter-rouge\">userContentController</code> of the web view and then call the <code class=\"language-plaintext highlighter-rouge\">add</code> function, providing the instance of a class conforming to the <code class=\"language-plaintext highlighter-rouge\">WKScriptMessageHandler</code> (in our case the <code class=\"language-plaintext highlighter-rouge\">ViewController</code>’s instance), and a name, which we later use on the web-page to send the messages to the app.</p>\n\n<p>Now, we are ready to send our messages from the web page.</p>\n\n<p>Let’s see how!</p>\n\n<h3 id=\"sending-message-from-the-webpage\">Sending message from the webpage</h3>\n\n<p>For this part, we are going to use some JavaScript to listen to the toggle events and then send a message to the app. This message will reflect if the toggle is selected or not. Let’s edit our HTML file and before the closing <code class=\"language-plaintext highlighter-rouge\">&lt;/body&gt;</code> tag, let’s add the following content:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;script&gt;</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">_selector</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">input[name=myCheckbox]</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n    <span class=\"nx\">_selector</span><span class=\"p\">.</span><span class=\"nx\">addEventListener</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">change</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kd\">var</span> <span class=\"nx\">message</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">_selector</span><span class=\"p\">.</span><span class=\"nx\">checked</span><span class=\"p\">)</span> <span class=\"p\">?</span> <span class=\"dl\">\"</span><span class=\"s2\">Toggle Switch is on</span><span class=\"dl\">\"</span> <span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">Toggle Switch is off</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">webkit</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">webkit</span><span class=\"p\">.</span><span class=\"nx\">messageHandlers</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">webkit</span><span class=\"p\">.</span><span class=\"nx\">messageHandlers</span><span class=\"p\">.</span><span class=\"nx\">toggleMessageHandler</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"nb\">window</span><span class=\"p\">.</span><span class=\"nx\">webkit</span><span class=\"p\">.</span><span class=\"nx\">messageHandlers</span><span class=\"p\">.</span><span class=\"nx\">toggleMessageHandler</span><span class=\"p\">.</span><span class=\"nx\">postMessage</span><span class=\"p\">({</span>\n                <span class=\"dl\">\"</span><span class=\"s2\">message</span><span class=\"dl\">\"</span><span class=\"p\">:</span> <span class=\"nx\">message</span>\n            <span class=\"p\">});</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">});</span>\n<span class=\"nt\">&lt;/script&gt;</span>\n</code></pre></div></div>\n\n<p>In this script, we are adding an eventListener for the toggle change event, and depending on whether it is selected or not, we are using the <code class=\"language-plaintext highlighter-rouge\">messageHandler</code> with name <code class=\"language-plaintext highlighter-rouge\">toggleMessageHandler</code> that we created previously, to call the function <code class=\"language-plaintext highlighter-rouge\">postMessage</code> which in turn will trigger the <code class=\"language-plaintext highlighter-rouge\">userContentController(_: didReceive:)</code>.</p>\n\n<p>If you run the app and turn the toggle on and off, you will be able to see some messages on the console like <code class=\"language-plaintext highlighter-rouge\">[\"message\": Toggle Switch is on]</code>.</p>\n\n<p>So far so good, but what happens if we don’t have access to the web-page to add the JavaScript snippet and we still want to receive the message? Fortunately, we can inject some JavaScript code to a web-page that we load on a <code class=\"language-plaintext highlighter-rouge\">WKWebView</code>!</p>\n\n<h3 id=\"injecting-javascript\">Injecting JavaScript</h3>\n\n<p>Let’s start by removing the JavaScript code that we added on the HTML. Next, open the <code class=\"language-plaintext highlighter-rouge\">ViewController</code> again, and add the following snippet after the <code class=\"language-plaintext highlighter-rouge\">contentController.add(self, name: \"toggleMessageHandler\")</code> line.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">js</span> <span class=\"o\">=</span> <span class=\"s\">\"\"\"\n    var _selector = document.querySelector('input[name=myCheckbox]');\n    _selector.addEventListener('change', function(event) {\n        var message = (_selector.checked) ? \"</span><span class=\"kt\">Toggle</span> <span class=\"kt\">Switch</span> <span class=\"k\">is</span> <span class=\"n\">on</span><span class=\"s\">\" : \"</span><span class=\"kt\">Toggle</span> <span class=\"kt\">Switch</span> <span class=\"k\">is</span> <span class=\"n\">off</span><span class=\"s\">\";\n        if (window.webkit &amp;&amp; window.webkit.messageHandlers &amp;&amp; window.webkit.messageHandlers.toggleMessageHandler) {\n            window.webkit.messageHandlers.toggleMessageHandler.postMessage({\n                \"</span><span class=\"n\">message</span><span class=\"s\">\": message\n            });\n        }\n    });\n\"\"\"</span>\n\n<span class=\"k\">let</span> <span class=\"nv\">script</span> <span class=\"o\">=</span> <span class=\"kt\">WKUserScript</span><span class=\"p\">(</span><span class=\"nv\">source</span><span class=\"p\">:</span> <span class=\"n\">js</span><span class=\"p\">,</span> <span class=\"nv\">injectionTime</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">atDocumentEnd</span><span class=\"p\">,</span> <span class=\"nv\">forMainFrameOnly</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">)</span>\n<span class=\"n\">contentController</span><span class=\"o\">.</span><span class=\"nf\">addUserScript</span><span class=\"p\">(</span><span class=\"n\">script</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>In this snippet, firstly we create a string variable with the JavaScript code that listens to the toggle events and sends the message to the messageHandler. Then, we are creating an instance of <code class=\"language-plaintext highlighter-rouge\">WKUserScript</code> with this code as a source, and finally we inject it to the <code class=\"language-plaintext highlighter-rouge\">WKWebView</code> by adding it to the <code class=\"language-plaintext highlighter-rouge\">contentController</code> that we also used earlier.</p>\n\n<p>If you run the app again, you will notice the same behavior as before.</p>\n\n<p>Last thing to achieve our goal, is to update the webpage.</p>\n\n<h3 id=\"evaluating-javascript-to-update-webpages-ui\">Evaluating JavaScript to update webpage’s UI</h3>\n\n<p><code class=\"language-plaintext highlighter-rouge\">WKWebView</code> provides a function to evaluate JavaScript code and this is what we are going to use to update the UI.</p>\n\n<p>Head over to the function <code class=\"language-plaintext highlighter-rouge\">userContentController(_: didReceive:)</code> that we defined on our extension and instead of the print command, add the following snippet:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">guard</span> <span class=\"k\">let</span> <span class=\"nv\">message</span> <span class=\"o\">=</span> <span class=\"n\">dict</span><span class=\"p\">[</span><span class=\"s\">\"message\"</span><span class=\"p\">]</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">let</span> <span class=\"nv\">script</span> <span class=\"o\">=</span> <span class=\"s\">\"document.getElementById('value').innerText = </span><span class=\"se\">\\\"\\(</span><span class=\"n\">message</span><span class=\"se\">)\\\"</span><span class=\"s\">\"</span>\n\n<span class=\"n\">webView</span><span class=\"o\">.</span><span class=\"nf\">evaluateJavaScript</span><span class=\"p\">(</span><span class=\"n\">script</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"n\">error</span><span class=\"p\">)</span> <span class=\"k\">in</span>\n    <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"nv\">result</span> <span class=\"o\">=</span> <span class=\"n\">result</span> <span class=\"p\">{</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"s\">\"Label is updated with message: </span><span class=\"se\">\\(</span><span class=\"n\">result</span><span class=\"se\">)</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"nv\">error</span> <span class=\"o\">=</span> <span class=\"n\">error</span> <span class=\"p\">{</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"s\">\"An error occurred: </span><span class=\"se\">\\(</span><span class=\"n\">error</span><span class=\"se\">)</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>In this snippet, we are accessing the value of <code class=\"language-plaintext highlighter-rouge\">message</code> key from the dictionary, create a variable with the JavaScript code to change the label on the web-page, and then use the <code class=\"language-plaintext highlighter-rouge\">evaluateJavaScript</code> to execute this code. <code class=\"language-plaintext highlighter-rouge\">evaluateJavaScript</code> takes a closure as a second argument to check if there was an error during the evaluation of the JavaScript code.</p>\n\n<p>And that’s about it, if you now run the app, the text of the label will change when the toggle is switched on or off.</p>\n\n<p><img src=\"https://diamantidis.github.io/assets/wkwebview/toggle_animation.gif\" alt=\"WebView with toggle on and off screenshot\" /></p>\n\n<h2 id=\"insight\">Insight</h2>\n\n<p>In this post, we have seen how to achieve bidirectional communication between a WKWebView and the website it loaded. Using this, we can use events from the website to trigger actions on the app and similarly adjust the loaded website based on the information we have on the app.</p>\n\n<p>Thanks for reading, I hope you find this post useful!\nFeel free to follow me on <a href=\"https://twitter.com/diamantidis_io\">Twitter</a> and share your comments about this post!</p>\n",
            "tags": ["iOS","Swift","WKWebview","JavaScript"],
            "image": "https://diamantidis.github.io/assets/socialIcon.png"
        },
        
        {
            "id": "https://diamantidis.github.io/2020/01/26/how-to-get-the-most-out-of-xcode-using-xcode-snippets",
            "url": "https://diamantidis.github.io/2020/01/26/how-to-get-the-most-out-of-xcode-using-xcode-snippets",
            "title": "How to get the most out of Xcode: Xcode Snippets",
            "date_published": "2020-01-26T04:00:00+00:00",
            
            "date_modified": "2020-01-26T04:00:00+00:00",
            
            "author": {
                "name": "Ioannis Diamantidis",
                "url": "https://diamantidis.github.io"
            },
            "summary": "<p>One of the hidden gems of Xcode is a feature called <code class=\"language-plaintext highlighter-rouge\">Xcode Snippets</code>. Despite the fact that most developers happen to use them quite often, only handful of them are aware of what they actually are and even fewer how to take full advantage of them.\nSimply put, they are just code snippets that you can add and reuse easily thanks to code completion.</p>\n\n",
            "content_html": "<p>One of the hidden gems of Xcode is a feature called <code class=\"language-plaintext highlighter-rouge\">Xcode Snippets</code>. Despite the fact that most developers happen to use them quite often, only handful of them are aware of what they actually are and even fewer how to take full advantage of them.\nSimply put, they are just code snippets that you can add and reuse easily thanks to code completion.</p>\n\n<p>The most common use-case is to save code chunks that you use quite frequently, are too long to type every time or are too hard to remember. Utilizing the power of Xcode Snippets will enable you to speed up your development process and eliminate the habit of copying/pasting pieces of code here and there.</p>\n\n<p>So, in this post I will try to walk you through everything you need to know about Xcode Snippets, starting from where you can find them, how to use them, how to create new custom snippets based on your needs, and finally how to share them with others.</p>\n\n<p>Let’s start!!</p>\n\n<h2 id=\"where-to-find-current-snippets\">Where to find current snippets</h2>\n\n<p>Xcode comes with a set of predefined snippets and to find them you can use one of the 3 following options. You can either:</p>\n<ol>\n  <li>use the top bar menu to navigate to <code class=\"language-plaintext highlighter-rouge\">View</code> &gt; <code class=\"language-plaintext highlighter-rouge\">Show Library</code> (requires a file with code to be opened, not a Storyboard or a plist)</li>\n  <li>use the keyboard shortcut shift-command-L (<code class=\"language-plaintext highlighter-rouge\">⇧</code>+<code class=\"language-plaintext highlighter-rouge\">⌘</code>+<code class=\"language-plaintext highlighter-rouge\">L</code>).</li>\n  <li>press the <code class=\"language-plaintext highlighter-rouge\">+</code> button on the right side of the toolbar</li>\n</ol>\n\n<p><img src=\"https://diamantidis.github.io/assets/xcode_snippets/xcode_toolbar.png\" alt=\"Xcode toolbar screenshot\" /></p>\n\n<h2 id=\"how-to-use-current-snippets\">How to use current snippets</h2>\n\n<p>If you want to use the existing snippets or any other that you may create, you have two options. You can either:</p>\n<ol>\n  <li>take advantage of code completion and start typing the shortcut of the snippet. For example, if you try to type <code class=\"language-plaintext highlighter-rouge\">func</code>, you will see a suggestion with the icon <code class=\"language-plaintext highlighter-rouge\">{}</code> on the left side, like the screenshot below:</li>\n</ol>\n\n<p><img src=\"https://diamantidis.github.io/assets/xcode_snippets/xcode_type_completion.png\" alt=\"Xcode func code completion screenshot\" /></p>\n\n<ol>\n  <li>or open the library with one of the three ways mentioned before, filter the snippet that you are interested in using and simply drag and drop it to your file.</li>\n</ol>\n\n<p><img src=\"https://diamantidis.github.io/assets/xcode_snippets/xcode_library_filter.png\" alt=\"Xcode library filter  screenshot\" /></p>\n\n<h2 id=\"how-to-add-a-new-snippet\">How to add a new snippet</h2>\n\n<p>Let’s now see how we can add a new custom snippet.</p>\n\n<p>One use-case that Xcode Snippets can be particularly useful is when developing the UI of the app using programmatic views with Auto Layout. Some parts of the code are quite verbose and taking advantage of Xcode snippets could prove to be a true time saver.</p>\n\n<p>Imagine that we want to add a UIStackView in our UIViewController. To do so, we would write something like the following:</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">private</span> <span class=\"kd\">lazy</span> <span class=\"k\">var</span> <span class=\"nv\">customStack</span><span class=\"p\">:</span> <span class=\"kt\">UIStackView</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"k\">let</span> <span class=\"nv\">stackView</span> <span class=\"o\">=</span> <span class=\"kt\">UIStackView</span><span class=\"p\">()</span>\n    <span class=\"n\">stackView</span><span class=\"o\">.</span><span class=\"n\">translatesAutoresizingMaskIntoConstraints</span> <span class=\"o\">=</span> <span class=\"kc\">false</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">stackView</span>\n<span class=\"p\">}()</span>\n</code></pre></div></div>\n\n<p>To create a new snippet, you will have to select this exact chunk of code, press right click and select the option <code class=\"language-plaintext highlighter-rouge\">Create Code Snippet</code>.</p>\n\n<p><img src=\"https://diamantidis.github.io/assets/xcode_snippets/xcode_menu_options.png\" alt=\"Xcode menu options screenshot\" /></p>\n\n<p>In the popup that will appear, enter a name and if you want, a summary. Last thing before pressing the <code class=\"language-plaintext highlighter-rouge\">Done</code> on the bottom right corner is to add some value on the <code class=\"language-plaintext highlighter-rouge\">completion</code> field. This value can later be used when you want to add the snippet in your code and code completion will do the rest for you. So, better put something short and relevant, like <code class=\"language-plaintext highlighter-rouge\">st</code>.</p>\n\n<p><img src=\"https://diamantidis.github.io/assets/xcode_snippets/create_snippet.png\" alt=\"Xcode create snippet screenshot\" /></p>\n\n<p>As you may have noticed from the screenshot above, there are some other options that we can tweak. These options include the language, the platform and lastly the availability which defines the scope in which the snippet will be available, and can have values such as <code class=\"language-plaintext highlighter-rouge\">All</code>, <code class=\"language-plaintext highlighter-rouge\">Class implementation</code>, <code class=\"language-plaintext highlighter-rouge\">Code Expression</code>, <code class=\"language-plaintext highlighter-rouge\">Function or method</code>, <code class=\"language-plaintext highlighter-rouge\">String or comment</code> and <code class=\"language-plaintext highlighter-rouge\">Top level</code>.</p>\n\n<p>Now, we can go back to our code, delete the entire <code class=\"language-plaintext highlighter-rouge\">customStack</code> variable that we created before and instead type <code class=\"language-plaintext highlighter-rouge\">st</code> or the value that you decide to put on the <code class=\"language-plaintext highlighter-rouge\">completion</code> field in the previous step.</p>\n\n<p>First among the option that code completion suggests is the snippet that we have just created. Select this option, press <code class=\"language-plaintext highlighter-rouge\">Enter</code> and voilà, the whole UIStackView snippet is added.</p>\n\n<p><img src=\"https://diamantidis.github.io/assets/xcode_snippets/code_snippet_type_completion.png\" alt=\"Code snippet code completion screenshot\" /></p>\n\n<p>But, that’s not all you can do. Usually, you would prefer a different and more descriptive name each time you want to add a new variable. This can be done with the help of placeholders. \nLet’s see first how to add them and then what they actually are.</p>\n\n<p>Open the snippet Library with one of the three ways mentioned above, find the <code class=\"language-plaintext highlighter-rouge\">stackView</code> snippet and press the button <code class=\"language-plaintext highlighter-rouge\">Edit</code> on the bottom right corner.</p>\n\n<p>If you try to replace the variable name from <code class=\"language-plaintext highlighter-rouge\">customStack</code> to <code class=\"language-plaintext highlighter-rouge\">&lt;# name #&gt;</code>, you will notice this part changing to a label with blue background. What does it mean?</p>\n\n<p>Press the <code class=\"language-plaintext highlighter-rouge\">Done</code> button, go back to the editor and type the completion <code class=\"language-plaintext highlighter-rouge\">st</code> again. The code snippet is added as before but this time instead of the name <code class=\"language-plaintext highlighter-rouge\">customStack</code>, you have a placeholder with focus, so you can just type something and that will be the name of the <code class=\"language-plaintext highlighter-rouge\">UIStackView</code> variable. Similarly, we can add more placeholders and use the Tab button to change the focus and move to the next placeholder.</p>\n\n<p>For example, for the <code class=\"language-plaintext highlighter-rouge\">UIStackView</code> we may want to set some more properties like the <code class=\"language-plaintext highlighter-rouge\">alignment</code>, the <code class=\"language-plaintext highlighter-rouge\">spacing</code> and the <code class=\"language-plaintext highlighter-rouge\">distribution</code>, like in the following snippet:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">private</span> <span class=\"kd\">lazy</span> <span class=\"kd\">var</span> <span class=\"o\">&lt;</span><span class=\"err\">#</span> <span class=\"n\">name</span> <span class=\"err\">#</span><span class=\"o\">&gt;</span><span class=\"p\">:</span> <span class=\"kt\">UIStackView</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"k\">let</span> <span class=\"nv\">stackView</span> <span class=\"o\">=</span> <span class=\"kt\">UIStackView</span><span class=\"p\">()</span>\n    <span class=\"n\">stackView</span><span class=\"o\">.</span><span class=\"n\">alignment</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"err\">#</span> <span class=\"n\">alignment</span> <span class=\"err\">#</span><span class=\"o\">&gt;</span> \n    <span class=\"n\">stackView</span><span class=\"o\">.</span><span class=\"n\">spacing</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"err\">#</span> <span class=\"n\">spacing</span> <span class=\"err\">#</span><span class=\"o\">&gt;</span>\n    <span class=\"n\">stackView</span><span class=\"o\">.</span><span class=\"n\">distribution</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"err\">#</span> <span class=\"n\">distribution</span> <span class=\"err\">#</span><span class=\"o\">&gt;</span>\n    <span class=\"n\">stackView</span><span class=\"o\">.</span><span class=\"n\">translatesAutoresizingMaskIntoConstraints</span> <span class=\"o\">=</span> <span class=\"kc\">false</span>\n    <span class=\"k\">return</span> <span class=\"n\">stackView</span>\n<span class=\"p\">}()</span>\n</code></pre></div></div>\n\n<p>As a result, when you type the completion <code class=\"language-plaintext highlighter-rouge\">st</code> in your editor, you will get something like the following gif:</p>\n\n<p><img src=\"https://diamantidis.github.io/assets/xcode_snippets/xcode_snippet_example.gif\" alt=\"Code snippet example screenshot\" /></p>\n\n<h2 id=\"time-to-share\">Time to share</h2>\n<p>So far we have seen how to create and use the snippets, so now it is time to start sharing them with others that might find them useful, either in your team or the whole community. Let’s see how!</p>\n\n<p>For each custom snippet that we have created, there is a file stored in the directory <code class=\"language-plaintext highlighter-rouge\">~/Library/Developer/Xcode\n/UserData/CodeSnippets/</code>. Those files are plain plist documents using a random UUID as a name and having the <code class=\"language-plaintext highlighter-rouge\">.codesnippet</code> file extension.</p>\n\n<p>You can simply copy those files, rename them to a more descriptive name and then add them to a repo to share them with others. With a little search, you can find examples of such repos on GitHub, like this <a href=\"https://github.com/burczyk/XcodeSwiftSnippets\">one</a> which you can use right now.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>And that’s about it! In this post, we have seen how to create, use and share Xcode snippets.</p>\n\n<p>In conjunction with <a href=\"/2019/07/21/xcode-custom-templates\">Xcode Templates</a> and <a href=\"/2018/12/07/xcode-shortcuts-and-custom-key-bindings\">shortcuts</a>, Xcode snippets can enhance productivity and efficiency while writing code in Xcode. Especially when it comes to trivial repetitive tasks, you would prefer to perform them as fast as possible, so that you can focus on the more interesting and important tasks.</p>\n\n<p>Moreover, Xcode snippets can prove to be really helpful in live code presentations where they can both relieve you of the stress of mistyping something and also speed up the presentation by avoiding the unwanted pauses while typing.</p>\n\n<p>Thanks for reading, I hope you find this post useful!\nFeel free to follow me on <a href=\"https://twitter.com/diamantidis_io\">Twitter</a> and share your comments about this post!!</p>\n",
            "tags": ["iOS","Xcode","Productivity"],
            "image": "https://diamantidis.github.io/assets/socialIcon.png"
        },
        
        {
            "id": "https://diamantidis.github.io/2020/01/19/access-webpage-properties-from-ios-share-extension",
            "url": "https://diamantidis.github.io/2020/01/19/access-webpage-properties-from-ios-share-extension",
            "title": "Accessing web page properties from an iOS Share Extension",
            "date_published": "2020-01-19T04:00:00+00:00",
            
            "date_modified": "2020-01-19T04:00:00+00:00",
            
            "author": {
                "name": "Ioannis Diamantidis",
                "url": "https://diamantidis.github.io"
            },
            "summary": "<p>A Share Extension is a type of App Extension which is used to share content with other apps. One such content type and a quite popular use case for share extensions is sharing websites and definitely one of the factors that led to this is the seamless integration with Safari.</p>\n\n",
            "content_html": "<p>A Share Extension is a type of App Extension which is used to share content with other apps. One such content type and a quite popular use case for share extensions is sharing websites and definitely one of the factors that led to this is the seamless integration with Safari.</p>\n\n<p>Recently I have been working on a web page Share Extension and one of the tasks that I wanted to achieve is to show the favicon of the web page as part of the UI of the share extension. After some research, I find out that a share extension offers some other capabilities and enables us to do more interesting things beyond just sharing the URL of the web page.</p>\n\n<p>One example is that it allows us to parse the web page that’s being shared and access its elements, like for example the title of the page or the favicon from the link tag on the <code class=\"language-plaintext highlighter-rouge\">&lt;head&gt;</code> of the website.</p>\n\n<p>And that’s what this post is all about! We are going to investigate how to access some of the web page properties like the title, the host name and the favicon URL for the website that is being shared.</p>\n\n<p>So, let’s go!</p>\n\n<blockquote>\n  <p>For this post, I assume that you know how to create an iOS Share Extension. If you want to learn more, check out <a href=\"/2020/01/11/share-extension-custom-ui\">a previous post describing how to create a Share Extension and customize its UI</a>.</p>\n</blockquote>\n\n<h1 id=\"implementation\">Implementation</h1>\n\n<p>To begin with, let’s try to get the title of the web page. To accomplish that, we are going to use some JavaScript code which Safari will execute and return the results to our extension. Let’s see how!</p>\n\n<p>First, let’s move to our Share Extension and create a JavaScript file named <code class=\"language-plaintext highlighter-rouge\">ExtensionClass.js</code> and add the following content:</p>\n<div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">ExtensionClass</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{};</span>\n\n<span class=\"nx\">ExtensionClass</span><span class=\"p\">.</span><span class=\"nx\">prototype</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"na\">run</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">arguments</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">arguments</span><span class=\"p\">.</span><span class=\"nx\">completionFunction</span><span class=\"p\">({</span>\n            <span class=\"dl\">\"</span><span class=\"s2\">title</span><span class=\"dl\">\"</span><span class=\"p\">:</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">title</span>\n        <span class=\"p\">});</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n\n<span class=\"kd\">var</span> <span class=\"nx\">ExtensionPreprocessingJS</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">ExtensionClass</span><span class=\"p\">;</span>\n</code></pre></div></div>\n\n<p>Basically what we are doing here is to create a custom JavaScript class that contains a <code class=\"language-plaintext highlighter-rouge\">run</code> function and then assign a new instance of it to a global object named <code class=\"language-plaintext highlighter-rouge\">ExtensionPreprocessingJS</code>. The name <code class=\"language-plaintext highlighter-rouge\">ExtensionPreprocessingJS</code> is required in this file whereas the name of the custom class can vary.</p>\n\n<p>Safari will invoke this <code class=\"language-plaintext highlighter-rouge\">run</code> function when it loads the JavaScript file and it will provide an argument with the name <code class=\"language-plaintext highlighter-rouge\">completionFunction</code> which in turn takes a key-value object as a parameter. This key-value object is the information that will be passed to our <code class=\"language-plaintext highlighter-rouge\">Share Extension</code>.</p>\n\n<p>After that, we will have to add an entry in the <code class=\"language-plaintext highlighter-rouge\">Info.plist</code> file. Open this file and add the following key-value pair inside the dictionary value of the key <code class=\"language-plaintext highlighter-rouge\">NSExtensionAttributes</code>:</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;key&gt;</span>NSExtensionJavaScriptPreprocessingFile<span class=\"nt\">&lt;/key&gt;</span>\n<span class=\"nt\">&lt;string&gt;</span>ExtensionClass<span class=\"nt\">&lt;/string&gt;</span>\n</code></pre></div></div>\n\n<p>We will also replace the value for the <code class=\"language-plaintext highlighter-rouge\">NSExtensionActivationRule</code> from</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;string&gt;</span>TRUEPREDICATE<span class=\"nt\">&lt;/string&gt;</span>\n</code></pre></div></div>\n\n<p>to</p>\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;dict&gt;</span>\n    <span class=\"nt\">&lt;key&gt;</span>NSExtensionActivationSupportsWebPageWithMaxCount<span class=\"nt\">&lt;/key&gt;</span>\n    <span class=\"nt\">&lt;integer&gt;</span>1<span class=\"nt\">&lt;/integer&gt;</span>\n    <span class=\"nt\">&lt;key&gt;</span>NSExtensionActivationSupportsWebURLWithMaxCount<span class=\"nt\">&lt;/key&gt;</span>\n    <span class=\"nt\">&lt;integer&gt;</span>1<span class=\"nt\">&lt;/integer&gt;</span>\n<span class=\"nt\">&lt;/dict&gt;</span>\n</code></pre></div></div>\n\n<p>Then, head to the Swift file and add the following function inside your View Controller:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">private</span> <span class=\"kd\">func</span> <span class=\"nf\">accessWebpageProperties</span><span class=\"p\">(</span><span class=\"nv\">extensionItem</span><span class=\"p\">:</span> <span class=\"kt\">NSExtensionItem</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">let</span> <span class=\"nv\">propertyList</span> <span class=\"o\">=</span> <span class=\"kt\">String</span><span class=\"p\">(</span><span class=\"n\">kUTTypePropertyList</span><span class=\"p\">)</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">attachment</span> <span class=\"k\">in</span> <span class=\"n\">extensionItem</span><span class=\"o\">.</span><span class=\"n\">attachments</span><span class=\"o\">!</span> <span class=\"k\">where</span> <span class=\"n\">attachment</span><span class=\"o\">.</span><span class=\"nf\">hasItemConformingToTypeIdentifier</span><span class=\"p\">(</span><span class=\"n\">propertyList</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">attachment</span><span class=\"o\">.</span><span class=\"nf\">loadItem</span><span class=\"p\">(</span>\n            <span class=\"nv\">forTypeIdentifier</span><span class=\"p\">:</span> <span class=\"n\">propertyList</span><span class=\"p\">,</span>\n            <span class=\"nv\">options</span><span class=\"p\">:</span> <span class=\"kc\">nil</span><span class=\"p\">,</span>\n            <span class=\"nv\">completionHandler</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">,</span> <span class=\"n\">error</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Void</span> <span class=\"k\">in</span>\n\n                <span class=\"k\">guard</span> <span class=\"k\">let</span> <span class=\"nv\">dictionary</span> <span class=\"o\">=</span> <span class=\"n\">item</span> <span class=\"k\">as?</span> <span class=\"kt\">NSDictionary</span><span class=\"p\">,</span>\n                    <span class=\"k\">let</span> <span class=\"nv\">results</span> <span class=\"o\">=</span> <span class=\"n\">dictionary</span><span class=\"p\">[</span><span class=\"kt\">NSExtensionJavaScriptPreprocessingResultsKey</span><span class=\"p\">]</span> <span class=\"k\">as?</span> <span class=\"kt\">NSDictionary</span><span class=\"p\">,</span>\n                    <span class=\"k\">let</span> <span class=\"nv\">title</span> <span class=\"o\">=</span> <span class=\"n\">results</span><span class=\"p\">[</span><span class=\"s\">\"title\"</span><span class=\"p\">]</span> <span class=\"k\">as?</span> <span class=\"kt\">String</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n                    <span class=\"k\">return</span>\n                <span class=\"p\">}</span>\n\n                <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"s\">\"title: </span><span class=\"se\">\\(</span><span class=\"n\">title</span><span class=\"se\">)</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Here, we iterate over the attachments if there are any and then filter those who conform to the <code class=\"language-plaintext highlighter-rouge\">kUTTypePropertyList</code> type identifier.\nAfter that, we load the item’s data, parse it and using the key <code class=\"language-plaintext highlighter-rouge\">NSExtensionJavaScript\nPreprocessingResultsKey</code> we retrieve the object passed on the <code class=\"language-plaintext highlighter-rouge\">completionFunction</code> in the JavaScript code</p>\n\n<p>Lastly, all you have to do is to call this function from the <code class=\"language-plaintext highlighter-rouge\">viewDidLoad</code> function, in the following way:</p>\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"nv\">item</span> <span class=\"o\">=</span> <span class=\"n\">extensionContext</span><span class=\"p\">?</span><span class=\"o\">.</span><span class=\"n\">inputItems</span><span class=\"o\">.</span><span class=\"n\">first</span> <span class=\"k\">as?</span> <span class=\"kt\">NSExtensionItem</span> <span class=\"p\">{</span>\n    <span class=\"nf\">accessWebpageProperties</span><span class=\"p\">(</span><span class=\"nv\">extensionItem</span><span class=\"p\">:</span> <span class=\"n\">item</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>If you now run the extension Target on Safari, and try to share a web page using this Share Extension, you will see the title on the title of the page on the Console View.</p>\n\n<p>In a similar fashion, we can access other information like the host name or the URL of the favicon.</p>\n\n<p>Getting the host name in JavaScript is as easy as executing <code class=\"language-plaintext highlighter-rouge\">document.location.hostname</code>, so it’s more or less the same as the title. On the other hand, retrieving the URL of the favicon is quite more complicated. The preferred way to declare a favicon and the one that most websites follow is by adding a link element with a <code class=\"language-plaintext highlighter-rouge\">rel=\"icon\"</code> or <code class=\"language-plaintext highlighter-rouge\">rel=\"shortcut icon\"</code> attribute on the HTML head.</p>\n\n<p>For this reason, we are going to add a function in our JavaScript file named <code class=\"language-plaintext highlighter-rouge\">fetchFavicon</code> and its responsibility will be to traverse the web page and find if there is one such element.</p>\n\n<p>The final version of the <code class=\"language-plaintext highlighter-rouge\">ExtensionClass.js</code> will be like the following snippet:</p>\n\n<div class=\"language-javascript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">ExtensionClass</span> <span class=\"o\">=</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{};</span>\n\n<span class=\"nx\">ExtensionClass</span><span class=\"p\">.</span><span class=\"nx\">prototype</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"na\">run</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">arguments</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">arguments</span><span class=\"p\">.</span><span class=\"nx\">completionFunction</span><span class=\"p\">({</span>\n            <span class=\"dl\">\"</span><span class=\"s2\">title</span><span class=\"dl\">\"</span><span class=\"p\">:</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">title</span><span class=\"p\">,</span>\n            <span class=\"dl\">\"</span><span class=\"s2\">hostname</span><span class=\"dl\">\"</span><span class=\"p\">:</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">location</span><span class=\"p\">.</span><span class=\"nx\">hostname</span><span class=\"p\">,</span>\n            <span class=\"dl\">\"</span><span class=\"s2\">favicon</span><span class=\"dl\">\"</span><span class=\"p\">:</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">fetchFavicon</span><span class=\"p\">()</span>\n        <span class=\"p\">});</span>\n    <span class=\"p\">},</span>\n    <span class=\"na\">fetchFavicon</span><span class=\"p\">:</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"nb\">Array</span><span class=\"p\">.</span><span class=\"k\">from</span><span class=\"p\">(</span><span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementsByTagName</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">link</span><span class=\"dl\">\"</span><span class=\"p\">))</span>\n                <span class=\"p\">.</span><span class=\"nx\">filter</span><span class=\"p\">(</span><span class=\"nx\">element</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">element</span><span class=\"p\">.</span><span class=\"nx\">rel</span> <span class=\"o\">==</span> <span class=\"dl\">\"</span><span class=\"s2\">icon</span><span class=\"dl\">\"</span> <span class=\"o\">||</span> <span class=\"nx\">element</span><span class=\"p\">.</span><span class=\"nx\">rel</span> <span class=\"o\">==</span> <span class=\"dl\">\"</span><span class=\"s2\">shortcut icon</span><span class=\"dl\">\"</span><span class=\"p\">)</span>\n                <span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"nx\">elem</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">elem</span><span class=\"p\">.</span><span class=\"nx\">href</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n\n<span class=\"kd\">var</span> <span class=\"nx\">ExtensionPreprocessingJS</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">ExtensionClass</span><span class=\"p\">;</span>\n</code></pre></div></div>\n\n<p>Then we can move back to our View Controller and edit the body of the <code class=\"language-plaintext highlighter-rouge\">completionHandler</code> in <code class=\"language-plaintext highlighter-rouge\">accessWebpageProperties</code> to look like the following snippet:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">guard</span> <span class=\"k\">let</span> <span class=\"nv\">dictionary</span> <span class=\"o\">=</span> <span class=\"n\">item</span> <span class=\"k\">as?</span> <span class=\"kt\">NSDictionary</span><span class=\"p\">,</span>\n    <span class=\"k\">let</span> <span class=\"nv\">results</span> <span class=\"o\">=</span> <span class=\"n\">dictionary</span><span class=\"p\">[</span><span class=\"kt\">NSExtensionJavaScriptPreprocessingResultsKey</span><span class=\"p\">]</span> <span class=\"k\">as?</span> <span class=\"kt\">NSDictionary</span><span class=\"p\">,</span>\n    <span class=\"k\">let</span> <span class=\"nv\">title</span> <span class=\"o\">=</span> <span class=\"n\">results</span><span class=\"p\">[</span><span class=\"s\">\"title\"</span><span class=\"p\">]</span> <span class=\"k\">as?</span> <span class=\"kt\">String</span><span class=\"p\">,</span>\n    <span class=\"k\">let</span> <span class=\"nv\">hostname</span> <span class=\"o\">=</span> <span class=\"n\">results</span><span class=\"p\">[</span><span class=\"s\">\"hostname\"</span><span class=\"p\">]</span> <span class=\"k\">as?</span> <span class=\"kt\">String</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// Fallback to the favicon.ico file, if JavaScript returns nil</span>\n<span class=\"k\">let</span> <span class=\"nv\">favicon</span> <span class=\"o\">=</span> <span class=\"n\">results</span><span class=\"p\">[</span><span class=\"s\">\"favicon\"</span><span class=\"p\">]</span> <span class=\"k\">as?</span> <span class=\"kt\">String</span> <span class=\"p\">??</span> <span class=\"s\">\"</span><span class=\"se\">\\(</span><span class=\"n\">hostname</span><span class=\"se\">)</span><span class=\"s\">/favicon.ico\"</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"s\">\"title: </span><span class=\"se\">\\(</span><span class=\"n\">title</span><span class=\"se\">)</span><span class=\"s\">, hostname: </span><span class=\"se\">\\(</span><span class=\"n\">hostname</span><span class=\"se\">)</span><span class=\"s\">, favicon: </span><span class=\"se\">\\(</span><span class=\"n\">favicon</span><span class=\"se\">)</span><span class=\"s\">\"</span><span class=\"p\">)</span>    \n</code></pre></div></div>\n\n<p>And that’s about it! If you try to run and use the Share Extension again, you will see the message with the corresponding values on the Console View. :tada:</p>\n\n<h1 id=\"conclusion\">Conclusion</h1>\n\n<p>In this post, we have seen how to parse the webpage from our webpage Share Extension and access some information like the title, the host name and the favicon’s URL.</p>\n\n<p>Depending on your case, you can follow a similar approach to access the webpage elements that you are interested in and later use them in your View Controller to populate some UI elements of the Share Extension or share it with the associated main app.</p>\n\n<p>Thanks for reading, I hope you find this post useful!\nFeel free to follow me on <a href=\"https://twitter.com/diamantidis_io\">Twitter</a> and share your questions, suggestion or comments about this post!!</p>\n",
            "tags": ["iOS","Swift","App Extensions"],
            "image": "https://diamantidis.github.io/assets/socialIcon.png"
        },
        
        {
            "id": "https://diamantidis.github.io/2020/01/11/share-extension-custom-ui",
            "url": "https://diamantidis.github.io/2020/01/11/share-extension-custom-ui",
            "title": "Custom UI for Share Extensions",
            "date_published": "2020-01-11T04:00:00+00:00",
            
            "date_modified": "2020-01-11T04:00:00+00:00",
            
            "author": {
                "name": "Ioannis Diamantidis",
                "url": "https://diamantidis.github.io"
            },
            "summary": "<p>iOS comes with a plethora of App Extensions that you can use to improve the functionality and the user experience of your app. An example of such extension, and the topic of this post is the <code class=\"language-plaintext highlighter-rouge\">Share Extension</code>. \nThis extension makes your app appear on a list of apps when the user presses the share button on apps like, for example, a webpage on Safari, an image on Photos, a simple text and so on.</p>\n\n",
            "content_html": "<p>iOS comes with a plethora of App Extensions that you can use to improve the functionality and the user experience of your app. An example of such extension, and the topic of this post is the <code class=\"language-plaintext highlighter-rouge\">Share Extension</code>. \nThis extension makes your app appear on a list of apps when the user presses the share button on apps like, for example, a webpage on Safari, an image on Photos, a simple text and so on.</p>\n\n<p><img src=\"https://diamantidis.github.io/assets/share_extensions/share_button.png\" alt=\"Share button screen-shot\" /></p>\n\n<p>Adding a Share Extension to your app is straight-forward since Xcode offers a <code class=\"language-plaintext highlighter-rouge\">Share Extension</code> template that you can use when creating a new one.</p>\n\n<p><img src=\"https://diamantidis.github.io/assets/share_extensions/xcode_share_template.png\" alt=\"Xcode share extension template screenshot\" /></p>\n\n<p>The target created by this templates contains, amongst others, a ViewController that complies to <a href=\"https://developer.apple.com/documentation/social/slcomposeserviceviewcontroller\"><code class=\"language-plaintext highlighter-rouge\">SLComposeServiceViewController</code></a>. As a result, the UI is quite predefined and there is little you can do to interfere with it. Now, if you try to run the target in Safari, it will look like the following screenshot.</p>\n\n<p><img src=\"https://diamantidis.github.io/assets/share_extensions/default_extension_ui.png\" alt=\"Default extension UI screenshot\" /></p>\n\n<p>Comparing this with the UI of the <code class=\"language-plaintext highlighter-rouge\">Share Extension</code> of other apps, you will find out that apps like the <code class=\"language-plaintext highlighter-rouge\">Reminders</code> have quite different UI, which is more appealing, covers the bigger part of the screen and thus allowing the user to focus on the task in place.</p>\n\n<p><img src=\"https://diamantidis.github.io/assets/share_extensions/reminder_share_extension.png\" alt=\"Reminders App Extension screenshot\" /></p>\n\n<p>Hmm!! :thinking:\nIs it possible to achieve a similar design for the <code class=\"language-plaintext highlighter-rouge\">Share Extension</code> of our app? This is the question I will try to answer in this post.</p>\n\n<p>Long story short, the answer is that we can definitely achieve a design like this by creating a <code class=\"language-plaintext highlighter-rouge\">Share Extension</code> as usual, but this time removing the conformance to <code class=\"language-plaintext highlighter-rouge\">SLComposeServiceViewController</code>. As a result, we will no longer rely on the methods like <code class=\"language-plaintext highlighter-rouge\">isContentValid</code> and <code class=\"language-plaintext highlighter-rouge\">configurationItems</code>. Instead, we have to provide our own implementation.</p>\n\n<p>Let’s see how this can be done step by step.</p>\n\n<h2 id=\"implementation\">Implementation</h2>\n\n<p>Let’s start with adding a new extension.\nFirst, use the top menu to navigate to <code class=\"language-plaintext highlighter-rouge\">File</code> &gt; <code class=\"language-plaintext highlighter-rouge\">New</code> &gt; <code class=\"language-plaintext highlighter-rouge\">Target</code>. There, search for and choose the <code class=\"language-plaintext highlighter-rouge\">Share Extension</code> option from the list of the templates for an iOS app. Name it as you wish and press <code class=\"language-plaintext highlighter-rouge\">Activate</code> on the pop up that will be displayed after that.</p>\n\n<p>If you now run the extension against Safari using a Simulator you will get a UI similar with the image mentioned before. Now that we have our extension in place, let’s see how we can change the UI to look more like the <code class=\"language-plaintext highlighter-rouge\">Reminders</code> app.</p>\n\n<p>The extension that we have created consists of 3 files; the <code class=\"language-plaintext highlighter-rouge\">ShareViewController.swift</code>, the <code class=\"language-plaintext highlighter-rouge\">MainInterface.storyboard</code> and the <code class=\"language-plaintext highlighter-rouge\">Info.plist</code>. For this task, I am not going to use the Storyboard but rather build the UI programmatically.</p>\n\n<h3 id=\"swift-code\">Swift code</h3>\n\n<p>Head to the <code class=\"language-plaintext highlighter-rouge\">ShareViewController.swift</code> and delete the whole <code class=\"language-plaintext highlighter-rouge\">ShareViewController</code> class. \nIn its place, add a new class named <code class=\"language-plaintext highlighter-rouge\">CustomShareViewController</code> with the following content:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"kt\">CustomShareViewController</span><span class=\"p\">:</span> <span class=\"kt\">UIViewController</span> <span class=\"p\">{</span>\n    <span class=\"k\">override</span> <span class=\"kd\">func</span> <span class=\"nf\">viewDidLoad</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">super</span><span class=\"o\">.</span><span class=\"nf\">viewDidLoad</span><span class=\"p\">()</span>\n\n        <span class=\"c1\">// 1: Set the background and call the function to create the navigation bar</span>\n        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">view</span><span class=\"o\">.</span><span class=\"n\">backgroundColor</span> <span class=\"o\">=</span> <span class=\"o\">.</span><span class=\"n\">systemGray6</span>\n        <span class=\"nf\">setupNavBar</span><span class=\"p\">()</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\">// 2: Set the title and the navigation items</span>\n    <span class=\"kd\">private</span> <span class=\"kd\">func</span> <span class=\"nf\">setupNavBar</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">navigationItem</span><span class=\"o\">.</span><span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"s\">\"My app\"</span>\n\n        <span class=\"k\">let</span> <span class=\"nv\">itemCancel</span> <span class=\"o\">=</span> <span class=\"kt\">UIBarButtonItem</span><span class=\"p\">(</span><span class=\"nv\">barButtonSystemItem</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">cancel</span><span class=\"p\">,</span> <span class=\"nv\">target</span><span class=\"p\">:</span> <span class=\"k\">self</span><span class=\"p\">,</span> <span class=\"nv\">action</span><span class=\"p\">:</span> <span class=\"kd\">#selector(</span><span class=\"nf\">cancelAction</span><span class=\"kd\">)</span><span class=\"p\">)</span>\n        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">navigationItem</span><span class=\"o\">.</span><span class=\"nf\">setLeftBarButton</span><span class=\"p\">(</span><span class=\"n\">itemCancel</span><span class=\"p\">,</span> <span class=\"nv\">animated</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">)</span>\n\n        <span class=\"k\">let</span> <span class=\"nv\">itemDone</span> <span class=\"o\">=</span> <span class=\"kt\">UIBarButtonItem</span><span class=\"p\">(</span><span class=\"nv\">barButtonSystemItem</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">done</span><span class=\"p\">,</span> <span class=\"nv\">target</span><span class=\"p\">:</span> <span class=\"k\">self</span><span class=\"p\">,</span> <span class=\"nv\">action</span><span class=\"p\">:</span> <span class=\"kd\">#selector(</span><span class=\"nf\">doneAction</span><span class=\"kd\">)</span><span class=\"p\">)</span>\n        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">navigationItem</span><span class=\"o\">.</span><span class=\"nf\">setRightBarButton</span><span class=\"p\">(</span><span class=\"n\">itemDone</span><span class=\"p\">,</span> <span class=\"nv\">animated</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\">// 3: Define the actions for the navigation items</span>\n    <span class=\"kd\">@objc</span> <span class=\"kd\">private</span> <span class=\"kd\">func</span> <span class=\"nf\">cancelAction</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">let</span> <span class=\"nv\">error</span> <span class=\"o\">=</span> <span class=\"kt\">NSError</span><span class=\"p\">(</span><span class=\"nv\">domain</span><span class=\"p\">:</span> <span class=\"s\">\"some.bundle.identifier\"</span><span class=\"p\">,</span> <span class=\"nv\">code</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nv\">userInfo</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">NSLocalizedDescriptionKey</span><span class=\"p\">:</span> <span class=\"s\">\"An error description\"</span><span class=\"p\">])</span>\n        <span class=\"n\">extensionContext</span><span class=\"p\">?</span><span class=\"o\">.</span><span class=\"nf\">cancelRequest</span><span class=\"p\">(</span><span class=\"nv\">withError</span><span class=\"p\">:</span> <span class=\"n\">error</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kd\">@objc</span> <span class=\"kd\">private</span> <span class=\"kd\">func</span> <span class=\"nf\">doneAction</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"n\">extensionContext</span><span class=\"p\">?</span><span class=\"o\">.</span><span class=\"nf\">completeRequest</span><span class=\"p\">(</span><span class=\"nv\">returningItems</span><span class=\"p\">:</span> <span class=\"p\">[],</span> <span class=\"nv\">completionHandler</span><span class=\"p\">:</span> <span class=\"kc\">nil</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>This class inherits directly from <code class=\"language-plaintext highlighter-rouge\">UIViewController</code> and for now we simply set a different background color and the navigation Bar which will contains a title and two buttons; one to cancel and one to complete the share request.</p>\n\n<p>After that we will create a subclass of <code class=\"language-plaintext highlighter-rouge\">UINavigationController</code> which we will name <code class=\"language-plaintext highlighter-rouge\">CustomShareNavigationController</code> and which will contain the following content:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// 1: Set the `objc` annotation</span>\n<span class=\"kd\">@objc</span><span class=\"p\">(</span><span class=\"kt\">CustomShareNavigationController</span><span class=\"p\">)</span>\n<span class=\"kd\">class</span> <span class=\"kt\">CustomShareNavigationController</span><span class=\"p\">:</span> <span class=\"kt\">UINavigationController</span> <span class=\"p\">{</span>\n\n    <span class=\"k\">override</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">nibName</span> <span class=\"nv\">nibNameOrNil</span><span class=\"p\">:</span> <span class=\"kt\">String</span><span class=\"p\">?,</span> <span class=\"n\">bundle</span> <span class=\"nv\">nibBundleOrNil</span><span class=\"p\">:</span> <span class=\"kt\">Bundle</span><span class=\"p\">?)</span> <span class=\"p\">{</span>\n        <span class=\"k\">super</span><span class=\"o\">.</span><span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"nv\">nibName</span><span class=\"p\">:</span> <span class=\"n\">nibNameOrNil</span><span class=\"p\">,</span> <span class=\"nv\">bundle</span><span class=\"p\">:</span> <span class=\"n\">nibBundleOrNil</span><span class=\"p\">)</span>\n\n        <span class=\"c1\">// 2: set the ViewControllers</span>\n        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"nf\">setViewControllers</span><span class=\"p\">([</span><span class=\"kt\">CustomShareViewController</span><span class=\"p\">()],</span> <span class=\"nv\">animated</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kd\">@available</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"p\">,</span> <span class=\"n\">unavailable</span><span class=\"p\">)</span>\n    <span class=\"kd\">required</span> <span class=\"nf\">init</span><span class=\"p\">?(</span><span class=\"n\">coder</span> <span class=\"nv\">aDecoder</span><span class=\"p\">:</span> <span class=\"kt\">NSCoder</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">super</span><span class=\"o\">.</span><span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"nv\">coder</span><span class=\"p\">:</span> <span class=\"n\">aDecoder</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>In this class we set the view controllers inside the <code class=\"language-plaintext highlighter-rouge\">init</code> method. Also, notice that we have added the <code class=\"language-plaintext highlighter-rouge\">@objc</code> annotation.</p>\n\n<p>And that’s it with the Swift code for now.</p>\n\n<blockquote>\n  <p>Before we move on to the <code class=\"language-plaintext highlighter-rouge\">Info.plist</code>, if you want to, you can move these classes to separate files or rename the current one.</p>\n</blockquote>\n\n<h3 id=\"infoplist\">Info.plist</h3>\n\n<p>Inside the <code class=\"language-plaintext highlighter-rouge\">Info.plist</code> we have to make a few changes. Firstly, I would suggest to open the file as source code by right-clicking on the file and then selecting <code class=\"language-plaintext highlighter-rouge\">Open As</code> -&gt; <code class=\"language-plaintext highlighter-rouge\">Source Code</code>. This would make it easier to copy and paste or remove the chunks that we are going to change.</p>\n\n<p>Let’s start by adding the following key-value pair inside the <code class=\"language-plaintext highlighter-rouge\">NSExtension</code> dict to define which is the principal class for our extension:</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;key&gt;</span>NSExtensionPrincipalClass<span class=\"nt\">&lt;/key&gt;</span>\n<span class=\"nt\">&lt;string&gt;</span>CustomShareNavigationController<span class=\"nt\">&lt;/string&gt;</span>\n</code></pre></div></div>\n\n<p>After that we can remove the Storyboard related entry:</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;key&gt;</span>NSExtensionMainStoryboard<span class=\"nt\">&lt;/key&gt;</span>\n<span class=\"nt\">&lt;string&gt;</span>MainInterface<span class=\"nt\">&lt;/string&gt;</span>\n</code></pre></div></div>\n\n<p>Finally, we will replace the value for the <code class=\"language-plaintext highlighter-rouge\">NSExtensionActivationRule</code> from</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;string&gt;</span>TRUEPREDICATE<span class=\"nt\">&lt;/string&gt;</span>\n</code></pre></div></div>\n\n<p>to</p>\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;dict&gt;</span>\n    <span class=\"nt\">&lt;key&gt;</span>NSExtensionActivationSupportsWebPageWithMaxCount<span class=\"nt\">&lt;/key&gt;</span>\n    <span class=\"nt\">&lt;integer&gt;</span>1<span class=\"nt\">&lt;/integer&gt;</span>\n    <span class=\"nt\">&lt;key&gt;</span>NSExtensionActivationSupportsWebURLWithMaxCount<span class=\"nt\">&lt;/key&gt;</span>\n    <span class=\"nt\">&lt;integer&gt;</span>1<span class=\"nt\">&lt;/integer&gt;</span>\n<span class=\"nt\">&lt;/dict&gt;</span>\n</code></pre></div></div>\n<p>which declares the maximum number of web pages and URLs that our <code class=\"language-plaintext highlighter-rouge\">Share Extension</code> supports.</p>\n\n<p>Now, we can also remove the <code class=\"language-plaintext highlighter-rouge\">MainInterface.storyboard</code> file and finally we are ready to run the extension on <code class=\"language-plaintext highlighter-rouge\">Safari</code>.</p>\n\n<p>The end result will be like this:</p>\n\n<p><img src=\"https://diamantidis.github.io/assets/share_extensions/custom_share_extension_nav_bar.png\" alt=\"Custom Share Extension (only nav bar) screenshot\" /></p>\n\n<h3 id=\"adding-ui-components\">Adding UI components</h3>\n\n<p>On top of that, we can customize the UI as usual with <code class=\"language-plaintext highlighter-rouge\">Auto Layout</code>. For example, we can add a <code class=\"language-plaintext highlighter-rouge\">UITextField</code> by modifying the <code class=\"language-plaintext highlighter-rouge\">CustomShareViewController</code>.</p>\n\n<p>We will have to add a property for the <code class=\"language-plaintext highlighter-rouge\">UITextField</code> and one method named <code class=\"language-plaintext highlighter-rouge\">setupViews()</code> which is responsible for adding the <code class=\"language-plaintext highlighter-rouge\">UITextField</code> to the UI like in the following snippet:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>    <span class=\"kd\">private</span> <span class=\"kd\">lazy</span> <span class=\"k\">var</span> <span class=\"nv\">textField</span><span class=\"p\">:</span> <span class=\"kt\">UITextField</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"k\">let</span> <span class=\"nv\">textField</span> <span class=\"o\">=</span> <span class=\"kt\">UITextField</span><span class=\"p\">()</span>\n        <span class=\"n\">textField</span><span class=\"o\">.</span><span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"s\">\"some value\"</span>\n        <span class=\"n\">textField</span><span class=\"o\">.</span><span class=\"n\">backgroundColor</span> <span class=\"o\">=</span> <span class=\"o\">.</span><span class=\"n\">white</span>\n        <span class=\"n\">textField</span><span class=\"o\">.</span><span class=\"n\">translatesAutoresizingMaskIntoConstraints</span> <span class=\"o\">=</span> <span class=\"kc\">false</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">textField</span>\n    <span class=\"p\">}()</span>\n\n    <span class=\"kd\">private</span> <span class=\"kd\">func</span> <span class=\"nf\">setupViews</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">view</span><span class=\"o\">.</span><span class=\"nf\">addSubview</span><span class=\"p\">(</span><span class=\"n\">textField</span><span class=\"p\">)</span>\n        <span class=\"kt\">NSLayoutConstraint</span><span class=\"o\">.</span><span class=\"nf\">activate</span><span class=\"p\">([</span>\n            <span class=\"n\">textField</span><span class=\"o\">.</span><span class=\"n\">leadingAnchor</span><span class=\"o\">.</span><span class=\"nf\">constraint</span><span class=\"p\">(</span><span class=\"nv\">equalTo</span><span class=\"p\">:</span> <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">view</span><span class=\"o\">.</span><span class=\"n\">leadingAnchor</span><span class=\"p\">),</span>\n            <span class=\"n\">textField</span><span class=\"o\">.</span><span class=\"n\">trailingAnchor</span><span class=\"o\">.</span><span class=\"nf\">constraint</span><span class=\"p\">(</span><span class=\"nv\">equalTo</span><span class=\"p\">:</span> <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">view</span><span class=\"o\">.</span><span class=\"n\">trailingAnchor</span><span class=\"p\">),</span>\n            <span class=\"n\">textField</span><span class=\"o\">.</span><span class=\"n\">centerYAnchor</span><span class=\"o\">.</span><span class=\"nf\">constraint</span><span class=\"p\">(</span><span class=\"nv\">equalTo</span><span class=\"p\">:</span> <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">view</span><span class=\"o\">.</span><span class=\"n\">centerYAnchor</span><span class=\"p\">),</span>\n            <span class=\"n\">textField</span><span class=\"o\">.</span><span class=\"n\">heightAnchor</span><span class=\"o\">.</span><span class=\"nf\">constraint</span><span class=\"p\">(</span><span class=\"nv\">equalToConstant</span><span class=\"p\">:</span> <span class=\"mi\">44</span><span class=\"p\">)</span>\n        <span class=\"p\">])</span>\n    <span class=\"p\">}</span>\n\n</code></pre></div></div>\n\n<p>Then, we can call <code class=\"language-plaintext highlighter-rouge\">setupViews()</code> from <code class=\"language-plaintext highlighter-rouge\">viewDidLoad()</code> and if we run the app again we will see something similar to the following screenshot:</p>\n\n<p><img src=\"https://diamantidis.github.io/assets/share_extensions/custom_share_extension.png\" alt=\"Custom Share Extension screenshot\" /></p>\n\n<p>Similarly by adding more views into our controller we can achieve the custom UI that we want in our <code class=\"language-plaintext highlighter-rouge\">Share Extension</code>. :tada:</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>And that’s about it for this post. In this post, we have seen how we could create a similar UI as the Reminders or Notes app for our Shared Extension. As it turned out, all we have to do is ignore the generated code from the template and rely on <code class=\"language-plaintext highlighter-rouge\">Auto Layout</code> to implement the UI that we want. Similarly to what we do when developing an iOS app, we can add a <code class=\"language-plaintext highlighter-rouge\">UINavigationController</code>, push instances of <code class=\"language-plaintext highlighter-rouge\">UIViewController</code> to it and add custom view to our <code class=\"language-plaintext highlighter-rouge\">UIViewController</code>.</p>\n\n<p>As a next step, we can implement the logic to populate those fields with information like the title of the page and the URL. Probably this is a topic that I will cover in one of my next posts. So stay tuned!!</p>\n\n<p>Thanks for reading, I hope you find this post useful!\nIf you have any questions, suggestions or comments about this post, just let me know on <a href=\"https://twitter.com/diamantidis_io\">Twitter</a>, I would love to hear from you!!</p>\n",
            "tags": ["iOS","Swift","App Extensions"],
            "image": "https://diamantidis.github.io/assets/socialIcon.png"
        },
        
        {
            "id": "https://diamantidis.github.io/2020/01/04/find-large-files-from-command-line",
            "url": "https://diamantidis.github.io/2020/01/04/find-large-files-from-command-line",
            "title": "How to find large files from the command line",
            "date_published": "2020-01-04T04:00:00+00:00",
            
            "date_modified": "2020-01-04T04:00:00+00:00",
            
            "author": {
                "name": "Ioannis Diamantidis",
                "url": "https://diamantidis.github.io"
            },
            "summary": "<p>Have you ever ran into issues with your storage disk being full?</p>\n\n",
            "content_html": "<p>Have you ever ran into issues with your storage disk being full?</p>\n\n<p>Recently I faced this issue on my Mac Book Pro and as result I get a notification like the following:</p>\n\n<p><img src=\"https://diamantidis.github.io/assets/storage/mac-book-disk-space-notification.png\" alt=\"Mac Book disk space notification screenshot\" /></p>\n\n<p>But instead of just following the easy solution and moving my <code class=\"language-plaintext highlighter-rouge\">Desktop</code> and <code class=\"language-plaintext highlighter-rouge\">Download</code> folder to an external disk, I took this opportunity to delve deeper and find out what actually consume most of the storage disk.</p>\n\n<p>And this is going to be the topic of this post; I will try to elaborate my process of using a set of commands to find the resources that consume the storage of my Mac Book Pro.</p>\n\n<blockquote>\n  <p>Disclaimer: This post is meant for Unix System users. Sorry Windows users :)</p>\n</blockquote>\n\n<p>Let’s start with how to find this files!</p>\n\n<h2 id=\"how-to-find-files-and-directories-size\">How to find files and directories size</h2>\n\n<p>A command that we can use to find the disk usage of a file or a directory is <code class=\"language-plaintext highlighter-rouge\">du</code>. This command comes with a few useful options which you can find by reading the man page (run <code class=\"language-plaintext highlighter-rouge\">man du</code> on your Terminal). For our scenario, we are going to use two of them; <code class=\"language-plaintext highlighter-rouge\">-a</code> and <code class=\"language-plaintext highlighter-rouge\">-h</code>. The option <code class=\"language-plaintext highlighter-rouge\">-a</code> can be used to display an entry for each file in the directory and <code class=\"language-plaintext highlighter-rouge\">-h</code> outputs “human-readable” unit suffixes like, for example, <code class=\"language-plaintext highlighter-rouge\">K</code> and <code class=\"language-plaintext highlighter-rouge\">M</code> for Kilobytes and Megabytes respectively.</p>\n\n<p>Long story short, if you navigate to a folder using the Terminal, let’s say for example your <code class=\"language-plaintext highlighter-rouge\">~/Downloads</code> folder, and execute the command <code class=\"language-plaintext highlighter-rouge\">du -ah .</code>, you will get a list of your files and folder inside the <code class=\"language-plaintext highlighter-rouge\">~/Downloads</code> folder alongside with the info about their disk usage.</p>\n\n<p>Such information is pretty helpful, but it’s quite hard to figure out which files are bigger. It would make it much easier if we could sort the output in reverse order, from the biggest file to the smallest. In order to do so, we are going to use the <code class=\"language-plaintext highlighter-rouge\">sort</code> command. <code class=\"language-plaintext highlighter-rouge\">sort</code> command also comes with some options that we are going to use; like <code class=\"language-plaintext highlighter-rouge\">-r</code> for reverse order and <code class=\"language-plaintext highlighter-rouge\">-h</code> which will take into account the unit suffixes from the <code class=\"language-plaintext highlighter-rouge\">du</code> command output.</p>\n\n<p>Now, the command will look like <code class=\"language-plaintext highlighter-rouge\">du -ah . | sort -rh</code> and voilà; the output is the list of files in descending order based on their disk usage.</p>\n\n<p>A further nice addition to this command would be some kind of limit on the results of the output. Some times, directories may contain multiple quite small files that will only add noise and make the output much harder to read. Such an example is the <code class=\"language-plaintext highlighter-rouge\">.git</code> folder.\nFor this reason, we are going to use the <code class=\"language-plaintext highlighter-rouge\">head</code> command, which will help us get only the first lines of the input. We are also going to use the <code class=\"language-plaintext highlighter-rouge\">-n</code> option to limit the output on a specific number of lines.</p>\n\n<p>Finally our command will look like this <code class=\"language-plaintext highlighter-rouge\">du -ah . | sort -rh | head -n 20</code>. If you try to run it, you will get a list of the twenty biggest files on your current directory.</p>\n\n<h2 id=\"adding-an-alias\">Adding an alias</h2>\n\n<p>Let’s be honest, remembering this command and the options can be quite hard. Therefore, we can create an alias to this command.</p>\n\n<p>Based on your Terminal setup, head to the <code class=\"language-plaintext highlighter-rouge\">~/.bashrc</code> or <code class=\"language-plaintext highlighter-rouge\">~/.zshrc</code> file. There, we are going to define our alias. I chose <code class=\"language-plaintext highlighter-rouge\">dirinfo</code> as a name, but feel free to change it if you would like to. In this file, we are going to define a function which will contain a slightly changed version of the command that we previously ran. We are going to use a parameter for the directory argument of the <code class=\"language-plaintext highlighter-rouge\">du</code> command to make this command a little more flexible.</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>dirinfo<span class=\"o\">()</span>\n<span class=\"o\">{</span>\n    <span class=\"nb\">du</span> <span class=\"nt\">-ah</span> <span class=\"s2\">\"</span><span class=\"nv\">$1</span><span class=\"s2\">\"</span> | <span class=\"nb\">sort</span> <span class=\"nt\">-rh</span> | <span class=\"nb\">head</span> <span class=\"nt\">-n</span> 20\n<span class=\"o\">}</span>\n<span class=\"nb\">alias </span><span class=\"nv\">dirinfo</span><span class=\"o\">=</span>dirinfo<span class=\"o\">()</span>\n</code></pre></div></div>\n\n<p>Save the changes and run <code class=\"language-plaintext highlighter-rouge\">source ~/.bashrc</code> or <code class=\"language-plaintext highlighter-rouge\">source ~/.zshrc</code> or just restart your Terminal.</p>\n\n<p>By now, you should be able to run commands like <code class=\"language-plaintext highlighter-rouge\">dirinfo ~/Desktop</code> or <code class=\"language-plaintext highlighter-rouge\">dirinfo .</code> to get the disk usage information for a specific directory!</p>\n\n<p>So, let’s use this command to find which files take the most space.</p>\n\n<h2 id=\"example\">Example</h2>\n\n<p>As a developer, regardless of the stack, be it iOS, Android, front-end or back-end, it is quite common that the tools that we are using require a decent amount of disk space.</p>\n\n<p>In my case, my first suspicion was that Xcode and the simulators would occupy a big portion of my storage disk. It was quite easy to validate my assumption, just by running <code class=\"language-plaintext highlighter-rouge\">dirinfo ~/Library/Developer/Xcode</code> and <code class=\"language-plaintext highlighter-rouge\">dirinfo ~/Library/Developer/CoreSimulator</code>. By deleting some files on these directories, I manage to recover dozens of Gigabytes of storage disk, most of which are occupied by files you no longer need.</p>\n\n<blockquote>\n  <p>Hint: If you are an iOS developer, a neat command that can help you recover some disk space is the <code class=\"language-plaintext highlighter-rouge\">xcrun simctl delete unavailable</code> which will delete all the old simulators.</p>\n</blockquote>\n\n<p>Feel free to continue the exploration for the files which take most of the storage on your machine. You may be surprised by some of the results.</p>\n\n<p>In my case I was quite surprised to find that it was the folder with my old project that I no longer work on (a.k.a project graveyard - I guess we all have one :smirk:) and Photos, both of which can easily be moved to an external disk or cloud and be recovered when needed.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>And that’s about it for this post. Though I was kind of annoyed when I first saw this notification, I would say that eventually it turned out well as I was able to find out more about which files occupy a great part of the storage disk and also have a command that will be there to help me if I face the same issue again in the future.</p>\n\n<p>Thanks for reading, I hope you find this post useful!\nIf you have any questions, suggestions or comments about this post, just let me know on <a href=\"https://twitter.com/diamantidis_io\">Twitter</a>, I would love to hear from you!!</p>\n",
            "tags": ["Unix","Storage","Command Line"],
            "image": "https://diamantidis.github.io/assets/socialIcon.png"
        },
        
        {
            "id": "https://diamantidis.github.io/2019/11/10/running-an-http-server-on-an-android-app",
            "url": "https://diamantidis.github.io/2019/11/10/running-an-http-server-on-an-android-app",
            "title": "Running an HTTP server on an Android app",
            "date_published": "2019-11-10T04:00:00+00:00",
            
            "date_modified": "2019-11-10T04:00:00+00:00",
            
            "author": {
                "name": "Ioannis Diamantidis",
                "url": "https://diamantidis.github.io"
            },
            "summary": "<p>A few days ago I wrote <a href=\"/2019/10/27/swift-nio-server-in-an-ios-app\">a post describing how to run an HTTP server from an iOS app</a>.\nThis intrigued me to start investigating how to implement a similar application on an Android app too. So, in this post I will describe how to setup and run an HTTP server from an Android app.</p>\n\n",
            "content_html": "<p>A few days ago I wrote <a href=\"/2019/10/27/swift-nio-server-in-an-ios-app\">a post describing how to run an HTTP server from an iOS app</a>.\nThis intrigued me to start investigating how to implement a similar application on an Android app too. So, in this post I will describe how to setup and run an HTTP server from an Android app.</p>\n\n<p>As I mentioned in the iOS post, such a setup (running a server from an app) can be utilized in many ways, with performing usability testing being one of those. If the app under test depends on a backend service, then we could apply some configuration to target the app with the server, which in turn would act as a mock server.</p>\n\n<p>But enough with the intro, let’s move to the action.</p>\n\n<h2 id=\"implementation\">Implementation</h2>\n\n<h1 id=\"ktor\">Ktor</h1>\n\n<p>For the purposes of this app I am going to use <a href=\"https://github.com/ktorio/ktor\">Ktor framework</a> to run the server. Ktor is a framework that helps implementing web-based applications and it can be used either on an Android app for the client-side logic or on a Kotlin server-side project. There is also <a href=\"https://ktor.io/clients/http-client/multiplatform.html\">support for Kotlin Multiplatform Projects</a> which enables you to write the networking client code once in Kotlin and then compile to whatever platform you are interested in, for example iOS.</p>\n\n<blockquote>\n  <p>If are interested in that and you want to learn more, you can check out my <a href=\"/2019/10/13/json-feed-reader-app-with-kotlin-native\">previous post about how to create a Feed reader app with Kotlin Native</a>.</p>\n</blockquote>\n\n<p>Sadly, Ktor Server is not currently <a href=\"https://github.com/ktorio/ktor/issues/571\">supported</a> but hopefully it will be sooner or later.</p>\n\n<h1 id=\"dependencies\">Dependencies</h1>\n\n<p>On a vanilla Android project, let’s add the dependencies on the <code class=\"language-plaintext highlighter-rouge\">app/build.gradle</code> file:</p>\n\n<div class=\"language-groovy highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">implementation</span> <span class=\"s2\">\"io.ktor:ktor:1.2.5\"</span>\n<span class=\"n\">implementation</span> <span class=\"s2\">\"io.ktor:ktor-server-netty:1.2.5\"</span>\n<span class=\"n\">implementation</span> <span class=\"s2\">\"io.ktor:ktor-gson:1.2.5\"</span>\n</code></pre></div></div>\n\n<p>We also have to add the following <code class=\"language-plaintext highlighter-rouge\">packagingOptions</code> to avoid any build conflicts</p>\n\n<div class=\"language-groovy highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>    <span class=\"n\">packagingOptions</span> <span class=\"o\">{</span>\n        <span class=\"n\">exclude</span> <span class=\"s1\">'META-INF/*'</span>\n    <span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>The final <code class=\"language-plaintext highlighter-rouge\">app/build.gradle</code> should look like the following:</p>\n\n<div class=\"language-groovy highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">apply</span> <span class=\"nl\">plugin:</span> <span class=\"s1\">'com.android.application'</span>\n<span class=\"n\">apply</span> <span class=\"nl\">plugin:</span> <span class=\"s1\">'kotlin-android'</span>\n<span class=\"n\">apply</span> <span class=\"nl\">plugin:</span> <span class=\"s1\">'kotlin-android-extensions'</span>\n\n<span class=\"n\">android</span> <span class=\"o\">{</span>\n    <span class=\"n\">compileSdkVersion</span> <span class=\"mi\">28</span>\n    <span class=\"n\">defaultConfig</span> <span class=\"o\">{</span>\n        <span class=\"n\">applicationId</span> <span class=\"s2\">\"io.github.diamantidis.androidServer\"</span>\n        <span class=\"n\">minSdkVersion</span> <span class=\"mi\">28</span>\n        <span class=\"n\">targetSdkVersion</span> <span class=\"mi\">28</span>\n        <span class=\"n\">versionCode</span> <span class=\"mi\">1</span>\n        <span class=\"n\">versionName</span> <span class=\"s2\">\"1.0\"</span>\n        <span class=\"n\">testInstrumentationRunner</span> <span class=\"s2\">\"androidx.test.runner.AndroidJUnitRunner\"</span>\n    <span class=\"o\">}</span>\n    <span class=\"n\">buildTypes</span> <span class=\"o\">{</span>\n        <span class=\"n\">release</span> <span class=\"o\">{</span>\n            <span class=\"n\">minifyEnabled</span> <span class=\"kc\">false</span>\n            <span class=\"n\">proguardFiles</span> <span class=\"nf\">getDefaultProguardFile</span><span class=\"o\">(</span><span class=\"s1\">'proguard-android-optimize.txt'</span><span class=\"o\">),</span> <span class=\"s1\">'proguard-rules.pro'</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n\n    <span class=\"n\">packagingOptions</span> <span class=\"o\">{</span>\n        <span class=\"n\">exclude</span> <span class=\"s1\">'META-INF/*'</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">dependencies</span> <span class=\"o\">{</span>\n    <span class=\"n\">implementation</span> <span class=\"nf\">fileTree</span><span class=\"o\">(</span><span class=\"nl\">dir:</span> <span class=\"s1\">'libs'</span><span class=\"o\">,</span> <span class=\"nl\">include:</span> <span class=\"o\">[</span><span class=\"s1\">'*.jar'</span><span class=\"o\">])</span>\n    <span class=\"n\">implementation</span><span class=\"s2\">\"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version\"</span>\n    <span class=\"n\">implementation</span> <span class=\"s1\">'androidx.appcompat:appcompat:1.1.0'</span>\n    <span class=\"n\">implementation</span> <span class=\"s1\">'androidx.core:core-ktx:1.1.0'</span>\n    <span class=\"n\">implementation</span> <span class=\"s1\">'androidx.constraintlayout:constraintlayout:1.1.3'</span>\n    <span class=\"n\">testImplementation</span> <span class=\"s1\">'junit:junit:4.12'</span>\n    <span class=\"n\">androidTestImplementation</span> <span class=\"s1\">'androidx.test:runner:1.2.0'</span>\n    <span class=\"n\">androidTestImplementation</span> <span class=\"s1\">'androidx.test.espresso:espresso-core:3.2.0'</span>\n\n    <span class=\"n\">implementation</span> <span class=\"s2\">\"io.ktor:ktor:1.2.5\"</span>\n    <span class=\"n\">implementation</span> <span class=\"s2\">\"io.ktor:ktor-server-netty:1.2.5\"</span>\n    <span class=\"n\">implementation</span> <span class=\"s2\">\"io.ktor:ktor-gson:1.2.5\"</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<h1 id=\"permissions\">Permissions</h1>\n\n<p>The next step is to add an entry on the <code class=\"language-plaintext highlighter-rouge\">AndroidManifest.xml</code> regarding the <code class=\"language-plaintext highlighter-rouge\">INTERNET</code> permissions like in the following snippet:</p>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span>\n<span class=\"nt\">&lt;manifest</span> <span class=\"na\">xmlns:android=</span><span class=\"s\">\"http://schemas.android.com/apk/res/android\"</span>\n    <span class=\"na\">package=</span><span class=\"s\">\"io.github.diamantidis.androidServer\"</span><span class=\"nt\">&gt;</span>\n    <span class=\"nt\">&lt;uses-permission</span> <span class=\"na\">android:name=</span><span class=\"s\">\"android.permission.INTERNET\"</span><span class=\"nt\">/&gt;</span>\n\n    <span class=\"nt\">&lt;application</span>\n        <span class=\"na\">android:allowBackup=</span><span class=\"s\">\"true\"</span>\n        <span class=\"na\">android:icon=</span><span class=\"s\">\"@mipmap/ic_launcher\"</span>\n        <span class=\"na\">android:label=</span><span class=\"s\">\"@string/app_name\"</span>\n        <span class=\"na\">android:roundIcon=</span><span class=\"s\">\"@mipmap/ic_launcher_round\"</span>\n        <span class=\"na\">android:supportsRtl=</span><span class=\"s\">\"true\"</span>\n        <span class=\"na\">android:theme=</span><span class=\"s\">\"@style/AppTheme\"</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;activity</span> <span class=\"na\">android:name=</span><span class=\"s\">\".MainActivity\"</span><span class=\"nt\">&gt;</span>\n            <span class=\"nt\">&lt;intent-filter&gt;</span>\n                <span class=\"nt\">&lt;action</span> <span class=\"na\">android:name=</span><span class=\"s\">\"android.intent.action.MAIN\"</span> <span class=\"nt\">/&gt;</span>\n\n                <span class=\"nt\">&lt;category</span> <span class=\"na\">android:name=</span><span class=\"s\">\"android.intent.category.LAUNCHER\"</span> <span class=\"nt\">/&gt;</span>\n            <span class=\"nt\">&lt;/intent-filter&gt;</span>\n        <span class=\"nt\">&lt;/activity&gt;</span>\n    <span class=\"nt\">&lt;/application&gt;</span>\n\n<span class=\"nt\">&lt;/manifest&gt;</span>\n</code></pre></div></div>\n\n<h1 id=\"code\">Code</h1>\n\n<p>Finally, we can open our <code class=\"language-plaintext highlighter-rouge\">MainActivity.kt</code> and add the following content:</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">package</span> <span class=\"nn\">&lt;your_package&gt;</span>\n\n<span class=\"k\">import</span> <span class=\"nn\">androidx.appcompat.app.AppCompatActivity</span>\n<span class=\"k\">import</span> <span class=\"nn\">android.os.Bundle</span>\n<span class=\"k\">import</span> <span class=\"nn\">io.ktor.application.call</span>\n<span class=\"k\">import</span> <span class=\"nn\">io.ktor.application.install</span>\n<span class=\"k\">import</span> <span class=\"nn\">io.ktor.features.ContentNegotiation</span>\n<span class=\"k\">import</span> <span class=\"nn\">io.ktor.gson.gson</span>\n<span class=\"k\">import</span> <span class=\"nn\">io.ktor.response.respond</span>\n<span class=\"k\">import</span> <span class=\"nn\">io.ktor.routing.get</span>\n<span class=\"k\">import</span> <span class=\"nn\">io.ktor.routing.routing</span>\n<span class=\"k\">import</span> <span class=\"nn\">io.ktor.server.engine.embeddedServer</span>\n<span class=\"k\">import</span> <span class=\"nn\">io.ktor.server.netty.Netty</span>\n\n<span class=\"kd\">class</span> <span class=\"nc\">MainActivity</span> <span class=\"p\">:</span> <span class=\"nc\">AppCompatActivity</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">override</span> <span class=\"k\">fun</span> <span class=\"nf\">onCreate</span><span class=\"p\">(</span><span class=\"n\">savedInstanceState</span><span class=\"p\">:</span> <span class=\"nc\">Bundle</span><span class=\"p\">?)</span> <span class=\"p\">{</span>\n        <span class=\"k\">super</span><span class=\"p\">.</span><span class=\"nf\">onCreate</span><span class=\"p\">(</span><span class=\"n\">savedInstanceState</span><span class=\"p\">)</span>\n        <span class=\"nf\">setContentView</span><span class=\"p\">(</span><span class=\"nc\">R</span><span class=\"p\">.</span><span class=\"n\">layout</span><span class=\"p\">.</span><span class=\"n\">activity_main</span><span class=\"p\">)</span>\n\n        <span class=\"nf\">embeddedServer</span><span class=\"p\">(</span><span class=\"nc\">Netty</span><span class=\"p\">,</span> <span class=\"mi\">8080</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"nf\">install</span><span class=\"p\">(</span><span class=\"nc\">ContentNegotiation</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"nf\">gson</span> <span class=\"p\">{}</span>\n            <span class=\"p\">}</span>\n            <span class=\"nf\">routing</span> <span class=\"p\">{</span>\n                <span class=\"k\">get</span><span class=\"p\">(</span><span class=\"s\">\"/\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                    <span class=\"n\">call</span><span class=\"p\">.</span><span class=\"nf\">respond</span><span class=\"p\">(</span><span class=\"nf\">mapOf</span><span class=\"p\">(</span><span class=\"s\">\"message\"</span> <span class=\"n\">to</span> <span class=\"s\">\"Hello world\"</span><span class=\"p\">))</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}.</span><span class=\"nf\">start</span><span class=\"p\">(</span><span class=\"n\">wait</span> <span class=\"p\">=</span> <span class=\"k\">true</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n</code></pre></div></div>\n\n<p>We first create a server with <code class=\"language-plaintext highlighter-rouge\">Netty</code> as the application engine, <code class=\"language-plaintext highlighter-rouge\">8080</code> as the port and a module function. Inside this module function, we add the <code class=\"language-plaintext highlighter-rouge\">ContentNegotiation</code> feature and register the <code class=\"language-plaintext highlighter-rouge\">gson</code> converter. This will allow us to convert the request data to our model and our models to JSON responses.\nAfter that, we use the <code class=\"language-plaintext highlighter-rouge\">routing</code> feature to define our endpoint and the response. The current implementation returns just a simple map, but it could also return a more complex data structure. Finally we start the server and we explicitly set to wait until we stop it.</p>\n\n<p>We are now ready to run the app. After the app is successfully installed and running on either a device or a simulator, open the browser and hit <code class=\"language-plaintext highlighter-rouge\">localhost:8080</code>.</p>\n\n<p>Voilà! You should get <code class=\"language-plaintext highlighter-rouge\">{\"message\": \"Hello world\"}</code> as a response!</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>To sum up, in this post we have seen how to run a simple HTTP server from an Android app using Ktor Server. In just 10 lines of code, we manage to create, set up and run an HTTP server. And with the JSON serialization installed.</p>\n\n<p>Thanks for reading and should you have any questions, suggestions or comments, just let me know on <a href=\"https://twitter.com/diamantidis_io\">Twitter</a> or <a href=\"mailto:diamantidis@outlook.com\">email me</a>!!</p>\n",
            "tags": ["Kotlin","Ktor","Android"],
            "image": "https://diamantidis.github.io/assets/socialIcon.png"
        },
        
        {
            "id": "https://diamantidis.github.io/2019/10/27/swift-nio-server-in-an-ios-app",
            "url": "https://diamantidis.github.io/2019/10/27/swift-nio-server-in-an-ios-app",
            "title": "Running a SwiftNIO Server in an iOS app",
            "date_published": "2019-10-27T04:00:00+00:00",
            
            "date_modified": "2019-10-27T04:00:00+00:00",
            
            "author": {
                "name": "Ioannis Diamantidis",
                "url": "https://diamantidis.github.io"
            },
            "summary": "<p>Have you ever wondered if it is possible to run a server in an iOS app? A while ago I had this question!\nIt seems that <a href=\"https://github.com/apple/swift-nio\">SwiftNIO</a> and <a href=\"https://github.com/apple/swift-nio-transport-services\">SwiftNIO Transport Services extension, a.k.a NIOTS</a> are here to help us do so.</p>\n\n",
            "content_html": "<p>Have you ever wondered if it is possible to run a server in an iOS app? A while ago I had this question!\nIt seems that <a href=\"https://github.com/apple/swift-nio\">SwiftNIO</a> and <a href=\"https://github.com/apple/swift-nio-transport-services\">SwiftNIO Transport Services extension, a.k.a NIOTS</a> are here to help us do so.</p>\n\n<p>SwiftNIO is a non-blocking event-driven network framework and as per the documentation, it is like <a href=\"https://netty.io/\">Netty</a>, but written for Swift, meaning that it is following Netty’s architecture and concepts though in a Swifty way.</p>\n\n<p>To get a better grasp of the architecture, you can refer to <a href=\"https://github.com/apple/swift-nio#basic-architecture\">SwiftNIO’s documentation</a>, where you can find a detailed description of the building blocks and how they interact with each other.</p>\n\n<p>Back to our topic, a potential use case for such an app could be to act as a mock server for other apps. For example, such a mock server app could be used for usability testing, especially if it provides a UI to manipulate the responses and thus enabling the person performing the usability testing to create different scenarios and flows in the app.</p>\n\n<p>So, for this post, I will try to create a simple app that will start an HTTP server, and this server will handle a GET request and return a JSON response.</p>\n\n<h2 id=\"implementation\">Implementation</h2>\n\n<h1 id=\"dependencies\">Dependencies</h1>\n\n<p>First thing first, we have to add <code class=\"language-plaintext highlighter-rouge\">SwiftNIO</code>, <code class=\"language-plaintext highlighter-rouge\">SwiftNIOTransportServices</code> and <code class=\"language-plaintext highlighter-rouge\">SwiftNIOHTTP1</code> as dependencies to our project. Let’s open the <code class=\"language-plaintext highlighter-rouge\">Podfile</code> and add the following dependencies:</p>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  <span class=\"n\">pod</span> <span class=\"s1\">'SwiftNIO'</span><span class=\"p\">,</span> <span class=\"s1\">'~&gt; 2.0.0'</span>\n  <span class=\"n\">pod</span> <span class=\"s1\">'SwiftNIOTransportServices'</span><span class=\"p\">,</span> <span class=\"s1\">'~&gt; 1.0.0'</span>\n  <span class=\"n\">pod</span> <span class=\"s1\">'SwiftNIOHTTP1'</span><span class=\"p\">,</span> <span class=\"s1\">'~&gt; 2.0.0'</span>\n</code></pre></div></div>\n\n<p>After that, run <code class=\"language-plaintext highlighter-rouge\">bundle exec pod install</code> and wait until the Pods are installed.</p>\n\n<p>Having installed the dependencies we are ready to move to the actual implementation.</p>\n\n<h1 id=\"channelhandler\">ChannelHandler</h1>\n\n<p>To do the data manipulation, <code class=\"language-plaintext highlighter-rouge\">SwiftNIO</code> is using the terms <code class=\"language-plaintext highlighter-rouge\">ChannelPipeline</code>, <code class=\"language-plaintext highlighter-rouge\">ChannelHandler</code> and <code class=\"language-plaintext highlighter-rouge\">ChannelContext</code>.</p>\n\n<blockquote>\n  <p>For a thorough description of what each of these building blocks is, you can refer to the <a href=\"https://github.com/apple/swift-nio#channels-channel-handlers-channel-pipelines-and-channel-contexts\">corresponding documentation</a>.</p>\n</blockquote>\n\n<p>Long story short, <code class=\"language-plaintext highlighter-rouge\">ChannelHandler</code> is a base protocol for handlers that handle I/O events or intercept an I/O operation.</p>\n\n<p><a href=\"https://apple.github.io/swift-nio/docs/current/NIO/Protocols/ChannelHandler.html\"><code class=\"language-plaintext highlighter-rouge\">ChannelHandler</code></a> should not be used directly but rather through its sub-protocols. A ChannelHandler can be Inbound, Outbound or both. The first one refers to handlers which process inbound events like reading data, while the second refers to handlers which process outbound events like writes.</p>\n\n<p>Those handlers are added to a sequence, the <code class=\"language-plaintext highlighter-rouge\">ChannelPipeline</code>. Then, with each new event, each handler processes the event in order. For read events that order is from the front to the back of the sequence whereas for write events is the reverse order.</p>\n\n<p>Finally, each handler is using <code class=\"language-plaintext highlighter-rouge\">ChannelHandlerContext</code> to communicate with other handlers by emitting events.</p>\n\n<p>In our case, we are going to create a class that conforms to <code class=\"language-plaintext highlighter-rouge\">ChannelInboundHandler</code>, and its main responsibility will be to read the data coming from any other previous <code class=\"language-plaintext highlighter-rouge\">ChannelInboundHandler</code> and prepare the response and the corresponding header which will be forwarded to the next <code class=\"language-plaintext highlighter-rouge\">ChannelHandler</code> using the <code class=\"language-plaintext highlighter-rouge\">ChannelHandlerContext</code>.</p>\n\n<p>An example of a dummy <code class=\"language-plaintext highlighter-rouge\">ChannelInboundHandler</code> is the following:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">import</span> <span class=\"kt\">Foundation</span>\n<span class=\"kd\">import</span> <span class=\"kt\">NIOHTTP1</span>\n<span class=\"kd\">import</span> <span class=\"kt\">NIO</span>\n\n<span class=\"kd\">final</span> <span class=\"kd\">class</span> <span class=\"kt\">DummyHandler</span><span class=\"p\">:</span> <span class=\"kt\">ChannelInboundHandler</span> <span class=\"p\">{</span>\n    <span class=\"kd\">typealias</span> <span class=\"kt\">InboundIn</span> <span class=\"o\">=</span> <span class=\"kt\">HTTPServerRequestPart</span>\n    <span class=\"kd\">typealias</span> <span class=\"kt\">OutboundOut</span> <span class=\"o\">=</span> <span class=\"kt\">HTTPServerResponsePart</span>\n\n    <span class=\"kd\">func</span> <span class=\"nf\">channelRead</span><span class=\"p\">(</span><span class=\"nv\">context</span><span class=\"p\">:</span> <span class=\"kt\">ChannelHandlerContext</span><span class=\"p\">,</span> <span class=\"nv\">data</span><span class=\"p\">:</span> <span class=\"kt\">NIOAny</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">let</span> <span class=\"nv\">part</span> <span class=\"o\">=</span> <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"nf\">unwrapInboundIn</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n\n        <span class=\"k\">guard</span> <span class=\"k\">case</span> <span class=\"o\">.</span><span class=\"n\">head</span> <span class=\"o\">=</span> <span class=\"n\">part</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"c1\">// Prepare the response body</span>\n        <span class=\"k\">let</span> <span class=\"nv\">message</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s\">\"message\"</span><span class=\"p\">:</span> <span class=\"s\">\"Hello World\"</span><span class=\"p\">]</span>\n        <span class=\"k\">let</span> <span class=\"nv\">response</span> <span class=\"o\">=</span> <span class=\"k\">try!</span> <span class=\"kt\">JSONEncoder</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"nf\">encode</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">)</span>\n\n        <span class=\"c1\">// set the headers</span>\n        <span class=\"k\">var</span> <span class=\"nv\">headers</span> <span class=\"o\">=</span> <span class=\"kt\">HTTPHeaders</span><span class=\"p\">()</span>\n        <span class=\"n\">headers</span><span class=\"o\">.</span><span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"nv\">name</span><span class=\"p\">:</span> <span class=\"s\">\"Content-Type\"</span><span class=\"p\">,</span> <span class=\"nv\">value</span><span class=\"p\">:</span> <span class=\"s\">\"application/json\"</span><span class=\"p\">)</span>\n        <span class=\"n\">headers</span><span class=\"o\">.</span><span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"nv\">name</span><span class=\"p\">:</span> <span class=\"s\">\"Content-Length\"</span><span class=\"p\">,</span> <span class=\"nv\">value</span><span class=\"p\">:</span> <span class=\"s\">\"</span><span class=\"se\">\\(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"se\">)</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n\n        <span class=\"k\">let</span> <span class=\"nv\">responseHead</span> <span class=\"o\">=</span> <span class=\"kt\">HTTPResponseHead</span><span class=\"p\">(</span><span class=\"nv\">version</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"nv\">major</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nv\">minor</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"nv\">status</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">ok</span><span class=\"p\">,</span> <span class=\"nv\">headers</span><span class=\"p\">:</span> <span class=\"n\">headers</span><span class=\"p\">)</span>\n        <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"nf\">write</span><span class=\"p\">(</span><span class=\"k\">self</span><span class=\"o\">.</span><span class=\"nf\">wrapOutboundOut</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"nf\">head</span><span class=\"p\">(</span><span class=\"n\">responseHead</span><span class=\"p\">)),</span> <span class=\"nv\">promise</span><span class=\"p\">:</span> <span class=\"kc\">nil</span><span class=\"p\">)</span>\n\n        <span class=\"c1\">// Set the data</span>\n        <span class=\"k\">var</span> <span class=\"nv\">buffer</span> <span class=\"o\">=</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">channel</span><span class=\"o\">.</span><span class=\"n\">allocator</span><span class=\"o\">.</span><span class=\"nf\">buffer</span><span class=\"p\">(</span><span class=\"nv\">capacity</span><span class=\"p\">:</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">)</span>\n        <span class=\"n\">buffer</span><span class=\"o\">.</span><span class=\"nf\">writeBytes</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">)</span>\n        <span class=\"k\">let</span> <span class=\"nv\">body</span> <span class=\"o\">=</span> <span class=\"kt\">HTTPServerResponsePart</span><span class=\"o\">.</span><span class=\"nf\">body</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"nf\">byteBuffer</span><span class=\"p\">(</span><span class=\"n\">buffer</span><span class=\"p\">))</span>\n        <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"nf\">writeAndFlush</span><span class=\"p\">(</span><span class=\"k\">self</span><span class=\"o\">.</span><span class=\"nf\">wrapOutboundOut</span><span class=\"p\">(</span><span class=\"n\">body</span><span class=\"p\">),</span> <span class=\"nv\">promise</span><span class=\"p\">:</span> <span class=\"kc\">nil</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>First we declare the <code class=\"language-plaintext highlighter-rouge\">InboundIn</code> and the <code class=\"language-plaintext highlighter-rouge\">OutboundOut</code> types. <code class=\"language-plaintext highlighter-rouge\">InboundIn</code> defines the kind of data that this handler is expecting to receive from any previous <code class=\"language-plaintext highlighter-rouge\">ChannelHandler</code> whereas <code class=\"language-plaintext highlighter-rouge\">OutboundOut</code> is the kind of data that will be forwarded to the next.</p>\n\n<p>In our case they are <code class=\"language-plaintext highlighter-rouge\">HTTPServerRequestPart</code> and <code class=\"language-plaintext highlighter-rouge\">HTTPServerResponsePart</code> respectively, both of which are typeliases for the generic enum <code class=\"language-plaintext highlighter-rouge\">HTTPPart&lt;HeadT: Equatable, BodyT: Equatable&gt;</code> that contains three cases; <code class=\"language-plaintext highlighter-rouge\">.head</code>, <code class=\"language-plaintext highlighter-rouge\">.body</code> and <code class=\"language-plaintext highlighter-rouge\">.end</code>.</p>\n\n<p>After that, we provide an implementation for the <code class=\"language-plaintext highlighter-rouge\">channelRead</code> function which is called when there are some data to be read. The data is passed as a <code class=\"language-plaintext highlighter-rouge\">NIOAny</code> object, so we have to unwrap it to the <code class=\"language-plaintext highlighter-rouge\">InboundIn</code> type. Next, we prepare the data that we want as a response. In our case it is a simple map and we use the <code class=\"language-plaintext highlighter-rouge\">JSONEncoder</code> to encode it into data.</p>\n\n<p>Then, we set the response headers, which consist of the <code class=\"language-plaintext highlighter-rouge\">Content-Type</code> and the <code class=\"language-plaintext highlighter-rouge\">Content-Length</code> headers and using the <code class=\"language-plaintext highlighter-rouge\">context.write</code> we are sending an event to the next <code class=\"language-plaintext highlighter-rouge\">ChannelHandler</code> in the <code class=\"language-plaintext highlighter-rouge\">ChannelPipeline</code>.</p>\n\n<p>Carrying on, we create a buffer with the response data and we set it as the body of the response. We are also calling the <code class=\"language-plaintext highlighter-rouge\">writeAndFlush</code> function which is sending a <code class=\"language-plaintext highlighter-rouge\">write</code> event to the next <code class=\"language-plaintext highlighter-rouge\">ChannelHandler</code> followed by a <code class=\"language-plaintext highlighter-rouge\">flush</code> event. With the <code class=\"language-plaintext highlighter-rouge\">write</code> event the body data will be enqueued to be written to the socket when the <code class=\"language-plaintext highlighter-rouge\">flush</code> event arrives.</p>\n\n<p>Now, let’s move to the server that will use this <code class=\"language-plaintext highlighter-rouge\">ChannelHandler</code>!</p>\n\n<h1 id=\"server\">Server</h1>\n\n<p>An example of a server that is using the <code class=\"language-plaintext highlighter-rouge\">ChannelHandler</code> can be found on the following snippet.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">import</span> <span class=\"kt\">NIOTransportServices</span>\n<span class=\"kd\">import</span> <span class=\"kt\">NIO</span>\n\n<span class=\"kd\">class</span> <span class=\"kt\">Server</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// MARK: - Initializers</span>\n    <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"nv\">host</span><span class=\"p\">:</span> <span class=\"kt\">String</span><span class=\"p\">,</span> <span class=\"nv\">port</span><span class=\"p\">:</span> <span class=\"kt\">Int</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">host</span> <span class=\"o\">=</span> <span class=\"n\">host</span>\n        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">port</span> <span class=\"o\">=</span> <span class=\"n\">port</span>\n    <span class=\"p\">}</span>\n    \n    <span class=\"c1\">// MARK: - Public functions</span>\n    <span class=\"kd\">func</span> <span class=\"nf\">start</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">do</span> <span class=\"p\">{</span>\n            <span class=\"k\">let</span> <span class=\"nv\">bootstrap</span> <span class=\"o\">=</span> <span class=\"kt\">NIOTSListenerBootstrap</span><span class=\"p\">(</span><span class=\"nv\">group</span><span class=\"p\">:</span> <span class=\"n\">group</span><span class=\"p\">)</span>\n                <span class=\"o\">.</span><span class=\"n\">childChannelInitializer</span> <span class=\"p\">{</span> <span class=\"n\">channel</span> <span class=\"k\">in</span>\n                    <span class=\"n\">channel</span><span class=\"o\">.</span><span class=\"n\">pipeline</span><span class=\"o\">.</span><span class=\"nf\">configureHTTPServerPipeline</span><span class=\"p\">()</span>\n                        <span class=\"o\">.</span><span class=\"n\">flatMap</span> <span class=\"p\">{</span>\n                            <span class=\"n\">channel</span><span class=\"o\">.</span><span class=\"n\">pipeline</span><span class=\"o\">.</span><span class=\"nf\">addHandler</span><span class=\"p\">(</span><span class=\"kt\">DummyHandler</span><span class=\"p\">())</span>\n                    <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n            <span class=\"k\">let</span> <span class=\"nv\">channel</span> <span class=\"o\">=</span> <span class=\"k\">try</span> <span class=\"n\">bootstrap</span>\n                <span class=\"o\">.</span><span class=\"nf\">bind</span><span class=\"p\">(</span><span class=\"nv\">host</span><span class=\"p\">:</span> <span class=\"n\">host</span><span class=\"p\">,</span> <span class=\"nv\">port</span><span class=\"p\">:</span> <span class=\"n\">port</span><span class=\"p\">)</span>\n                <span class=\"o\">.</span><span class=\"nf\">wait</span><span class=\"p\">()</span>\n            \n            <span class=\"k\">try</span> <span class=\"n\">channel</span><span class=\"o\">.</span><span class=\"n\">closeFuture</span><span class=\"o\">.</span><span class=\"nf\">wait</span><span class=\"p\">()</span>\n        <span class=\"p\">}</span> <span class=\"k\">catch</span> <span class=\"p\">{</span>\n            <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"s\">\"An error happed </span><span class=\"se\">\\(</span><span class=\"n\">error</span><span class=\"o\">.</span><span class=\"n\">localizedDescription</span><span class=\"se\">)</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n            <span class=\"nf\">exit</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    \n    <span class=\"kd\">func</span> <span class=\"nf\">stop</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">do</span> <span class=\"p\">{</span>\n            <span class=\"k\">try</span> <span class=\"n\">group</span><span class=\"o\">.</span><span class=\"nf\">syncShutdownGracefully</span><span class=\"p\">()</span>\n        <span class=\"p\">}</span> <span class=\"k\">catch</span> <span class=\"p\">{</span>\n            <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"s\">\"An error happed </span><span class=\"se\">\\(</span><span class=\"n\">error</span><span class=\"o\">.</span><span class=\"n\">localizedDescription</span><span class=\"se\">)</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n            <span class=\"nf\">exit</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    \n    <span class=\"c1\">// MARK: - Private properties</span>\n    <span class=\"kd\">private</span> <span class=\"k\">let</span> <span class=\"nv\">group</span> <span class=\"o\">=</span> <span class=\"kt\">NIOTSEventLoopGroup</span><span class=\"p\">()</span>\n    <span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">host</span><span class=\"p\">:</span> <span class=\"kt\">String</span>\n    <span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">port</span><span class=\"p\">:</span> <span class=\"kt\">Int</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>In this class, we define an initializer with a <code class=\"language-plaintext highlighter-rouge\">host</code> and <code class=\"language-plaintext highlighter-rouge\">port</code> variable and two functions; <code class=\"language-plaintext highlighter-rouge\">start</code> and <code class=\"language-plaintext highlighter-rouge\">stop</code> which are, as you can imagine, responsible to start and stop the server.</p>\n\n<p>Let’s focus on the <code class=\"language-plaintext highlighter-rouge\">start</code> function first.</p>\n\n<p>Initially, we have to bootstrap our channel. We are using the <code class=\"language-plaintext highlighter-rouge\">NIOTSListenerBootstrap</code> to do so and its <code class=\"language-plaintext highlighter-rouge\">childChannelInitializer</code> function to add ChannelHandlers to the ChannelPipeline. To add HTTP-server capabilities to our server, we call the \n<code class=\"language-plaintext highlighter-rouge\">configureHTTPServerPipeline</code> which adds some HTTP-related ChannelHandlers to the ChannelPipeline. After that, we are using flatMap to add our own <code class=\"language-plaintext highlighter-rouge\">DummyHandler</code> to the <code class=\"language-plaintext highlighter-rouge\">ChannelPipeline</code>. We are, then, using this bootstrap to bind our channel to the port and the host set through the initializer and finally, we are using <code class=\"language-plaintext highlighter-rouge\">try channel.closeFuture.wait()</code> to make our server run until we decide to close it.</p>\n\n<p>As for the <code class=\"language-plaintext highlighter-rouge\">stop</code> function, we just call <code class=\"language-plaintext highlighter-rouge\">try group.syncShutdownGracefully()</code> to shut down the <code class=\"language-plaintext highlighter-rouge\">EventLoopGroup</code> gracefully.</p>\n\n<h1 id=\"results\">Results</h1>\n\n<p>The last missing piece to run our server is to initialize a server instance and call the <code class=\"language-plaintext highlighter-rouge\">start</code> function, like in the following lines:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">app</span> <span class=\"o\">=</span> <span class=\"kt\">Server</span><span class=\"p\">(</span><span class=\"nv\">host</span><span class=\"p\">:</span> <span class=\"s\">\"localhost\"</span><span class=\"p\">,</span> <span class=\"nv\">port</span><span class=\"p\">:</span> <span class=\"mi\">8888</span><span class=\"p\">)</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"nf\">start</span><span class=\"p\">()</span>\n</code></pre></div></div>\n\n<p>And we are ready to run the app!</p>\n\n<p>Now, if you head to the Terminal and execute the command <code class=\"language-plaintext highlighter-rouge\">curl -X GET http://localhost:8888</code> (requires to have <code class=\"language-plaintext highlighter-rouge\">curl</code> installed) or use a browser either on the device or the emulator that you use to run the app, and you visit <code class=\"language-plaintext highlighter-rouge\">http://localhost:8888</code>, you will receive the <code class=\"language-plaintext highlighter-rouge\">{\"message\":\"Hello World\"}</code> response.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>To sum up, in this post, we have seen how to use <code class=\"language-plaintext highlighter-rouge\">SwiftNIO</code> in an iOS app to run an HTTP server that will serve a static JSON response.</p>\n\n<p>But given that SwiftNIO is a low-level framework, in order to reach my goal of building a mock server app, there are a lot of things to be implemented, like a routing implementation that will make it easy to change the response on the fly.</p>\n\n<p>For this reason, as alternatives to SwiftNIO, there are also some other high-level framework that you can also use to run a server on an iOS app, such as <a href=\"https://github.com/swisspol/GCDWebServer\">GCDWebServer</a>, <a href=\"https://github.com/httpswift/swifter\">swifter</a>, <a href=\"https://github.com/envoy/Ambassador\">Ambassador</a> and <a href=\"https://github.com/IBM-Swift/Kitura-Mobile-Server\">Kitura</a>.</p>\n\n<p>SwiftNIO or not, knowing that it is possible to run a server in an iOS app is something that could be useful in many ways!!</p>\n\n<p>Thanks for reading and should you have any questions, suggestions or comments, just let me know on <a href=\"https://twitter.com/diamantidis_io\">Twitter</a> or <a href=\"mailto:diamantidis@outlook.com\">email me</a>!!</p>\n",
            "tags": ["Swift","SwiftNIO","iOS"],
            "image": "https://diamantidis.github.io/assets/socialIcon.png"
        },
        
        {
            "id": "https://diamantidis.github.io/2019/10/13/json-feed-reader-app-with-kotlin-native",
            "url": "https://diamantidis.github.io/2019/10/13/json-feed-reader-app-with-kotlin-native",
            "title": "JSON feed reader app with Kotlin Native",
            "date_published": "2019-10-13T04:00:00+00:00",
            
            "date_modified": "2019-10-13T04:00:00+00:00",
            
            "author": {
                "name": "Ioannis Diamantidis",
                "url": "https://diamantidis.github.io"
            },
            "summary": "<p>Having spent some time exploring and learning more about Kotlin Native, time has come to start building an app where I can use Kotlin Native in a real world use case. After a lot of ideas, I finally decided to build a feed reader app for this blog.</p>\n\n",
            "content_html": "<p>Having spent some time exploring and learning more about Kotlin Native, time has come to start building an app where I can use Kotlin Native in a real world use case. After a lot of ideas, I finally decided to build a feed reader app for this blog.</p>\n\n<p>It seems that such an app would be an ideal first project as I will have the opportunity to explore features like networking, de-serializing, storing user preference and much more that I will find out as I move on. At the same time, it doesn’t sound too demanding both in respect of time and effort.</p>\n\n<p>For the sake of this app, I will use the <a href=\"https://jsonfeed.org/\">JSON feed</a> that I added on my Jekyll site, the process of which is documented on <a href=\"/2019/10/05/json-feed-for-jekyll-sites\">another post</a>.</p>\n\n<p>Furthermore, I will use <a href=\"https://gitlab.com/diamantidis_io/kmp_template\">a template</a> that I have built as a base for any Kotlin Native project, and which already includes the required setup for unit tests, linting and CI. The whole process of how I created this template has been recorded in <a href=\"https://diamantidis.github.io/tags#KMP\">a series of posts</a>.</p>\n\n<p>So, are you ready to move on the implementation? Let’s go!</p>\n\n<h2 id=\"implementation\">Implementation</h2>\n\n<p>First thing first, let’s start with the dependencies.</p>\n\n<p>The feed reader will have to make an HTTP request to fetch the feed and then to transform the JSON response to a Kotlin object. To implement those tasks, we are going to use <a href=\"https://kotlinlang.org/docs/reference/coroutines-overview.html\">coroutines</a>, <a href=\"https://ktor.io/\">ktor</a> and the <a href=\"https://github.com/Kotlin/kotlinx.serialization\">kotlinx serialization</a>.</p>\n\n<p>To begin with, let’s define the version of the dependencies on the <code class=\"language-plaintext highlighter-rouge\">gradle.properties</code> file, like below:</p>\n\n<div class=\"language-groovy highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">coroutines_version</span><span class=\"o\">=</span><span class=\"mf\">1.2</span><span class=\"o\">.</span><span class=\"mi\">2</span>\n<span class=\"n\">serialization_version</span><span class=\"o\">=</span><span class=\"mf\">0.11</span><span class=\"o\">.</span><span class=\"mi\">1</span>\n<span class=\"n\">ktor_version</span><span class=\"o\">=</span><span class=\"mf\">1.2</span><span class=\"o\">.</span><span class=\"mi\">4</span>\n</code></pre></div></div>\n\n<p>Next, we will have to edit <code class=\"language-plaintext highlighter-rouge\">build.gradle</code> and add the following line on the <code class=\"language-plaintext highlighter-rouge\">dependencies</code> block:</p>\n\n<div class=\"language-groovy highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>    <span class=\"n\">classpath</span> <span class=\"s2\">\"org.jetbrains.kotlin:kotlin-serialization:$kotlin_version\"</span>\n</code></pre></div></div>\n\n<p>After this, we can move to the <code class=\"language-plaintext highlighter-rouge\">shared/build.gradle</code> file.</p>\n\n<p>First we have to add the following line to apply the kotlinx-serialization:</p>\n<div class=\"language-groovy highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">apply</span> <span class=\"nl\">plugin:</span> <span class=\"s1\">'kotlinx-serialization'</span>\n</code></pre></div></div>\n\n<p>and then we can define our dependencies for each target like in the following snippet:</p>\n\n<div class=\"language-groovy highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>        <span class=\"n\">commonMain</span> <span class=\"o\">{</span>\n            <span class=\"n\">dependencies</span> <span class=\"o\">{</span>\n                <span class=\"n\">implementation</span> <span class=\"nf\">kotlin</span><span class=\"o\">(</span><span class=\"s1\">'stdlib-common'</span><span class=\"o\">)</span>\n                <span class=\"n\">implementation</span> <span class=\"s2\">\"org.jetbrains.kotlinx:kotlinx-coroutines-core-common:$coroutines_version\"</span>\n                <span class=\"n\">implementation</span> <span class=\"s2\">\"org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:$serialization_version\"</span>\n\n                <span class=\"n\">implementation</span> <span class=\"s2\">\"io.ktor:ktor-client-core:$ktor_version\"</span>\n                <span class=\"n\">implementation</span> <span class=\"s2\">\"io.ktor:ktor-client-serialization:$ktor_version\"</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"n\">commonTest</span> <span class=\"o\">{</span>\n            <span class=\"n\">dependencies</span> <span class=\"o\">{</span>\n                <span class=\"n\">implementation</span> <span class=\"nf\">kotlin</span><span class=\"o\">(</span><span class=\"s1\">'test-common'</span><span class=\"o\">)</span>\n                <span class=\"n\">implementation</span> <span class=\"nf\">kotlin</span><span class=\"o\">(</span><span class=\"s1\">'test-annotations-common'</span><span class=\"o\">)</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"n\">androidMain</span> <span class=\"o\">{</span>\n            <span class=\"n\">dependencies</span> <span class=\"o\">{</span>\n                <span class=\"n\">implementation</span> <span class=\"nf\">kotlin</span><span class=\"o\">(</span><span class=\"s1\">'stdlib'</span><span class=\"o\">)</span>\n                <span class=\"n\">implementation</span> <span class=\"s2\">\"org.jetbrains.kotlinx:kotlinx-coroutines-core-common:$coroutines_version\"</span>\n                <span class=\"n\">implementation</span> <span class=\"s2\">\"org.jetbrains.kotlinx:kotlinx-serialization-runtime:$serialization_version\"</span>\n\n                <span class=\"n\">implementation</span> <span class=\"s2\">\"io.ktor:ktor-client-core-jvm:$ktor_version\"</span>\n                <span class=\"n\">implementation</span> <span class=\"s2\">\"io.ktor:ktor-client-serialization-jvm:$ktor_version\"</span>\n\n                <span class=\"n\">implementation</span> <span class=\"s2\">\"io.ktor:ktor-client-okhttp:$ktor_version\"</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"n\">androidTest</span> <span class=\"o\">{</span>\n            <span class=\"n\">dependencies</span> <span class=\"o\">{</span>\n                <span class=\"n\">implementation</span> <span class=\"nf\">kotlin</span><span class=\"o\">(</span><span class=\"s1\">'test'</span><span class=\"o\">)</span>\n                <span class=\"n\">implementation</span> <span class=\"nf\">kotlin</span><span class=\"o\">(</span><span class=\"s1\">'test-junit'</span><span class=\"o\">)</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"n\">iosMain</span> <span class=\"o\">{</span>\n            <span class=\"n\">dependencies</span> <span class=\"o\">{</span>\n                <span class=\"n\">implementation</span> <span class=\"s2\">\"org.jetbrains.kotlinx:kotlinx-coroutines-core-native:$coroutines_version\"</span>\n                <span class=\"n\">implementation</span> <span class=\"s2\">\"org.jetbrains.kotlinx:kotlinx-serialization-runtime-native:$serialization_version\"</span>\n\n                <span class=\"n\">implementation</span> <span class=\"s2\">\"io.ktor:ktor-client-ios:$ktor_version\"</span>\n                <span class=\"n\">implementation</span> <span class=\"s2\">\"io.ktor:ktor-client-core-native:$ktor_version\"</span>\n                <span class=\"n\">implementation</span> <span class=\"s2\">\"io.ktor:ktor-client-serialization-native:$ktor_version\"</span>\n            <span class=\"o\">}</span>\n        <span class=\"o\">}</span>\n        <span class=\"n\">iosTest</span> <span class=\"o\">{</span>\n        <span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>Lastly, we have to add <a href=\"https://kotlinlang.org/docs/reference/building-mpp-with-gradle.html#experimental-metadata-publishing-mode\">another line</a> on the <code class=\"language-plaintext highlighter-rouge\">settings.gradle</code> for the coroutines:</p>\n\n<div class=\"language-groovy highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">enableFeaturePreview</span><span class=\"o\">(</span><span class=\"s2\">\"GRADLE_METADATA\"</span><span class=\"o\">)</span>\n</code></pre></div></div>\n\n<blockquote>\n  <p>All these changes can be found on <a href=\"https://github.com/diamantidis/BlogApp/commit/6b4f4c3d2ac7042eb9aeef8d739f741651c24570\">this GitHub commit</a>.</p>\n</blockquote>\n\n<p>Having all the dependencies in place, we are ready to move on to the actual library.</p>\n\n<p>Let’s navigate to the <code class=\"language-plaintext highlighter-rouge\">common</code> module inside the <code class=\"language-plaintext highlighter-rouge\">shared</code> folder. There, we will create a package, which will host our feed reader. In my case the package name is <code class=\"language-plaintext highlighter-rouge\">io.github.diamantidis.feedreader</code> and that will be the working directory for the rest of the post.</p>\n\n<h3 id=\"models\">Models</h3>\n\n<p>Inside this package folder we will create a new directory named <code class=\"language-plaintext highlighter-rouge\">model</code>, where we will place the models that will be used to map the JSON feed to a Kotlin object.</p>\n\n<p>Based on the <a href=\"https://diamantidis.github.io/feed.json\">JSON feed file</a> we are going to need three classes, so let’s create three files inside the <code class=\"language-plaintext highlighter-rouge\">model</code> directory: <code class=\"language-plaintext highlighter-rouge\">Author.kt</code>, <code class=\"language-plaintext highlighter-rouge\">Feed.kt</code> and <code class=\"language-plaintext highlighter-rouge\">Item.kt</code> and add the following snippets respectively.</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// model/Author.kt</span>\n<span class=\"k\">package</span> <span class=\"nn\">io.github.diamantidis.feedreader.model</span>\n\n<span class=\"k\">import</span> <span class=\"nn\">kotlinx.serialization.Serializable</span>\n\n<span class=\"nd\">@Serializable</span>\n<span class=\"kd\">data class</span> <span class=\"nc\">Author</span> <span class=\"p\">(</span>\n    <span class=\"kd\">val</span> <span class=\"py\">name</span><span class=\"p\">:</span> <span class=\"nc\">String</span><span class=\"p\">,</span>\n    <span class=\"kd\">val</span> <span class=\"py\">url</span><span class=\"p\">:</span> <span class=\"nc\">String</span>\n<span class=\"p\">)</span>\n</code></pre></div></div>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// model/Feed.kt</span>\n<span class=\"k\">package</span> <span class=\"nn\">io.github.diamantidis.feedreader.model</span>\n\n<span class=\"k\">import</span> <span class=\"nn\">kotlinx.serialization.SerialName</span>\n<span class=\"k\">import</span> <span class=\"nn\">kotlinx.serialization.Serializable</span>\n\n<span class=\"nd\">@Serializable</span>\n<span class=\"kd\">data class</span> <span class=\"nc\">Feed</span> <span class=\"p\">(</span>\n    <span class=\"kd\">val</span> <span class=\"py\">version</span><span class=\"p\">:</span> <span class=\"nc\">String</span><span class=\"p\">,</span>\n    <span class=\"kd\">val</span> <span class=\"py\">title</span><span class=\"p\">:</span> <span class=\"nc\">String</span><span class=\"p\">,</span>\n    <span class=\"nd\">@SerialName</span><span class=\"p\">(</span><span class=\"s\">\"home_page_url\"</span><span class=\"p\">)</span>\n    <span class=\"kd\">val</span> <span class=\"py\">homePageURL</span><span class=\"p\">:</span> <span class=\"nc\">String</span><span class=\"p\">,</span>\n    <span class=\"nd\">@SerialName</span><span class=\"p\">(</span><span class=\"s\">\"feed_url\"</span><span class=\"p\">)</span>\n    <span class=\"kd\">var</span> <span class=\"py\">feedURL</span><span class=\"p\">:</span> <span class=\"nc\">String</span><span class=\"p\">,</span>\n    <span class=\"kd\">val</span> <span class=\"py\">description</span><span class=\"p\">:</span> <span class=\"nc\">String</span><span class=\"p\">,</span>\n    <span class=\"kd\">val</span> <span class=\"py\">icon</span><span class=\"p\">:</span> <span class=\"nc\">String</span><span class=\"p\">?</span> <span class=\"p\">=</span> <span class=\"k\">null</span><span class=\"p\">,</span>\n    <span class=\"kd\">val</span> <span class=\"py\">favicon</span><span class=\"p\">:</span> <span class=\"nc\">String</span><span class=\"p\">?</span> <span class=\"p\">=</span> <span class=\"k\">null</span><span class=\"p\">,</span>\n    <span class=\"kd\">var</span> <span class=\"py\">expired</span><span class=\"p\">:</span> <span class=\"nc\">Boolean</span><span class=\"p\">?</span> <span class=\"p\">=</span> <span class=\"k\">null</span><span class=\"p\">,</span>\n    <span class=\"kd\">val</span> <span class=\"py\">author</span><span class=\"p\">:</span> <span class=\"nc\">Author</span><span class=\"p\">,</span>\n    <span class=\"kd\">val</span> <span class=\"py\">items</span><span class=\"p\">:</span> <span class=\"nc\">List</span><span class=\"p\">&lt;</span><span class=\"nc\">Item</span><span class=\"p\">&gt;</span>\n<span class=\"p\">)</span>\n</code></pre></div></div>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// model/Item.kt</span>\n<span class=\"k\">package</span> <span class=\"nn\">io.github.diamantidis.feedreader.model</span>\n\n<span class=\"k\">import</span> <span class=\"nn\">io.ktor.util.date.GMTDate</span>\n<span class=\"k\">import</span> <span class=\"nn\">kotlinx.serialization.SerialName</span>\n<span class=\"k\">import</span> <span class=\"nn\">kotlinx.serialization.Serializable</span>\n<span class=\"k\">import</span> <span class=\"nn\">kotlinx.serialization.Transient</span>\n<span class=\"k\">import</span> <span class=\"nn\">io.github.diamantidis.feedreader.utils.parseDate</span>\n\n<span class=\"nd\">@Serializable</span>\n<span class=\"kd\">data class</span> <span class=\"nc\">Item</span> <span class=\"p\">(</span>\n    <span class=\"kd\">val</span> <span class=\"py\">id</span><span class=\"p\">:</span> <span class=\"nc\">String</span><span class=\"p\">,</span>\n    <span class=\"kd\">val</span> <span class=\"py\">url</span><span class=\"p\">:</span> <span class=\"nc\">String</span><span class=\"p\">,</span>\n    <span class=\"kd\">val</span> <span class=\"py\">title</span><span class=\"p\">:</span> <span class=\"nc\">String</span><span class=\"p\">,</span>\n    <span class=\"nd\">@SerialName</span><span class=\"p\">(</span><span class=\"s\">\"date_published\"</span><span class=\"p\">)</span>\n    <span class=\"kd\">val</span> <span class=\"py\">datePublishedStr</span><span class=\"p\">:</span> <span class=\"nc\">String</span><span class=\"p\">?</span> <span class=\"p\">=</span> <span class=\"k\">null</span><span class=\"p\">,</span>\n    <span class=\"nd\">@SerialName</span><span class=\"p\">(</span><span class=\"s\">\"date_modified\"</span><span class=\"p\">)</span>\n    <span class=\"kd\">val</span> <span class=\"py\">dateModifiedStr</span><span class=\"p\">:</span> <span class=\"nc\">String</span><span class=\"p\">?</span> <span class=\"p\">=</span> <span class=\"k\">null</span><span class=\"p\">,</span>\n    <span class=\"kd\">val</span> <span class=\"py\">author</span><span class=\"p\">:</span> <span class=\"nc\">Author</span><span class=\"p\">?</span> <span class=\"p\">=</span> <span class=\"k\">null</span><span class=\"p\">,</span>\n    <span class=\"kd\">val</span> <span class=\"py\">summary</span><span class=\"p\">:</span> <span class=\"nc\">String</span><span class=\"p\">?</span> <span class=\"p\">=</span> <span class=\"k\">null</span><span class=\"p\">,</span>\n    <span class=\"nd\">@SerialName</span><span class=\"p\">(</span><span class=\"s\">\"content_html\"</span><span class=\"p\">)</span>\n    <span class=\"kd\">val</span> <span class=\"py\">contentHtml</span><span class=\"p\">:</span> <span class=\"nc\">String</span><span class=\"p\">?</span> <span class=\"p\">=</span> <span class=\"k\">null</span>\n<span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nd\">@Transient</span>\n    <span class=\"kd\">val</span> <span class=\"py\">datePublished</span><span class=\"p\">:</span> <span class=\"nc\">GMTDate</span><span class=\"p\">?</span>\n        <span class=\"k\">get</span><span class=\"p\">()</span> <span class=\"p\">=</span> <span class=\"n\">datePublishedStr</span><span class=\"o\">?.</span><span class=\"nf\">parseDate</span><span class=\"p\">()</span>\n    <span class=\"nd\">@Transient</span>\n    <span class=\"kd\">val</span> <span class=\"py\">dateModified</span><span class=\"p\">:</span> <span class=\"nc\">GMTDate</span><span class=\"p\">?</span>\n        <span class=\"k\">get</span><span class=\"p\">()</span> <span class=\"p\">=</span> <span class=\"n\">dateModifiedStr</span><span class=\"o\">?.</span><span class=\"nf\">parseDate</span><span class=\"p\">()</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n<p>As you can see from these snippets, we are using the <code class=\"language-plaintext highlighter-rouge\">kotlinx.serialization</code> and the <code class=\"language-plaintext highlighter-rouge\">@Serializable</code> and <code class=\"language-plaintext highlighter-rouge\">@SerialName</code> annotations for the de-serialization. \nSome properties are declared optional, as they may not be on the response we are going to get from the feed. Furthermore, we make use of the <code class=\"language-plaintext highlighter-rouge\">@Transient</code> annotation alongside a helper function named <code class=\"language-plaintext highlighter-rouge\">parseDate()</code> and ktor’s <code class=\"language-plaintext highlighter-rouge\">GMTDate</code> to get a date representation of the dates which are plain string properties on the JSON feed.</p>\n\n<p>For this helper function, and for any potential likewise functionality, I have created another folder named <code class=\"language-plaintext highlighter-rouge\">utils</code>. Inside this directory a file named <code class=\"language-plaintext highlighter-rouge\">DateFormatter.kt</code> is added with the following content:</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">package</span> <span class=\"nn\">io.github.diamantidis.feedreader.utils</span>\n\n<span class=\"k\">import</span> <span class=\"nn\">io.ktor.util.date.GMTDate</span>\n<span class=\"k\">import</span> <span class=\"nn\">io.ktor.util.date.Month</span>\n\n<span class=\"k\">internal</span> <span class=\"k\">fun</span> <span class=\"nc\">String</span><span class=\"p\">.</span><span class=\"nf\">parseDate</span><span class=\"p\">():</span> <span class=\"nc\">GMTDate</span> <span class=\"p\">{</span>\n    <span class=\"kd\">val</span> <span class=\"py\">dateRegex</span> <span class=\"p\">=</span> <span class=\"s\">\"^(-?(?:[1-9][0-9]*)?[0-9]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\\\\\\\\.[0-9]+)?(Z)?\"</span><span class=\"p\">.</span><span class=\"nf\">toRegex</span><span class=\"p\">()</span>\n\n    <span class=\"kd\">val</span> <span class=\"py\">matchResult</span> <span class=\"p\">=</span> <span class=\"n\">dateRegex</span><span class=\"p\">.</span><span class=\"nf\">find</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">)</span>\n\n    <span class=\"n\">matchResult</span><span class=\"o\">?.</span><span class=\"n\">groupValues</span><span class=\"o\">?.</span><span class=\"nf\">let</span> <span class=\"p\">{</span>\n        <span class=\"kd\">val</span> <span class=\"py\">year</span> <span class=\"p\">=</span> <span class=\"n\">it</span><span class=\"p\">.</span><span class=\"k\">get</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">).</span><span class=\"nf\">toInt</span><span class=\"p\">()</span>\n        <span class=\"kd\">val</span> <span class=\"py\">month</span> <span class=\"p\">=</span> <span class=\"n\">it</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">].</span><span class=\"nf\">toInt</span><span class=\"p\">()</span>\n        <span class=\"kd\">val</span> <span class=\"py\">day</span> <span class=\"p\">=</span> <span class=\"n\">it</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">].</span><span class=\"nf\">toInt</span><span class=\"p\">()</span>\n        <span class=\"kd\">val</span> <span class=\"py\">hour</span> <span class=\"p\">=</span> <span class=\"n\">it</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">].</span><span class=\"nf\">toInt</span><span class=\"p\">()</span>\n        <span class=\"kd\">val</span> <span class=\"py\">minute</span> <span class=\"p\">=</span> <span class=\"n\">it</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">].</span><span class=\"nf\">toInt</span><span class=\"p\">()</span>\n        <span class=\"kd\">val</span> <span class=\"py\">second</span> <span class=\"p\">=</span> <span class=\"n\">it</span><span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">].</span><span class=\"nf\">toInt</span><span class=\"p\">()</span>\n\n        <span class=\"k\">return</span> <span class=\"nc\">GMTDate</span><span class=\"p\">(</span><span class=\"n\">second</span><span class=\"p\">,</span> <span class=\"n\">minute</span><span class=\"p\">,</span> <span class=\"n\">hour</span><span class=\"p\">,</span> <span class=\"n\">day</span><span class=\"p\">,</span> <span class=\"nc\">Month</span><span class=\"p\">.</span><span class=\"nf\">from</span><span class=\"p\">(</span><span class=\"n\">month</span> <span class=\"p\">-</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">year</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span> <span class=\"o\">?:</span> <span class=\"nf\">run</span> <span class=\"p\">{</span>\n        <span class=\"k\">throw</span> <span class=\"nc\">Error</span><span class=\"p\">(</span><span class=\"s\">\"Error while parsing $this\"</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>The helper function makes use of a regex to parse each component of a date field and then create an instance of <code class=\"language-plaintext highlighter-rouge\">GMTDate</code>.</p>\n\n<blockquote>\n  <p>All these changes can be found on <a href=\"https://github.com/diamantidis/BlogApp/commit/539a2b0350825c740a7193386179f2b8841b9055\">this GitHub commit</a>.</p>\n</blockquote>\n\n<p>And that’s it with the model layer. We can now move on to the <code class=\"language-plaintext highlighter-rouge\">Ktor</code> implementation which will be responsible for the network request and the de-serialization of the response.</p>\n\n<h3 id=\"networking\">Networking</h3>\n\n<p>For the network we are going to create another package named <code class=\"language-plaintext highlighter-rouge\">network</code> and inside it we are going add a new file named <code class=\"language-plaintext highlighter-rouge\">Api.kt</code>. This file will have the following content:</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">package</span> <span class=\"nn\">io.github.diamantidis.feedreader.network</span>\n\n<span class=\"k\">import</span> <span class=\"nn\">io.ktor.client.HttpClient</span>\n<span class=\"k\">import</span> <span class=\"nn\">io.ktor.client.features.json.JsonFeature</span>\n<span class=\"k\">import</span> <span class=\"nn\">io.ktor.client.features.json.serializer.KotlinxSerializer</span>\n<span class=\"k\">import</span> <span class=\"nn\">io.ktor.client.request.HttpRequestBuilder</span>\n<span class=\"k\">import</span> <span class=\"nn\">io.ktor.client.request.get</span>\n<span class=\"k\">import</span> <span class=\"nn\">io.ktor.http.takeFrom</span>\n<span class=\"k\">import</span> <span class=\"nn\">kotlinx.serialization.json.Json</span>\n<span class=\"k\">import</span> <span class=\"nn\">io.github.diamantidis.feedreader.model.Feed</span>\n\n<span class=\"kd\">class</span> <span class=\"nc\">Api</span> <span class=\"p\">{</span>\n    <span class=\"k\">private</span> <span class=\"kd\">val</span> <span class=\"py\">client</span><span class=\"p\">:</span> <span class=\"nc\">HttpClient</span> <span class=\"p\">=</span> <span class=\"nc\">HttpClient</span> <span class=\"p\">{</span>\n        <span class=\"nf\">install</span><span class=\"p\">(</span><span class=\"nc\">JsonFeature</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">serializer</span> <span class=\"p\">=</span> <span class=\"nc\">KotlinxSerializer</span><span class=\"p\">(</span><span class=\"nc\">Json</span><span class=\"p\">.</span><span class=\"n\">nonstrict</span><span class=\"p\">).</span><span class=\"nf\">apply</span> <span class=\"p\">{</span>\n                <span class=\"nf\">setMapper</span><span class=\"p\">(</span><span class=\"nc\">Feed</span><span class=\"o\">::</span><span class=\"k\">class</span><span class=\"p\">,</span> <span class=\"nc\">Feed</span><span class=\"p\">.</span><span class=\"nf\">serializer</span><span class=\"p\">())</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">private</span> <span class=\"k\">fun</span> <span class=\"nc\">HttpRequestBuilder</span><span class=\"p\">.</span><span class=\"nf\">apiUrl</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nc\">String</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nf\">url</span> <span class=\"p\">{</span>\n            <span class=\"nf\">takeFrom</span><span class=\"p\">(</span><span class=\"s\">\"https://diamantidis.github.io/\"</span><span class=\"p\">)</span>\n            <span class=\"n\">encodedPath</span> <span class=\"p\">=</span> <span class=\"n\">path</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">suspend</span> <span class=\"k\">fun</span> <span class=\"nf\">fetchFeed</span><span class=\"p\">():</span> <span class=\"nc\">Feed</span> <span class=\"p\">=</span> <span class=\"n\">client</span><span class=\"p\">.</span><span class=\"k\">get</span> <span class=\"p\">{</span>\n        <span class=\"nf\">apiUrl</span><span class=\"p\">(</span><span class=\"s\">\"feed.json\"</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>First we create the HttpClient and define the serializer that will transform the JSON response to a Kotlin object. Then, we define a helper function to construct the URL and lastly we define the coroutine function that will make the request and return an object of the class <code class=\"language-plaintext highlighter-rouge\">Feed</code> that we have previously mentioned.</p>\n\n<blockquote>\n  <p>All these changes can be found on <a href=\"https://github.com/diamantidis/BlogApp/commit/fcb5dc3237a1fe7de82a397c8569069a2c589d9f\">this GitHub commit</a>.</p>\n</blockquote>\n\n<h3 id=\"coroutines\">Coroutines</h3>\n\n<p>As we said before, for our network processes, we are going to make use of <code class=\"language-plaintext highlighter-rouge\">coroutines</code>.</p>\n\n<p>Generally it’s a good practice to not use the <code class=\"language-plaintext highlighter-rouge\">GlobalScope</code> but rather provide a custom instance of <code class=\"language-plaintext highlighter-rouge\">CoroutineScope</code>. \nSince we are working on objects with a lifecycle, we should cancel all the operation related to these objects, when they are destroyed.</p>\n\n<p>Using <code class=\"language-plaintext highlighter-rouge\">GlobalScope</code> we have to do this manual for each operation, whereas with the use of an instance of <code class=\"language-plaintext highlighter-rouge\">CoroutineScope</code> we can cancel all the operations of this scope by calling the function <code class=\"language-plaintext highlighter-rouge\">cancel</code>. For more info you can refer to <a href=\"https://kotlinlang.org/docs/reference/coroutines/coroutine-context-and-dispatchers.html#coroutine-scope\">Coroutine’s documentation</a>.</p>\n\n<p>To define a custom <code class=\"language-plaintext highlighter-rouge\">CoroutineScope</code> provider, let’s create a file named <code class=\"language-plaintext highlighter-rouge\">common.kt</code> and we add the following content:</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">package</span> <span class=\"nn\">io.github.diamantidis.feedreader</span>\n\n<span class=\"k\">import</span> <span class=\"nn\">kotlinx.coroutines.CoroutineScope</span>\n\n<span class=\"k\">internal</span> <span class=\"n\">expect</span> <span class=\"k\">fun</span> <span class=\"nf\">ApplicationScope</span><span class=\"p\">():</span> <span class=\"nc\">CoroutineScope</span>\n</code></pre></div></div>\n\n<p>Basically, with this snippet, we are stating that we expect for a native implementation of a <code class=\"language-plaintext highlighter-rouge\">CoroutineScope</code> provider function from both the iOS and Android module.</p>\n\n<p>So, on the Android module, we are going to add an <code class=\"language-plaintext highlighter-rouge\">ApplicationScope.kt</code> file containing the following snippet where we provide the actual implementation:</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">package</span> <span class=\"nn\">io.github.diamantidis.feedreader</span>\n\n<span class=\"k\">import</span> <span class=\"nn\">kotlinx.coroutines.CoroutineScope</span>\n<span class=\"k\">import</span> <span class=\"nn\">kotlinx.coroutines.MainScope</span>\n\n<span class=\"k\">internal</span> <span class=\"n\">actual</span> <span class=\"k\">fun</span> <span class=\"nf\">ApplicationScope</span><span class=\"p\">():</span> <span class=\"nc\">CoroutineScope</span> <span class=\"p\">=</span> <span class=\"nc\">MainScope</span><span class=\"p\">()</span>\n</code></pre></div></div>\n\n<p>Contrary to the Android implementation, on the iOS module, we have a little more work to do. We have to create our own dispatcher, since iOS doesn’t provide a default one like Android.</p>\n\n<p>Currently there is a known open issue regarding support for <a href=\"https://github.com/Kotlin/kotlinx.coroutines/issues/462\">multi-threaded coroutines on Kotlin/Native</a> and for this reason our custom dispatcher will use Grand Central Dispatch to run the asynchronous code on the main thread.</p>\n\n<p>For this implementation, we are going to create a new file named <code class=\"language-plaintext highlighter-rouge\">ApplicationScope.kt</code> inside the iOS module and place the following code in it:</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">package</span> <span class=\"nn\">io.github.diamantidis.feedreader</span>\n\n<span class=\"k\">import</span> <span class=\"nn\">kotlinx.coroutines.CoroutineDispatcher</span>\n<span class=\"k\">import</span> <span class=\"nn\">kotlinx.coroutines.CoroutineScope</span>\n<span class=\"k\">import</span> <span class=\"nn\">kotlinx.coroutines.Runnable</span>\n<span class=\"k\">import</span> <span class=\"nn\">platform.darwin.dispatch_async</span>\n<span class=\"k\">import</span> <span class=\"nn\">platform.darwin.dispatch_get_main_queue</span>\n<span class=\"k\">import</span> <span class=\"nn\">platform.darwin.dispatch_queue_t</span>\n<span class=\"k\">import</span> <span class=\"nn\">kotlin.coroutines.CoroutineContext</span>\n<span class=\"k\">import</span> <span class=\"nn\">kotlin.native.concurrent.freeze</span>\n\n<span class=\"k\">internal</span> <span class=\"n\">actual</span> <span class=\"k\">fun</span> <span class=\"nf\">ApplicationScope</span><span class=\"p\">():</span> <span class=\"nc\">CoroutineScope</span> <span class=\"p\">=</span> <span class=\"nc\">CoroutineScope</span><span class=\"p\">(</span><span class=\"nc\">MainDispatcher</span><span class=\"p\">(</span><span class=\"nf\">dispatch_get_main_queue</span><span class=\"p\">()))</span>\n\n<span class=\"k\">internal</span> <span class=\"kd\">class</span> <span class=\"nc\">MainDispatcher</span><span class=\"p\">(</span><span class=\"k\">private</span> <span class=\"kd\">val</span> <span class=\"py\">dispatchQueue</span><span class=\"p\">:</span> <span class=\"n\">dispatch_queue_t</span><span class=\"p\">)</span> <span class=\"p\">:</span> <span class=\"nc\">CoroutineDispatcher</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">override</span> <span class=\"k\">fun</span> <span class=\"nf\">dispatch</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">:</span> <span class=\"nc\">CoroutineContext</span><span class=\"p\">,</span> <span class=\"n\">block</span><span class=\"p\">:</span> <span class=\"nc\">Runnable</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nf\">dispatch_async</span><span class=\"p\">(</span><span class=\"n\">dispatchQueue</span><span class=\"p\">.</span><span class=\"nf\">freeze</span><span class=\"p\">())</span> <span class=\"p\">{</span>\n            <span class=\"n\">block</span><span class=\"p\">.</span><span class=\"nf\">run</span><span class=\"p\">()</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<blockquote>\n  <p>All these changes can be found on <a href=\"https://github.com/diamantidis/BlogApp/commit/a63b4c3e75440fb6080c3e7dfbb3539e61f975a2\">this GitHub commit</a>.</p>\n</blockquote>\n\n<p>Now, that we are done with the model, the network and the coroutines, let’s take some time to focus on the presentation.</p>\n\n<h3 id=\"presentation\">Presentation</h3>\n\n<p>For the presentation logic, we are going to create yet another folder named <code class=\"language-plaintext highlighter-rouge\">presentation</code>. Since we have to perform a network request, every view that is going to fetch this feed will have to handle three states: Loading the data, a potential error and of course the successful scenario, in which case the feed info is fetched.</p>\n\n<p>To cater for all these scenarios we are going to define an interface that our native views will have to implement. For this reason, let’s create a file named <code class=\"language-plaintext highlighter-rouge\">FeedView.kt</code> and add the following as a content:</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">package</span> <span class=\"nn\">io.github.diamantidis.feedreader.presentation</span>\n\n<span class=\"k\">import</span> <span class=\"nn\">io.github.diamantidis.feedreader.model.Feed</span>\n\n<span class=\"kd\">interface</span> <span class=\"nc\">FeedView</span> <span class=\"p\">{</span>\n    <span class=\"k\">fun</span> <span class=\"nf\">showData</span><span class=\"p\">(</span><span class=\"n\">feed</span><span class=\"p\">:</span> <span class=\"nc\">Feed</span><span class=\"p\">)</span>\n    <span class=\"k\">fun</span> <span class=\"nf\">showError</span><span class=\"p\">(</span><span class=\"n\">error</span><span class=\"p\">:</span> <span class=\"nc\">Throwable</span><span class=\"p\">)</span>\n    <span class=\"k\">fun</span> <span class=\"nf\">showLoading</span><span class=\"p\">()</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>We simply declare the three functions that we are going to call depending on the state of the request.</p>\n\n<blockquote>\n  <p>All these changes can be found on <a href=\"https://github.com/diamantidis/BlogApp/commit/b9ffc627d1893401b14b767711f2858a55db919e\">this GitHub commit</a>.</p>\n</blockquote>\n\n<p>And now it’s time to connect all these pieces together. We are following the MVP pattern, so we will define a presenter that will interact with the view both to fetch the data and to update the UI depending on the response of the network request.</p>\n\n<h3 id=\"presenter\">Presenter</h3>\n\n<p>Let’s create a new folder named <code class=\"language-plaintext highlighter-rouge\">presenter</code> and a new file named <code class=\"language-plaintext highlighter-rouge\">FeedPresenter.kt</code>. Next, add the following snippet in this file.</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">package</span> <span class=\"nn\">io.github.diamantidis.feedreader.presenter</span>\n\n<span class=\"k\">import</span> <span class=\"nn\">kotlinx.coroutines.*</span>\n<span class=\"k\">import</span> <span class=\"nn\">io.github.diamantidis.feedreader.ApplicationScope</span>\n<span class=\"k\">import</span> <span class=\"nn\">io.github.diamantidis.feedreader.model.Feed</span>\n<span class=\"k\">import</span> <span class=\"nn\">io.github.diamantidis.feedreader.network.Api</span>\n<span class=\"k\">import</span> <span class=\"nn\">io.github.diamantidis.feedreader.presentation.FeedView</span>\n\n<span class=\"kd\">class</span> <span class=\"nc\">FeedPresenter</span><span class=\"p\">(</span>\n    <span class=\"k\">private</span> <span class=\"kd\">val</span> <span class=\"py\">view</span><span class=\"p\">:</span> <span class=\"nc\">FeedView</span><span class=\"p\">,</span>\n    <span class=\"k\">private</span> <span class=\"kd\">val</span> <span class=\"py\">api</span><span class=\"p\">:</span> <span class=\"nc\">Api</span> <span class=\"p\">=</span> <span class=\"nc\">Api</span><span class=\"p\">(),</span>\n    <span class=\"k\">private</span> <span class=\"kd\">val</span> <span class=\"py\">mainScope</span><span class=\"p\">:</span> <span class=\"nc\">CoroutineScope</span> <span class=\"p\">=</span> <span class=\"nc\">ApplicationScope</span><span class=\"p\">()</span>\n<span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">fun</span> <span class=\"nf\">loadData</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"n\">view</span><span class=\"p\">.</span><span class=\"nf\">showLoading</span><span class=\"p\">()</span>\n\n        <span class=\"n\">mainScope</span><span class=\"p\">.</span><span class=\"nf\">launch</span> <span class=\"p\">{</span>\n            <span class=\"k\">try</span> <span class=\"p\">{</span>\n                <span class=\"kd\">val</span> <span class=\"py\">result</span><span class=\"p\">:</span> <span class=\"nc\">Feed</span> <span class=\"p\">=</span> <span class=\"n\">api</span><span class=\"p\">.</span><span class=\"nf\">fetchFeed</span><span class=\"p\">()</span>\n                <span class=\"n\">view</span><span class=\"p\">.</span><span class=\"nf\">showData</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n            <span class=\"p\">}</span> <span class=\"k\">catch</span> <span class=\"p\">(</span><span class=\"n\">error</span><span class=\"p\">:</span> <span class=\"nc\">Throwable</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"n\">view</span><span class=\"p\">.</span><span class=\"nf\">showError</span><span class=\"p\">(</span><span class=\"n\">error</span><span class=\"p\">)</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">fun</span> <span class=\"nf\">destroy</span><span class=\"p\">()</span> <span class=\"p\">=</span> <span class=\"n\">mainScope</span><span class=\"p\">.</span><span class=\"nf\">cancel</span><span class=\"p\">()</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>In this class we inject the view that will present the data, using the interface we created earlier. We also inject the dependencies like the <code class=\"language-plaintext highlighter-rouge\">CoroutineScope</code> and the <code class=\"language-plaintext highlighter-rouge\">Api</code>, providing some default values.</p>\n\n<p>For now, the main functionalities of this class are just two. One to initialize the process of fetching the feed and one for cancelling any pending process. The first function, <code class=\"language-plaintext highlighter-rouge\">loadData</code>, is responsible for triggering the network request and notifying the view about the state changes by calling the corresponding function declared in the <code class=\"language-plaintext highlighter-rouge\">FeedView</code> interface.</p>\n\n<p>The <code class=\"language-plaintext highlighter-rouge\">destroy</code> function will be called to terminate all the operations on the injected scope when the caller object is going to be destroyed.</p>\n\n<blockquote>\n  <p>All these changes can be found on <a href=\"https://github.com/diamantidis/BlogApp/commit/1a61e0ccc8f0c3583b813dd7ea1d53b77d484e44\">this GitHub commit</a>.</p>\n</blockquote>\n\n<p>With the above implementation of <code class=\"language-plaintext highlighter-rouge\">FeedPresenter</code> we should be done and ready to use our library from an iOS or Android app. Though on Android it is possible to create a new instance of the presenter by just calling <code class=\"language-plaintext highlighter-rouge\">private val presenter: FeedPresenter by lazy { FeedPresenter(this) }</code> from an activity that implements the <code class=\"language-plaintext highlighter-rouge\">FeedView</code> interface, on iOS is not so easy. Default constructors are not working as expected, so we have to instantiate a new instance of <code class=\"language-plaintext highlighter-rouge\">Api</code> and <code class=\"language-plaintext highlighter-rouge\">CoroutineScope</code>. Using a factory class would be a good alternative.</p>\n\n<h2 id=\"factory\">Factory</h2>\n\n<p>For this reason, let’s create a new directory named <code class=\"language-plaintext highlighter-rouge\">factory</code> and place a file named <code class=\"language-plaintext highlighter-rouge\">PresenterFactory.kt</code> inside it. Then, we put the following snippet as content to this file:</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">package</span> <span class=\"nn\">io.github.diamantidis.feedreader.factory</span>\n\n<span class=\"k\">import</span> <span class=\"nn\">io.github.diamantidis.feedreader.presentation.FeedView</span>\n<span class=\"k\">import</span> <span class=\"nn\">io.github.diamantidis.feedreader.presenter.FeedPresenter</span>\n\n<span class=\"kd\">class</span> <span class=\"nc\">PresenterFactory</span> <span class=\"p\">{</span>\n    <span class=\"k\">companion</span> <span class=\"k\">object</span> <span class=\"p\">{</span>\n        <span class=\"k\">fun</span> <span class=\"nf\">createFeedPresenter</span><span class=\"p\">(</span><span class=\"n\">view</span><span class=\"p\">:</span> <span class=\"nc\">FeedView</span><span class=\"p\">)</span> <span class=\"p\">=</span> <span class=\"nc\">FeedPresenter</span><span class=\"p\">(</span><span class=\"n\">view</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>In this file, we just declare a method on the companion object to instantiate the Presenter.</p>\n\n<p>Then we can use this class to create our presenter on both iOS and Android, like in the following snippets:</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// Android</span>\n<span class=\"k\">private</span> <span class=\"kd\">val</span> <span class=\"py\">presenter</span><span class=\"p\">:</span> <span class=\"nc\">FeedPresenter</span> <span class=\"k\">by</span> <span class=\"nf\">lazy</span> <span class=\"p\">{</span> <span class=\"nc\">PresenterFactory</span><span class=\"p\">.</span><span class=\"nf\">createFeedPresenter</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">)</span> <span class=\"p\">}</span>\n</code></pre></div></div>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// iOS</span>\n<span class=\"kd\">private</span> <span class=\"kd\">lazy</span> <span class=\"k\">var</span> <span class=\"nv\">presenter</span> <span class=\"o\">=</span> <span class=\"kt\">PresenterFactory</span><span class=\"o\">.</span><span class=\"kt\">Companion</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"nf\">createFeedPresenter</span><span class=\"p\">(</span><span class=\"nv\">view</span><span class=\"p\">:</span> <span class=\"k\">self</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<blockquote>\n  <p>All these changes can be found on <a href=\"https://github.com/diamantidis/BlogApp/commit/cc5f4c3adb70ac6e4e43141e459cd308e88724cf\">this GitHub commit</a>.</p>\n</blockquote>\n\n<p>Now, our JSON feed reader library is ready to be used on the apps. Let’s see how!</p>\n\n<h2 id=\"android-app\">Android app</h2>\n\n<p>For the Android app we have to implement the <code class=\"language-plaintext highlighter-rouge\">FeedView</code> interface on our <code class=\"language-plaintext highlighter-rouge\">MainActivity</code>, lazy initialize the <code class=\"language-plaintext highlighter-rouge\">FeedPresenter</code> and then by calling the function <code class=\"language-plaintext highlighter-rouge\">loadData</code> to fetch the feed. We then make use of an <code class=\"language-plaintext highlighter-rouge\">ArrayAdapter</code> to populate a <code class=\"language-plaintext highlighter-rouge\">ListView</code> with the titles of the post items.</p>\n\n<p>A dummy activity could be like the following example:</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">package</span> <span class=\"nn\">io.github.diamantidis.androidApp</span>\n\n<span class=\"k\">import</span> <span class=\"nn\">android.content.Context</span>\n<span class=\"k\">import</span> <span class=\"nn\">android.support.v7.app.AppCompatActivity</span>\n<span class=\"k\">import</span> <span class=\"nn\">android.os.Bundle</span>\n<span class=\"k\">import</span> <span class=\"nn\">android.view.View</span>\n<span class=\"k\">import</span> <span class=\"nn\">android.view.ViewGroup</span>\n<span class=\"k\">import</span> <span class=\"nn\">android.widget.*</span>\n<span class=\"k\">import</span> <span class=\"nn\">io.github.diamantidis.feedreader.factory.PresenterFactory</span>\n<span class=\"k\">import</span> <span class=\"nn\">io.github.diamantidis.feedreader.model.Feed</span>\n<span class=\"k\">import</span> <span class=\"nn\">io.github.diamantidis.feedreader.model.Item</span>\n<span class=\"k\">import</span> <span class=\"nn\">io.github.diamantidis.feedreader.presentation.FeedView</span>\n<span class=\"k\">import</span> <span class=\"nn\">io.github.diamantidis.feedreader.presenter.FeedPresenter</span>\n\n<span class=\"kd\">class</span> <span class=\"nc\">MainActivity</span> <span class=\"p\">:</span> <span class=\"nc\">AppCompatActivity</span><span class=\"p\">(),</span> <span class=\"nc\">FeedView</span> <span class=\"p\">{</span>\n    <span class=\"k\">override</span> <span class=\"k\">fun</span> <span class=\"nf\">showData</span><span class=\"p\">(</span><span class=\"n\">feed</span><span class=\"p\">:</span> <span class=\"nc\">Feed</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">adapter</span><span class=\"p\">.</span><span class=\"nf\">clear</span><span class=\"p\">()</span>\n        <span class=\"n\">adapter</span><span class=\"p\">.</span><span class=\"nf\">addAll</span><span class=\"p\">(</span><span class=\"n\">feed</span><span class=\"p\">.</span><span class=\"n\">items</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">override</span> <span class=\"k\">fun</span> <span class=\"nf\">showLoading</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"s\">\"Loading\"</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">override</span> <span class=\"k\">fun</span> <span class=\"nf\">showError</span><span class=\"p\">(</span><span class=\"n\">error</span><span class=\"p\">:</span> <span class=\"nc\">Throwable</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"s\">\"show error: ${error.message}\"</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">override</span> <span class=\"k\">fun</span> <span class=\"nf\">onCreate</span><span class=\"p\">(</span><span class=\"n\">savedInstanceState</span><span class=\"p\">:</span> <span class=\"nc\">Bundle</span><span class=\"p\">?)</span> <span class=\"p\">{</span>\n        <span class=\"k\">super</span><span class=\"p\">.</span><span class=\"nf\">onCreate</span><span class=\"p\">(</span><span class=\"n\">savedInstanceState</span><span class=\"p\">)</span>\n        <span class=\"kd\">val</span> <span class=\"py\">listView</span> <span class=\"p\">=</span> <span class=\"nc\">ListView</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">)</span>\n        <span class=\"n\">adapter</span> <span class=\"p\">=</span> <span class=\"nc\">FeedAdapter</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">,</span> <span class=\"nf\">mutableListOf</span><span class=\"p\">())</span>\n        <span class=\"n\">listView</span><span class=\"p\">.</span><span class=\"n\">adapter</span> <span class=\"p\">=</span> <span class=\"n\">adapter</span>\n\n        <span class=\"n\">presenter</span><span class=\"p\">.</span><span class=\"nf\">loadData</span><span class=\"p\">()</span>\n\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nf\">setContentView</span><span class=\"p\">(</span><span class=\"n\">listView</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">private</span> <span class=\"k\">lateinit</span> <span class=\"kd\">var</span> <span class=\"py\">adapter</span><span class=\"p\">:</span> <span class=\"nc\">FeedAdapter</span>\n    <span class=\"k\">private</span> <span class=\"kd\">val</span> <span class=\"py\">presenter</span><span class=\"p\">:</span> <span class=\"nc\">FeedPresenter</span> <span class=\"k\">by</span> <span class=\"nf\">lazy</span> <span class=\"p\">{</span> <span class=\"nc\">PresenterFactory</span><span class=\"p\">.</span><span class=\"nf\">createFeedPresenter</span><span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">)</span> <span class=\"p\">}</span>\n\n    <span class=\"k\">private</span> <span class=\"k\">inner</span> <span class=\"kd\">class</span> <span class=\"nc\">FeedAdapter</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">:</span> <span class=\"nc\">Context</span><span class=\"p\">,</span> <span class=\"n\">items</span><span class=\"p\">:</span> <span class=\"nc\">List</span><span class=\"p\">&lt;</span><span class=\"nc\">Item</span><span class=\"p\">&gt;)</span> <span class=\"p\">:</span>\n        <span class=\"nc\">ArrayAdapter</span><span class=\"p\">&lt;</span><span class=\"nc\">Item</span><span class=\"p\">&gt;(</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"p\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"p\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">items</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n        <span class=\"k\">override</span> <span class=\"k\">fun</span> <span class=\"nf\">getView</span><span class=\"p\">(</span><span class=\"n\">position</span><span class=\"p\">:</span> <span class=\"nc\">Int</span><span class=\"p\">,</span> <span class=\"n\">convertView</span><span class=\"p\">:</span> <span class=\"nc\">View</span><span class=\"p\">?,</span> <span class=\"n\">parent</span><span class=\"p\">:</span> <span class=\"nc\">ViewGroup</span><span class=\"p\">):</span> <span class=\"nc\">View</span> <span class=\"p\">{</span>\n\n            <span class=\"kd\">val</span> <span class=\"py\">item</span> <span class=\"p\">=</span> <span class=\"k\">super</span><span class=\"p\">.</span><span class=\"nf\">getItem</span><span class=\"p\">(</span><span class=\"n\">position</span><span class=\"p\">)</span>\n            <span class=\"kd\">val</span> <span class=\"py\">listLayout</span> <span class=\"p\">=</span> <span class=\"nc\">LinearLayout</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">)</span>\n            <span class=\"n\">listLayout</span><span class=\"p\">.</span><span class=\"n\">layoutParams</span> <span class=\"p\">=</span> <span class=\"nc\">AbsListView</span><span class=\"p\">.</span><span class=\"nc\">LayoutParams</span><span class=\"p\">(</span>\n                <span class=\"nc\">AbsListView</span><span class=\"p\">.</span><span class=\"nc\">LayoutParams</span><span class=\"p\">.</span><span class=\"nc\">WRAP_CONTENT</span><span class=\"p\">,</span>\n                <span class=\"nc\">AbsListView</span><span class=\"p\">.</span><span class=\"nc\">LayoutParams</span><span class=\"p\">.</span><span class=\"nc\">WRAP_CONTENT</span>\n            <span class=\"p\">)</span>\n            <span class=\"kd\">val</span> <span class=\"py\">listText</span> <span class=\"p\">=</span> <span class=\"nc\">TextView</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">)</span>\n            <span class=\"n\">listText</span><span class=\"p\">.</span><span class=\"nf\">setPadding</span><span class=\"p\">(</span><span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">)</span>\n            <span class=\"n\">listText</span><span class=\"p\">.</span><span class=\"n\">text</span> <span class=\"p\">=</span> <span class=\"n\">item</span><span class=\"o\">?.</span><span class=\"n\">title</span>\n\n            <span class=\"n\">listLayout</span><span class=\"p\">.</span><span class=\"nf\">addView</span><span class=\"p\">(</span><span class=\"n\">listText</span><span class=\"p\">)</span>\n\n            <span class=\"n\">listLayout</span><span class=\"p\">.</span><span class=\"nf\">setTag</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">listLayout</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Besides that, a few more changes are required on the <code class=\"language-plaintext highlighter-rouge\">build.gradle</code> and the <code class=\"language-plaintext highlighter-rouge\">AndroidManifest.xml</code>. All these changes can be found on <a href=\"https://github.com/diamantidis/BlogApp/commit/3b6b5d7a25bb3e358f4dbd375960e57b8f363929\">this GitHub commit</a>.</p>\n\n<h2 id=\"ios-app\">iOS app</h2>\n\n<p>Similarly for iOS, we follow a similar procedure; implement the <code class=\"language-plaintext highlighter-rouge\">FeedView</code> interface from our <code class=\"language-plaintext highlighter-rouge\">UIViewController</code>, lazy initialize the <code class=\"language-plaintext highlighter-rouge\">FeedPresenter</code> and then call the <code class=\"language-plaintext highlighter-rouge\">loadData</code> function, though instead of a <code class=\"language-plaintext highlighter-rouge\">ListView</code> we make use of the equivalent on iOS, which is a <code class=\"language-plaintext highlighter-rouge\">UITableView</code>.</p>\n\n<p>A dummy UIViewController could be like the following example:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">import</span> <span class=\"kt\">UIKit</span>\n<span class=\"kd\">import</span> <span class=\"n\">shared</span>\n\n<span class=\"kd\">class</span> <span class=\"kt\">ViewController</span><span class=\"p\">:</span> <span class=\"kt\">UIViewController</span><span class=\"p\">,</span> <span class=\"kt\">FeedView</span> <span class=\"p\">{</span>\n\n    <span class=\"kd\">func</span> <span class=\"nf\">showError</span><span class=\"p\">(</span><span class=\"nv\">error</span><span class=\"p\">:</span> <span class=\"kt\">KotlinThrowable</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">activityIndicatorView</span><span class=\"o\">.</span><span class=\"nf\">stopAnimating</span><span class=\"p\">()</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kd\">func</span> <span class=\"nf\">showData</span><span class=\"p\">(</span><span class=\"nv\">feed</span><span class=\"p\">:</span> <span class=\"kt\">Feed</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">activityIndicatorView</span><span class=\"o\">.</span><span class=\"nf\">stopAnimating</span><span class=\"p\">()</span>\n        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">tableView</span><span class=\"o\">.</span><span class=\"n\">separatorStyle</span> <span class=\"o\">=</span> <span class=\"o\">.</span><span class=\"n\">singleLine</span>\n        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">posts</span> <span class=\"o\">=</span> <span class=\"n\">feed</span><span class=\"o\">.</span><span class=\"n\">items</span>\n        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">tableView</span><span class=\"o\">.</span><span class=\"nf\">reloadData</span><span class=\"p\">()</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kd\">func</span> <span class=\"nf\">showLoading</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">tableView</span><span class=\"o\">.</span><span class=\"n\">separatorStyle</span> <span class=\"o\">=</span> <span class=\"o\">.</span><span class=\"k\">none</span>\n        <span class=\"n\">activityIndicatorView</span><span class=\"o\">.</span><span class=\"nf\">startAnimating</span><span class=\"p\">()</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">override</span> <span class=\"kd\">func</span> <span class=\"nf\">viewDidLoad</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">super</span><span class=\"o\">.</span><span class=\"nf\">viewDidLoad</span><span class=\"p\">()</span>\n\n        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">view</span><span class=\"o\">.</span><span class=\"nf\">addSubview</span><span class=\"p\">(</span><span class=\"n\">tableView</span><span class=\"p\">)</span>\n        <span class=\"kt\">NSLayoutConstraint</span><span class=\"o\">.</span><span class=\"nf\">activate</span><span class=\"p\">([</span>\n            <span class=\"n\">tableView</span><span class=\"o\">.</span><span class=\"n\">leadingAnchor</span><span class=\"o\">.</span><span class=\"nf\">constraint</span><span class=\"p\">(</span><span class=\"nv\">equalTo</span><span class=\"p\">:</span> <span class=\"n\">view</span><span class=\"o\">.</span><span class=\"n\">leadingAnchor</span><span class=\"p\">),</span>\n            <span class=\"n\">tableView</span><span class=\"o\">.</span><span class=\"n\">trailingAnchor</span><span class=\"o\">.</span><span class=\"nf\">constraint</span><span class=\"p\">(</span><span class=\"nv\">equalTo</span><span class=\"p\">:</span> <span class=\"n\">view</span><span class=\"o\">.</span><span class=\"n\">trailingAnchor</span><span class=\"p\">),</span>\n            <span class=\"n\">tableView</span><span class=\"o\">.</span><span class=\"n\">bottomAnchor</span><span class=\"o\">.</span><span class=\"nf\">constraint</span><span class=\"p\">(</span><span class=\"nv\">equalTo</span><span class=\"p\">:</span> <span class=\"n\">view</span><span class=\"o\">.</span><span class=\"n\">bottomAnchor</span><span class=\"p\">),</span>\n            <span class=\"n\">tableView</span><span class=\"o\">.</span><span class=\"n\">topAnchor</span><span class=\"o\">.</span><span class=\"nf\">constraint</span><span class=\"p\">(</span><span class=\"nv\">equalTo</span><span class=\"p\">:</span> <span class=\"n\">view</span><span class=\"o\">.</span><span class=\"n\">topAnchor</span><span class=\"p\">)</span>\n        <span class=\"p\">])</span>\n\n        <span class=\"n\">tableView</span><span class=\"o\">.</span><span class=\"n\">backgroundView</span> <span class=\"o\">=</span> <span class=\"n\">activityIndicatorView</span>\n        <span class=\"n\">presenter</span><span class=\"o\">.</span><span class=\"nf\">loadData</span><span class=\"p\">()</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">posts</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"kt\">Item</span><span class=\"p\">]()</span>\n    <span class=\"kd\">private</span> <span class=\"kd\">lazy</span> <span class=\"k\">var</span> <span class=\"nv\">presenter</span> <span class=\"o\">=</span> <span class=\"kt\">PresenterFactory</span><span class=\"o\">.</span><span class=\"kt\">Companion</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"nf\">createFeedPresenter</span><span class=\"p\">(</span><span class=\"nv\">view</span><span class=\"p\">:</span> <span class=\"k\">self</span><span class=\"p\">)</span>\n    <span class=\"kd\">private</span> <span class=\"kd\">lazy</span> <span class=\"k\">var</span> <span class=\"nv\">activityIndicatorView</span> <span class=\"o\">=</span> <span class=\"kt\">UIActivityIndicatorView</span><span class=\"p\">(</span><span class=\"nv\">activityIndicatorStyle</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">gray</span><span class=\"p\">)</span>\n\n    <span class=\"kd\">private</span> <span class=\"kd\">lazy</span> <span class=\"k\">var</span> <span class=\"nv\">tableView</span><span class=\"p\">:</span> <span class=\"kt\">UITableView</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"k\">var</span> <span class=\"nv\">tableView</span> <span class=\"o\">=</span> <span class=\"kt\">UITableView</span><span class=\"p\">()</span>\n        <span class=\"n\">tableView</span><span class=\"o\">.</span><span class=\"nf\">register</span><span class=\"p\">(</span><span class=\"kt\">UITableViewCell</span><span class=\"o\">.</span><span class=\"k\">self</span><span class=\"p\">,</span> <span class=\"nv\">forCellReuseIdentifier</span><span class=\"p\">:</span> <span class=\"s\">\"MyCell\"</span><span class=\"p\">)</span>\n        <span class=\"n\">tableView</span><span class=\"o\">.</span><span class=\"n\">dataSource</span> <span class=\"o\">=</span> <span class=\"k\">self</span>\n        <span class=\"n\">tableView</span><span class=\"o\">.</span><span class=\"n\">delegate</span> <span class=\"o\">=</span> <span class=\"k\">self</span>\n        <span class=\"n\">tableView</span><span class=\"o\">.</span><span class=\"n\">separatorStyle</span> <span class=\"o\">=</span> <span class=\"o\">.</span><span class=\"k\">none</span>\n        <span class=\"n\">tableView</span><span class=\"o\">.</span><span class=\"n\">translatesAutoresizingMaskIntoConstraints</span> <span class=\"o\">=</span> <span class=\"kc\">false</span>\n        <span class=\"k\">return</span> <span class=\"n\">tableView</span>\n    <span class=\"p\">}()</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">extension</span> <span class=\"kt\">ViewController</span><span class=\"p\">:</span> <span class=\"kt\">UITableViewDelegate</span><span class=\"p\">,</span> <span class=\"kt\">UITableViewDataSource</span> <span class=\"p\">{</span>\n    <span class=\"kd\">func</span> <span class=\"nf\">numberOfSections</span><span class=\"p\">(</span><span class=\"k\">in</span> <span class=\"nv\">tableView</span><span class=\"p\">:</span> <span class=\"kt\">UITableView</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Int</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">posts</span><span class=\"o\">.</span><span class=\"n\">isEmpty</span> <span class=\"p\">?</span> <span class=\"mi\">0</span> <span class=\"p\">:</span> <span class=\"mi\">1</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kd\">func</span> <span class=\"nf\">tableView</span><span class=\"p\">(</span><span class=\"n\">_</span> <span class=\"nv\">tableView</span><span class=\"p\">:</span> <span class=\"kt\">UITableView</span><span class=\"p\">,</span> <span class=\"n\">numberOfRowsInSection</span> <span class=\"nv\">section</span><span class=\"p\">:</span> <span class=\"kt\">Int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Int</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">posts</span><span class=\"o\">.</span><span class=\"n\">count</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kd\">func</span> <span class=\"nf\">tableView</span><span class=\"p\">(</span><span class=\"n\">_</span> <span class=\"nv\">tableView</span><span class=\"p\">:</span> <span class=\"kt\">UITableView</span><span class=\"p\">,</span> <span class=\"n\">cellForRowAt</span> <span class=\"nv\">indexPath</span><span class=\"p\">:</span> <span class=\"kt\">IndexPath</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">UITableViewCell</span> <span class=\"p\">{</span>\n        <span class=\"k\">let</span> <span class=\"nv\">cell</span> <span class=\"o\">=</span> <span class=\"n\">tableView</span><span class=\"o\">.</span><span class=\"nf\">dequeueReusableCell</span><span class=\"p\">(</span><span class=\"nv\">withIdentifier</span><span class=\"p\">:</span> <span class=\"s\">\"MyCell\"</span><span class=\"p\">,</span> <span class=\"nv\">for</span><span class=\"p\">:</span> <span class=\"n\">indexPath</span> <span class=\"k\">as</span> <span class=\"kt\">IndexPath</span><span class=\"p\">)</span>\n        <span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">accessoryType</span> <span class=\"o\">=</span> <span class=\"o\">.</span><span class=\"n\">disclosureIndicator</span>\n        <span class=\"n\">cell</span><span class=\"o\">.</span><span class=\"n\">textLabel</span><span class=\"o\">!.</span><span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"n\">posts</span><span class=\"p\">[</span><span class=\"n\">indexPath</span><span class=\"o\">.</span><span class=\"n\">row</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">title</span>\n        <span class=\"k\">return</span> <span class=\"n\">cell</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Again, all the changes required to build a dummy iOS app that will use the JSON feed reader library, can be found on <a href=\"https://github.com/diamantidis/BlogApp/commit/8c69b9ef7d856c3fb26c1d7eda0fb3c0f4ebae9b\">this GitHub commit</a>.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>To sum up, this post describes how to implement a JSON feed reader library with Kotlin Native and how to use it from both an Android and an iOS app. While building this library, we have seen how to use <code class=\"language-plaintext highlighter-rouge\">ktor</code> to implement the network request, utilize <code class=\"language-plaintext highlighter-rouge\">kotlinx-serialization</code>’s power to de-serialize the JSON response into a Kotlin object, learn how to work with <code class=\"language-plaintext highlighter-rouge\">coroutines</code> and take advantage of the <code class=\"language-plaintext highlighter-rouge\">MVP</code> pattern to communicate between the Kotlin Native library and the native application.</p>\n\n<p>Definitely the process of building this app, though it still lacks some basic functionality, helped me a lot to get more acquainted with Kotlin Native.\nNext step? To iterate over this implementation and add some more features like presenting the content of the post or adding some caching layer!!</p>\n\n<p>Thanks for reading and should you have any questions, suggestions or comments, just let me know on <a href=\"https://twitter.com/diamantidis_io\">Twitter</a> or <a href=\"mailto:diamantidis@outlook.com\">email me</a>!!</p>\n",
            "tags": ["JSON feed","Kotlin","Kotlin Native"],
            "image": "https://diamantidis.github.io/assets/socialIcon.png"
        },
        
        {
            "id": "https://diamantidis.github.io/2019/10/05/json-feed-for-jekyll-sites",
            "url": "https://diamantidis.github.io/2019/10/05/json-feed-for-jekyll-sites",
            "title": "JSON feed for Jekyll sites",
            "date_published": "2019-10-05T04:00:00+00:00",
            
            "date_modified": "2019-10-05T04:00:00+00:00",
            
            "author": {
                "name": "Ioannis Diamantidis",
                "url": "https://diamantidis.github.io"
            },
            "summary": "<p>Feed is a term used to usually describe a text file that provides information about the content of a website and it is primarily intended to be used for data exchange purposes.</p>\n\n",
            "content_html": "<p>Feed is a term used to usually describe a text file that provides information about the content of a website and it is primarily intended to be used for data exchange purposes.</p>\n\n<p>By following some specific schema specifications about the format of the file, a feed can be used by other apps or tools, which will read the content of a website, store it and if there is for example an update, they will notify the user about the new content.</p>\n\n<p>There are plenty such schema specifications and the most popular are <a href=\"https://tools.ietf.org/html/rfc4287\">Atom</a> and <a href=\"http://www.faqs.org/rfcs/rfc3339.html\">RSS</a> which both are using an XML-based format. But since JSON is the most prominent data format amongst developers, new options emerge, like the <a href=\"https://jsonfeed.org/\">JSON feed</a>.</p>\n\n<p>Since the launch of this blog, a plugin named <a href=\"https://github.com/jekyll/jekyll-feed\">jekyll-feed</a> is used to generate an Atom feed, which is still <a href=\"https://diamantidis.github.io/feed.xml\">in place</a> till now.</p>\n\n<p>So, why do I need a JSON feed if I already have an Atom one?</p>\n\n<h2 id=\"but-why\">But why?</h2>\n\n<p>First and foremost, it doesn’t hurt to support yet another format that may be used by some readers.</p>\n\n<p>Furthermore, on top of what I previously mentioned about the popularity of JSON compared to XML, JSON files are easier to read, write, and also when it comes to developing an application that will have to parse a JSON. In most programming languages, it’s just a matter of a few lines of code. As a result, having a JSON-formatted feed will allow me to implement more interesting stuff in the future based on this feed.</p>\n\n<p>Recently, I have been exploring the potential of Kotlin Native. So far, my main focus was on the fundamentals and the whole process has been recorded in <a href=\"https://diamantidis.github.io/tags#KMP\">a series of posts</a>. And now, time has come to try it out on a more real-world use case that will help be to get better insights on the benefits and the shortcomings of Kotlin Native.</p>\n\n<p>After a lot of consideration, I ended up choosing to build a feed reader for this site. Implementing such a project will give me the opportunity to use a shared library for features like networking, data de-serialization, storing user preferences and much more yet to be found.</p>\n\n<p>To be honest, the existing Atom feed could also have be used, but the lack of options for parsing an XML from a Kotlin Native library and the fact that <a href=\"https://github.com/Kotlin/kotlinx.serialization\">KotlinX serialization</a> makes it a breeze to de-serialize a JSON string, make it a no-brainer for me!</p>\n\n<p>So, that’s more or less my thought process and how I decided to add a JSON Feed on this blog, and now, it’s time to move on to the actual implementation!</p>\n\n<h2 id=\"implementation\">Implementation</h2>\n\n<p>First thing first, let’s take a look at <a href=\"https://jsonfeed.org/version/1\">the specifications of the JSON Feed</a>.\nBased on that, the implementation of JSON feed for a Jekyll site is fairly simple. It just requires adding a file named <code class=\"language-plaintext highlighter-rouge\">feed.json</code> on the root folder of your project with the following content:</p>\n\n<figure class=\"highlight\"><pre><code class=\"language-ruby\" data-lang=\"ruby\"><span class=\"o\">---</span>\n<span class=\"ss\">layout: </span><span class=\"n\">null</span>\n<span class=\"ss\">permalink: </span><span class=\"n\">feed</span><span class=\"p\">.</span><span class=\"nf\">json</span>\n<span class=\"o\">---</span>\n\n<span class=\"p\">{</span>\n    <span class=\"s2\">\"version\"</span><span class=\"p\">:</span> <span class=\"s2\">\"https://jsonfeed.org/version/1\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"title\"</span><span class=\"p\">:</span> <span class=\"s2\">\"{{ site.title }}\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"home_page_url\"</span><span class=\"p\">:</span> <span class=\"s2\">\"{{ site.url }}\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"feed_url\"</span><span class=\"p\">:</span> <span class=\"s2\">\"{{ site.url }}/feed.json\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"description\"</span><span class=\"p\">:</span> <span class=\"s2\">\"{{ site.description }}\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"icon\"</span><span class=\"p\">:</span> <span class=\"s2\">\"{{ site.url }}{{ site.logo }}\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"favicon\"</span><span class=\"p\">:</span> <span class=\"s2\">\"{{ site.url }}/favicon.ico\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"expired\"</span><span class=\"p\">:</span> <span class=\"kp\">false</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"author\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"{{ site.author.name }}\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"url\"</span><span class=\"p\">:</span> <span class=\"s2\">\"{{ site.url }}\"</span>\n    <span class=\"p\">},</span>\n    <span class=\"s2\">\"items\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span><span class=\"sx\">% for </span><span class=\"n\">post</span> <span class=\"k\">in</span> <span class=\"n\">site</span><span class=\"p\">.</span><span class=\"nf\">posts</span> <span class=\"sx\">%}\n        {\n            \"id\": \"{{ post.url | absolute_url | sha1 }</span><span class=\"p\">}</span><span class=\"s2\">\",\n            \"</span><span class=\"n\">url</span><span class=\"s2\">\": \"</span><span class=\"p\">{{</span> <span class=\"n\">site</span><span class=\"p\">.</span><span class=\"nf\">url</span> <span class=\"p\">}}{{</span> <span class=\"n\">post</span><span class=\"p\">.</span><span class=\"nf\">url</span> <span class=\"p\">}}</span><span class=\"s2\">\",\n            \"</span><span class=\"n\">title</span><span class=\"s2\">\": {{ post.title | jsonify }},\n            \"</span><span class=\"n\">date_published</span><span class=\"s2\">\": \"</span><span class=\"p\">{{</span> <span class=\"n\">post</span><span class=\"p\">.</span><span class=\"nf\">date</span> <span class=\"o\">|</span> <span class=\"n\">date_to_xmlschema</span> <span class=\"p\">}}</span><span class=\"s2\">\",\n            {% if post.date-updated %}\n            \"</span><span class=\"n\">date_modified</span><span class=\"s2\">\": \"</span><span class=\"p\">{{</span> <span class=\"n\">post</span><span class=\"p\">.</span><span class=\"nf\">date</span><span class=\"o\">-</span><span class=\"n\">updated</span> <span class=\"o\">|</span> <span class=\"n\">date_to_xmlschema</span> <span class=\"p\">}}</span><span class=\"s2\">\",\n            {% else %}\n            \"</span><span class=\"n\">date_modified</span><span class=\"s2\">\": \"</span><span class=\"p\">{{</span> <span class=\"n\">post</span><span class=\"p\">.</span><span class=\"nf\">date</span> <span class=\"o\">|</span> <span class=\"n\">date_to_xmlschema</span> <span class=\"p\">}}</span><span class=\"s2\">\",\n            {% endif %}\n            \"</span><span class=\"n\">author</span><span class=\"s2\">\": {\n                \"</span><span class=\"nb\">name</span><span class=\"s2\">\": \"</span><span class=\"p\">{{</span> <span class=\"n\">site</span><span class=\"p\">.</span><span class=\"nf\">author</span><span class=\"p\">.</span><span class=\"nf\">name</span> <span class=\"p\">}}</span><span class=\"s2\">\",\n                \"</span><span class=\"n\">url</span><span class=\"s2\">\": \"</span><span class=\"p\">{{</span> <span class=\"n\">site</span><span class=\"p\">.</span><span class=\"nf\">url</span> <span class=\"p\">}}</span><span class=\"s2\">\"\n            },\n            \"</span><span class=\"n\">summary</span><span class=\"s2\">\": {{ post.excerpt | jsonify }},\n            \"</span><span class=\"n\">content_html</span><span class=\"s2\">\": {{ post.content | jsonify }},\n            \"</span><span class=\"n\">tags</span><span class=\"s2\">\": {{ post.tags | jsonify }},\n            \"</span><span class=\"n\">image</span><span class=\"s2\">\": \"</span><span class=\"p\">{{</span> <span class=\"n\">post</span><span class=\"p\">.</span><span class=\"nf\">image</span> <span class=\"o\">|</span> <span class=\"n\">absolute_url</span> <span class=\"p\">}}</span><span class=\"s2\">\"\n        }{% if forloop.last == false %},{% endif %}\n        {% endfor %}\n    ]\n}</span></code></pre></figure>\n\n<p>In the snippet above, we make use of Jekyll’s global variable <code class=\"language-plaintext highlighter-rouge\">site</code> to retrieve site-wide information and configuration. To render the posts, we iterate over the posts that we get from the <code class=\"language-plaintext highlighter-rouge\">site</code> variable and apply some <a href=\"https://jekyllrb.com/docs/liquid/filters/\">Liquid filters</a> to format the content.</p>\n\n<p>And, that’s all!</p>\n\n<p>If you try to run <code class=\"language-plaintext highlighter-rouge\">bundle exec jekyll build</code> and navigate to the <code class=\"language-plaintext highlighter-rouge\">_site</code> directory, you will be able to find a new file named <code class=\"language-plaintext highlighter-rouge\">feed.json</code> that will contain a JSON-formatted feed, similar to the <a href=\"https://diamantidis.github.io/feed.json\">one created for this site</a>.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>To sum up, in this post we have seen how easy it is to add support for JSON feed on a Jekyll site.</p>\n\n<p>Now, all you have to do is to find a feed reader app and use either the <a href=\"https://diamantidis.github.io/feed.xml\">Atom</a> or the <a href=\"https://diamantidis.github.io/feed.json\">JSON</a> feed to get notified when some new post is published! :smile:</p>\n\n<p>In the meantime, I will be able to focus on to the actual implementation of my feed reader using Kotlin Native!</p>\n\n<p>Thanks for reading, I hope that you found this post useful and should you have any suggestions on any other questions or comments, just let me know on <a href=\"https://twitter.com/diamantidis_io\">Twitter</a> or by <a href=\"mailto:diamantidis@outlook.com\">email</a>!</p>\n",
            "tags": ["Jekyll","JSON feed"],
            "image": "https://diamantidis.github.io/assets/socialIcon.png"
        },
        
        {
            "id": "https://diamantidis.github.io/2019/09/19/kotlin-2-native-or-how-kotlin-concepts-are-mapped-to-apple-framework",
            "url": "https://diamantidis.github.io/2019/09/19/kotlin-2-native-or-how-kotlin-concepts-are-mapped-to-apple-framework",
            "title": "From Kotlin to Native: Or how Kotlin concepts are mapped to the Apple framework",
            "date_published": "2019-09-19T04:00:00+00:00",
            
            "date_modified": "2019-09-19T04:00:00+00:00",
            
            "author": {
                "name": "Ioannis Diamantidis",
                "url": "https://diamantidis.github.io"
            },
            "summary": "<p>TL;DR This post is about how some specific Kotlin features are compiled to Objective-C and how they can be used in a Swift project when using Kotlin Native to build an Apple framework.</p>\n\n",
            "content_html": "<p>TL;DR This post is about how some specific Kotlin features are compiled to Objective-C and how they can be used in a Swift project when using Kotlin Native to build an Apple framework.</p>\n\n<p>Recently, I have started exploring and experimenting with Kotlin Native and, till now, my main focus was on activities related with the preparation of a project. As part of this, I managed to write a few posts about activities like <a href=\"/2019/08/04/setup-kotlin-multiplatform-project\">the project setup</a>, <a href=\"/2019/08/25/kotlin-multiplatform-project-unit-tests-for-ios-and-android\">unit tests</a>, <a href=\"/2019/09/01/kotlin-multiplatform-project-code-styling-for-ios-and-android\">code quality tools</a> and <a href=\"/2019/09/08/continuous-integration-for-kotlin-native-projects-with-gitlab-ci\">continuous integration</a>.</p>\n\n<p>Now, it’s time to dig deeper and investigate on how things are working under the hood. So, in this post I will focus on exploring how specific Kotlin concepts like functions, enumerations, sealed classes, generics and others are mapped to Objective-C when building the Apple framework and how they can be used in a Swift project that uses this framework.</p>\n\n<h1 id=\"project\">Project</h1>\n\n<p>Before we start, it is worth pointing out that all the code used in this post can be found on a <a href=\"https://github.com/diamantidis/KNPlayground\">repo hosted on GitHub</a>. It’s a Kotlin Native project with the bare minimum setup alongside an iOS project that embeds the generated Apple framework, and it has the following structure:</p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>.\n├── build\n│   ├── ..\n│   └── ..\n├── build.gradle.kts\n├── gradle\n│   └── ...\n├── gradlew\n├── gradlew.bat\n├── iOSPlayground\n│   ├── iOSPlayground\n│   │   ├── AppDelegate.swift\n│   │   ├── Assets.xcassets\n│   │   │   ├── ...\n│   │   │   └── ...\n│   │   ├── Base.lproj\n│   │   │   ├── LaunchScreen.storyboard\n│   │   │   └── Main.storyboard\n│   │   ├── Info.plist\n│   │   └── ViewController.swift\n│   └── iOSPlayground.xcodeproj\n│       ├── ...\n│       └── ...\n└── src\n    ├── commonMain\n    │   └── kotlin\n    │       └── common.kt\n    └── nativeMain\n        └── kotlin\n            └── ios.kt\n</code></pre></div></div>\n\n<p>where <code class=\"language-plaintext highlighter-rouge\">src</code> directory contains the K/N module and the <code class=\"language-plaintext highlighter-rouge\">iOSPlayground</code> directory contains the iOS app, inside which there is a file named <code class=\"language-plaintext highlighter-rouge\">ViewController.swift</code>that contains all the Swift code.</p>\n\n<p>To generate the Apple framework, you have to run <code class=\"language-plaintext highlighter-rouge\">./gradlew linkNative</code> on the root folder of the project and the generated framework will be produced in the following directory:</p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>build/bin/native/debugFramework/Playground.framework\n</code></pre></div></div>\n\n<h2 id=\"playground\">Playground</h2>\n\n<h3 id=\"functions-high-level-extensions-variadic\">Functions: high-level, extensions, variadic</h3>\n\n<p>Let’s start with functions and define three of them in the <code class=\"language-plaintext highlighter-rouge\">common.kt</code> file. One will be an extension to the <code class=\"language-plaintext highlighter-rouge\">Int</code> type, one will be a high-level function and the last one will be a variadic function.</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">fun</span> <span class=\"nc\">Int</span><span class=\"p\">.</span><span class=\"nf\">squared</span><span class=\"p\">():</span> <span class=\"nc\">Int</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"k\">this</span> <span class=\"p\">*</span> <span class=\"mi\">2</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">fun</span> <span class=\"nf\">highLevelFunction</span><span class=\"p\">():</span> <span class=\"nc\">String</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"s\">\"I'am a high-level-function\"</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">fun</span> <span class=\"nf\">average</span><span class=\"p\">(</span><span class=\"k\">vararg</span> <span class=\"n\">values</span><span class=\"p\">:</span> <span class=\"nc\">Int</span><span class=\"p\">):</span> <span class=\"nc\">Double</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">values</span><span class=\"p\">.</span><span class=\"nf\">average</span><span class=\"p\">()</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Then, run <code class=\"language-plaintext highlighter-rouge\">./gradlew linkNative</code> and check the header file (<code class=\"language-plaintext highlighter-rouge\">Playground.h</code>) from the framework, which is supposed to contain something like the following snippet:</p>\n\n<div class=\"language-objc highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">__attribute__</span><span class=\"p\">((</span><span class=\"n\">objc_subclassing_restricted</span><span class=\"p\">))</span>\n<span class=\"n\">__attribute__</span><span class=\"p\">((</span><span class=\"n\">swift_name</span><span class=\"p\">(</span><span class=\"s\">\"CommonKt\"</span><span class=\"p\">)))</span>\n<span class=\"k\">@interface</span> <span class=\"nc\">PlaygroundCommonKt</span> <span class=\"p\">:</span> <span class=\"nc\">KotlinBase</span>\n<span class=\"k\">+</span> <span class=\"p\">(</span><span class=\"kt\">int32_t</span><span class=\"p\">)</span><span class=\"nf\">squared</span><span class=\"p\">:(</span><span class=\"kt\">int32_t</span><span class=\"p\">)</span><span class=\"nv\">receiver</span> <span class=\"n\">__attribute__</span><span class=\"p\">((</span><span class=\"n\">swift_name</span><span class=\"p\">(</span><span class=\"s\">\"squared(_:)\"</span><span class=\"p\">)));</span>\n<span class=\"k\">+</span> <span class=\"p\">(</span><span class=\"n\">NSString</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">highLevelFunction</span> <span class=\"nf\">__attribute__</span><span class=\"p\">((</span><span class=\"n\">swift_name</span><span class=\"p\">(</span><span class=\"s\">\"highLevelFunction()\"</span><span class=\"p\">)));</span>\n<span class=\"k\">+</span> <span class=\"p\">(</span><span class=\"kt\">double</span><span class=\"p\">)</span><span class=\"nf\">averageValues</span><span class=\"p\">:(</span><span class=\"n\">PlaygroundKotlinIntArray</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"nv\">values</span> <span class=\"n\">__attribute__</span><span class=\"p\">((</span><span class=\"n\">swift_name</span><span class=\"p\">(</span><span class=\"s\">\"average(values:)\"</span><span class=\"p\">)));</span>\n<span class=\"k\">@end</span><span class=\"p\">;</span>\n</code></pre></div></div>\n<p>Based on the content of this file, we can figure out how to use these functions in a Swift project. For example, we have to use the <code class=\"language-plaintext highlighter-rouge\">CommonKt.</code> before the functions and the variadic function well… is no longer a variadic function but rather expect a single parameter of type <code class=\"language-plaintext highlighter-rouge\">KotlinIntArray</code>. An example of using these functions on a Swift project is the following snippet:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// MARK: - Functions</span>\n\n<span class=\"k\">let</span> <span class=\"nv\">squared</span> <span class=\"o\">=</span> <span class=\"kt\">CommonKt</span><span class=\"o\">.</span><span class=\"nf\">squared</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"s\">\"Square of 2 equals </span><span class=\"se\">\\(</span><span class=\"n\">squared</span><span class=\"se\">)</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n<span class=\"c1\">/// Output: Square of 2 equals 4</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"kt\">CommonKt</span><span class=\"o\">.</span><span class=\"nf\">highLevelFunction</span><span class=\"p\">())</span>\n<span class=\"c1\">/// Output: I'am a high-level-function</span>\n\n<span class=\"k\">let</span> <span class=\"nv\">array</span> <span class=\"o\">=</span> <span class=\"kt\">KotlinIntArray</span><span class=\"p\">(</span><span class=\"nv\">size</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"n\">array</span><span class=\"o\">.</span><span class=\"nf\">set</span><span class=\"p\">(</span><span class=\"nv\">index</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nv\">value</span><span class=\"p\">:</span> <span class=\"mi\">12</span><span class=\"p\">)</span>\n<span class=\"n\">array</span><span class=\"o\">.</span><span class=\"nf\">set</span><span class=\"p\">(</span><span class=\"nv\">index</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nv\">value</span><span class=\"p\">:</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"n\">array</span><span class=\"o\">.</span><span class=\"nf\">set</span><span class=\"p\">(</span><span class=\"nv\">index</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"nv\">value</span><span class=\"p\">:</span> <span class=\"mi\">11</span><span class=\"p\">)</span>\n<span class=\"k\">let</span> <span class=\"nv\">average</span> <span class=\"o\">=</span> <span class=\"kt\">CommonKt</span><span class=\"o\">.</span><span class=\"nf\">average</span><span class=\"p\">(</span><span class=\"nv\">values</span><span class=\"p\">:</span> <span class=\"n\">array</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"s\">\"The average of 12, 10 and 11 is: </span><span class=\"se\">\\(</span><span class=\"n\">average</span><span class=\"se\">)</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n<span class=\"c1\">/// Output: \"The average of 12, 10 and 11 is: 11.0</span>\n</code></pre></div></div>\n\n<h3 id=\"enumerations\">Enumerations</h3>\n\n<p>Let’s continue to Kotlin’s enum classes. For this example, I will make use of an enum with programming languages which will also have a single parameter, the year of the first appearance of each language, like the following snippet:</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">enum</span> <span class=\"kd\">class</span> <span class=\"nc\">Languages</span><span class=\"p\">(</span><span class=\"kd\">val</span> <span class=\"py\">sinceYear</span><span class=\"p\">:</span> <span class=\"nc\">String</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nc\">OBJC</span><span class=\"p\">(</span><span class=\"s\">\"1984\"</span><span class=\"p\">),</span>\n    <span class=\"nc\">SWIFT</span><span class=\"p\">(</span><span class=\"s\">\"2014\"</span><span class=\"p\">),</span>\n    <span class=\"nc\">KOTLIN</span><span class=\"p\">(</span><span class=\"s\">\"2011\"</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>If you compile to the native framework, you will get the following content on the header file of the framework:</p>\n\n<div class=\"language-objc highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">__attribute__</span><span class=\"p\">((</span><span class=\"n\">objc_subclassing_restricted</span><span class=\"p\">))</span>\n<span class=\"n\">__attribute__</span><span class=\"p\">((</span><span class=\"n\">swift_name</span><span class=\"p\">(</span><span class=\"s\">\"Languages\"</span><span class=\"p\">)))</span>\n<span class=\"k\">@interface</span> <span class=\"nc\">PlaygroundLanguages</span> <span class=\"p\">:</span> <span class=\"nc\">PlaygroundKotlinEnum</span><span class=\"o\">&lt;</span><span class=\"n\">PlaygroundLanguages</span> <span class=\"o\">*&gt;</span>\n<span class=\"k\">+</span> <span class=\"p\">(</span><span class=\"n\">instancetype</span><span class=\"p\">)</span><span class=\"n\">alloc</span> <span class=\"nf\">__attribute__</span><span class=\"p\">((</span><span class=\"n\">unavailable</span><span class=\"p\">));</span>\n<span class=\"k\">+</span> <span class=\"p\">(</span><span class=\"n\">instancetype</span><span class=\"p\">)</span><span class=\"nf\">allocWithZone</span><span class=\"p\">:(</span><span class=\"k\">struct</span> <span class=\"n\">_NSZone</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"nv\">zone</span> <span class=\"n\">__attribute__</span><span class=\"p\">((</span><span class=\"n\">unavailable</span><span class=\"p\">));</span>\n<span class=\"k\">@property</span> <span class=\"p\">(</span><span class=\"n\">class</span><span class=\"p\">,</span> <span class=\"n\">readonly</span><span class=\"p\">)</span> <span class=\"n\">PlaygroundLanguages</span> <span class=\"o\">*</span><span class=\"n\">objc</span> <span class=\"nf\">__attribute__</span><span class=\"p\">((</span><span class=\"n\">swift_name</span><span class=\"p\">(</span><span class=\"s\">\"objc\"</span><span class=\"p\">)));</span>\n<span class=\"k\">@property</span> <span class=\"p\">(</span><span class=\"n\">class</span><span class=\"p\">,</span> <span class=\"n\">readonly</span><span class=\"p\">)</span> <span class=\"n\">PlaygroundLanguages</span> <span class=\"o\">*</span><span class=\"n\">swift</span> <span class=\"nf\">__attribute__</span><span class=\"p\">((</span><span class=\"n\">swift_name</span><span class=\"p\">(</span><span class=\"s\">\"swift\"</span><span class=\"p\">)));</span>\n<span class=\"k\">@property</span> <span class=\"p\">(</span><span class=\"n\">class</span><span class=\"p\">,</span> <span class=\"n\">readonly</span><span class=\"p\">)</span> <span class=\"n\">PlaygroundLanguages</span> <span class=\"o\">*</span><span class=\"n\">kotlin</span> <span class=\"nf\">__attribute__</span><span class=\"p\">((</span><span class=\"n\">swift_name</span><span class=\"p\">(</span><span class=\"s\">\"kotlin\"</span><span class=\"p\">)));</span>\n<span class=\"k\">-</span> <span class=\"p\">(</span><span class=\"n\">instancetype</span><span class=\"p\">)</span><span class=\"nf\">initWithName</span><span class=\"p\">:(</span><span class=\"n\">NSString</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"nv\">name</span> <span class=\"nf\">ordinal</span><span class=\"p\">:(</span><span class=\"kt\">int32_t</span><span class=\"p\">)</span><span class=\"nv\">ordinal</span> <span class=\"n\">__attribute__</span><span class=\"p\">((</span><span class=\"n\">swift_name</span><span class=\"p\">(</span><span class=\"s\">\"init(name:ordinal:)\"</span><span class=\"p\">)))</span> <span class=\"n\">__attribute__</span><span class=\"p\">((</span><span class=\"n\">objc_designated_initializer</span><span class=\"p\">))</span> <span class=\"n\">__attribute__</span><span class=\"p\">((</span><span class=\"n\">unavailable</span><span class=\"p\">));</span>\n<span class=\"k\">-</span> <span class=\"p\">(</span><span class=\"kt\">int32_t</span><span class=\"p\">)</span><span class=\"nf\">compareToOther</span><span class=\"p\">:(</span><span class=\"n\">PlaygroundLanguages</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"nv\">other</span> <span class=\"n\">__attribute__</span><span class=\"p\">((</span><span class=\"n\">swift_name</span><span class=\"p\">(</span><span class=\"s\">\"compareTo(other:)\"</span><span class=\"p\">)));</span>\n<span class=\"k\">@property</span> <span class=\"p\">(</span><span class=\"n\">readonly</span><span class=\"p\">)</span> <span class=\"n\">NSString</span> <span class=\"o\">*</span><span class=\"n\">sinceYear</span> <span class=\"nf\">__attribute__</span><span class=\"p\">((</span><span class=\"n\">swift_name</span><span class=\"p\">(</span><span class=\"s\">\"sinceYear\"</span><span class=\"p\">)));</span>\n<span class=\"k\">@end</span><span class=\"p\">;</span>\n</code></pre></div></div>\n<p>From the ObjC header, it’s obvious that the <code class=\"language-plaintext highlighter-rouge\">enum</code> is not actually an <code class=\"language-plaintext highlighter-rouge\">enum</code> but a class and each case is a class parameter.</p>\n\n<p>Given this, an example of how we can use it in a Swift project is the following snippet</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// MARK: - Enums</span>\n\n<span class=\"k\">let</span> <span class=\"nv\">swift</span> <span class=\"o\">=</span> <span class=\"kt\">Languages</span><span class=\"o\">.</span><span class=\"n\">swift</span>\n<span class=\"k\">let</span> <span class=\"nv\">kotlin</span> <span class=\"o\">=</span> <span class=\"kt\">Languages</span><span class=\"o\">.</span><span class=\"n\">kotlin</span>\n\n<span class=\"k\">let</span> <span class=\"nv\">lang</span> <span class=\"o\">=</span> <span class=\"kt\">Languages</span><span class=\"o\">.</span><span class=\"n\">objc</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"s\">\"Swift's first appearance: </span><span class=\"se\">\\(</span><span class=\"n\">swift</span><span class=\"o\">.</span><span class=\"n\">sinceYear</span><span class=\"se\">)</span><span class=\"s\"> </span><span class=\"se\">\\n</span><span class=\"s\">Kotlin's first appearance: </span><span class=\"se\">\\(</span><span class=\"n\">kotlin</span><span class=\"o\">.</span><span class=\"n\">sinceYear</span><span class=\"se\">)</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n<span class=\"c1\">/// Output: Swift's first appearance: 2014</span>\n<span class=\"c1\">///         Kotlin's first appearance: 2011</span>\n\n<span class=\"k\">if</span> <span class=\"k\">case</span> <span class=\"kt\">Languages</span><span class=\"o\">.</span><span class=\"n\">swift</span> <span class=\"o\">=</span> <span class=\"n\">lang</span> <span class=\"p\">{</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"s\">\"Swift\"</span><span class=\"p\">)</span>\n<span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"s\">\"Not Swift\"</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n<span class=\"c1\">/// Output: Not Swift</span>\n</code></pre></div></div>\n\n<p>On the bright side, it turns out that it conforms to the <code class=\"language-plaintext highlighter-rouge\">Comparable</code> protocol thanks to the <code class=\"language-plaintext highlighter-rouge\">KotlinEnum</code> class, so we can make use of Swift’s <code class=\"language-plaintext highlighter-rouge\">switch</code> or <code class=\"language-plaintext highlighter-rouge\">if case</code> statements.</p>\n\n<h3 id=\"sealed-classes--generics\">Sealed Classes &amp; Generics</h3>\n\n<p>The next to take a look at are Sealed classes and Generics. Before we move on, is worth mentioning that Generics is a feature added with <a href=\"https://blog.jetbrains.com/kotlin/2019/06/kotlin-1-3-40-released/\">Kotlin 1.3.40</a> and it is disabled by default. In order to enable this feature, you have to first make sure that you are using a version of Kotlin greater or equal to 1.3.40 and that you add the <code class=\"language-plaintext highlighter-rouge\">freeCompilerArgs.add(\"-Xobjc-generics\")</code> on your <code class=\"language-plaintext highlighter-rouge\">build.gradle.kts</code> like in the following snippet.</p>\n\n<div class=\"language-groovy highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">iosX64</span><span class=\"o\">(</span><span class=\"s2\">\"native\"</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n    <span class=\"n\">binaries</span> <span class=\"o\">{</span>\n        <span class=\"n\">framework</span> <span class=\"o\">{</span>\n            <span class=\"n\">baseName</span> <span class=\"o\">=</span> <span class=\"s2\">\"Playground\"</span>\n            <span class=\"n\">freeCompilerArgs</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s2\">\"-Xobjc-generics\"</span><span class=\"o\">)</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>For this example, I will make use of the common scenario of a Tree that contains Nodes.</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// Sealed class &amp; generic</span>\n<span class=\"k\">sealed</span> <span class=\"kd\">class</span> <span class=\"nc\">Tree</span><span class=\"p\">&lt;</span><span class=\"nc\">T</span><span class=\"p\">&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kd\">data class</span> <span class=\"nc\">Node</span><span class=\"p\">&lt;</span><span class=\"nc\">T</span><span class=\"p\">&gt;(</span><span class=\"kd\">var</span> <span class=\"py\">value</span><span class=\"p\">:</span> <span class=\"nc\">T</span><span class=\"p\">,</span>\n                       <span class=\"kd\">var</span> <span class=\"py\">left</span><span class=\"p\">:</span> <span class=\"nc\">Tree</span><span class=\"p\">&lt;</span><span class=\"nc\">T</span><span class=\"p\">&gt;</span> <span class=\"p\">=</span> <span class=\"nc\">None</span><span class=\"p\">(),</span>\n                       <span class=\"kd\">var</span> <span class=\"py\">right</span><span class=\"p\">:</span> <span class=\"nc\">Tree</span><span class=\"p\">&lt;</span><span class=\"nc\">T</span><span class=\"p\">&gt;</span> <span class=\"p\">=</span> <span class=\"nc\">None</span><span class=\"p\">()):</span> <span class=\"nc\">Tree</span><span class=\"p\">&lt;</span><span class=\"nc\">T</span><span class=\"p\">&gt;()</span>\n    <span class=\"kd\">class</span> <span class=\"nc\">None</span><span class=\"p\">&lt;</span><span class=\"nc\">T</span><span class=\"p\">&gt;:</span> <span class=\"nc\">Tree</span><span class=\"p\">&lt;</span><span class=\"nc\">T</span><span class=\"p\">&gt;()</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>The header of the generated framework, after running <code class=\"language-plaintext highlighter-rouge\">./gradlew linkNative</code>, will be like:</p>\n\n<div class=\"language-objc highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">__attribute__</span><span class=\"p\">((</span><span class=\"n\">swift_name</span><span class=\"p\">(</span><span class=\"s\">\"Tree\"</span><span class=\"p\">)))</span>\n<span class=\"k\">@interface</span> <span class=\"nc\">PlaygroundTree</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span> <span class=\"o\">:</span> <span class=\"n\">KotlinBase</span>\n<span class=\"k\">@end</span><span class=\"p\">;</span>\n\n<span class=\"n\">__attribute__</span><span class=\"p\">((</span><span class=\"n\">objc_subclassing_restricted</span><span class=\"p\">))</span>\n<span class=\"n\">__attribute__</span><span class=\"p\">((</span><span class=\"n\">swift_name</span><span class=\"p\">(</span><span class=\"s\">\"TreeNode\"</span><span class=\"p\">)))</span>\n<span class=\"k\">@interface</span> <span class=\"nc\">PlaygroundTreeNode</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span> <span class=\"o\">:</span> <span class=\"n\">PlaygroundTree</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span>\n<span class=\"k\">-</span> <span class=\"p\">(</span><span class=\"n\">instancetype</span><span class=\"p\">)</span><span class=\"nf\">initWithValue</span><span class=\"p\">:(</span><span class=\"n\">T</span> <span class=\"n\">_Nullable</span><span class=\"p\">)</span><span class=\"nv\">value</span> <span class=\"nf\">left</span><span class=\"p\">:(</span><span class=\"n\">PlaygroundTree</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"nv\">left</span> <span class=\"nf\">right</span><span class=\"p\">:(</span><span class=\"n\">PlaygroundTree</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"nv\">right</span> <span class=\"n\">__attribute__</span><span class=\"p\">((</span><span class=\"n\">swift_name</span><span class=\"p\">(</span><span class=\"s\">\"init(value:left:right:)\"</span><span class=\"p\">)))</span> <span class=\"n\">__attribute__</span><span class=\"p\">((</span><span class=\"n\">objc_designated_initializer</span><span class=\"p\">));</span>\n<span class=\"k\">-</span> <span class=\"p\">(</span><span class=\"n\">BOOL</span><span class=\"p\">)</span><span class=\"nf\">isEqual</span><span class=\"p\">:(</span><span class=\"n\">id</span> <span class=\"n\">_Nullable</span><span class=\"p\">)</span><span class=\"nv\">other</span> <span class=\"n\">__attribute__</span><span class=\"p\">((</span><span class=\"n\">swift_name</span><span class=\"p\">(</span><span class=\"s\">\"isEqual(_:)\"</span><span class=\"p\">)));</span>\n<span class=\"k\">-</span> <span class=\"p\">(</span><span class=\"n\">NSUInteger</span><span class=\"p\">)</span><span class=\"n\">hash</span> <span class=\"nf\">__attribute__</span><span class=\"p\">((</span><span class=\"n\">swift_name</span><span class=\"p\">(</span><span class=\"s\">\"hash()\"</span><span class=\"p\">)));</span>\n<span class=\"k\">-</span> <span class=\"p\">(</span><span class=\"n\">NSString</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">description</span> <span class=\"nf\">__attribute__</span><span class=\"p\">((</span><span class=\"n\">swift_name</span><span class=\"p\">(</span><span class=\"s\">\"description()\"</span><span class=\"p\">)));</span>\n<span class=\"k\">-</span> <span class=\"p\">(</span><span class=\"n\">T</span> <span class=\"n\">_Nullable</span><span class=\"p\">)</span><span class=\"n\">component1</span> <span class=\"nf\">__attribute__</span><span class=\"p\">((</span><span class=\"n\">swift_name</span><span class=\"p\">(</span><span class=\"s\">\"component1()\"</span><span class=\"p\">)));</span>\n<span class=\"k\">-</span> <span class=\"p\">(</span><span class=\"n\">PlaygroundTree</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">component2</span> <span class=\"nf\">__attribute__</span><span class=\"p\">((</span><span class=\"n\">swift_name</span><span class=\"p\">(</span><span class=\"s\">\"component2()\"</span><span class=\"p\">)));</span>\n<span class=\"k\">-</span> <span class=\"p\">(</span><span class=\"n\">PlaygroundTree</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">component3</span> <span class=\"nf\">__attribute__</span><span class=\"p\">((</span><span class=\"n\">swift_name</span><span class=\"p\">(</span><span class=\"s\">\"component3()\"</span><span class=\"p\">)));</span>\n<span class=\"k\">-</span> <span class=\"p\">(</span><span class=\"n\">PlaygroundTreeNode</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"nf\">doCopyValue</span><span class=\"p\">:(</span><span class=\"n\">T</span> <span class=\"n\">_Nullable</span><span class=\"p\">)</span><span class=\"nv\">value</span> <span class=\"nf\">left</span><span class=\"p\">:(</span><span class=\"n\">PlaygroundTree</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"nv\">left</span> <span class=\"nf\">right</span><span class=\"p\">:(</span><span class=\"n\">PlaygroundTree</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"nv\">right</span> <span class=\"n\">__attribute__</span><span class=\"p\">((</span><span class=\"n\">swift_name</span><span class=\"p\">(</span><span class=\"s\">\"doCopy(value:left:right:)\"</span><span class=\"p\">)));</span>\n<span class=\"k\">@property</span> <span class=\"n\">T</span> <span class=\"n\">_Nullable</span> <span class=\"n\">value</span> <span class=\"nf\">__attribute__</span><span class=\"p\">((</span><span class=\"n\">swift_name</span><span class=\"p\">(</span><span class=\"s\">\"value\"</span><span class=\"p\">)));</span>\n<span class=\"k\">@property</span> <span class=\"n\">PlaygroundTree</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span> <span class=\"o\">*</span><span class=\"n\">left</span> <span class=\"nf\">__attribute__</span><span class=\"p\">((</span><span class=\"n\">swift_name</span><span class=\"p\">(</span><span class=\"s\">\"left\"</span><span class=\"p\">)));</span>\n<span class=\"k\">@property</span> <span class=\"n\">PlaygroundTree</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span> <span class=\"o\">*</span><span class=\"n\">right</span> <span class=\"nf\">__attribute__</span><span class=\"p\">((</span><span class=\"n\">swift_name</span><span class=\"p\">(</span><span class=\"s\">\"right\"</span><span class=\"p\">)));</span>\n<span class=\"k\">@end</span><span class=\"p\">;</span>\n\n<span class=\"n\">__attribute__</span><span class=\"p\">((</span><span class=\"n\">objc_subclassing_restricted</span><span class=\"p\">))</span>\n<span class=\"n\">__attribute__</span><span class=\"p\">((</span><span class=\"n\">swift_name</span><span class=\"p\">(</span><span class=\"s\">\"TreeNone\"</span><span class=\"p\">)))</span>\n<span class=\"k\">@interface</span> <span class=\"nc\">PlaygroundTreeNone</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span> <span class=\"o\">:</span> <span class=\"n\">PlaygroundTree</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span>\n<span class=\"k\">-</span> <span class=\"p\">(</span><span class=\"n\">instancetype</span><span class=\"p\">)</span><span class=\"n\">init</span> <span class=\"nf\">__attribute__</span><span class=\"p\">((</span><span class=\"n\">swift_name</span><span class=\"p\">(</span><span class=\"s\">\"init()\"</span><span class=\"p\">)))</span> <span class=\"n\">__attribute__</span><span class=\"p\">((</span><span class=\"n\">objc_designated_initializer</span><span class=\"p\">));</span>\n<span class=\"k\">+</span> <span class=\"p\">(</span><span class=\"n\">instancetype</span><span class=\"p\">)</span><span class=\"n\">new</span> <span class=\"nf\">__attribute__</span><span class=\"p\">((</span><span class=\"n\">availability</span><span class=\"p\">(</span><span class=\"n\">swift</span><span class=\"p\">,</span> <span class=\"n\">unavailable</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"o\">=</span><span class=\"s\">\"use object initializers instead\"</span><span class=\"p\">)));</span>\n<span class=\"k\">@end</span><span class=\"p\">;</span>\n</code></pre></div></div>\n\n<p>And we can use it as in the following Swift snippet:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">func</span> <span class=\"nf\">description</span><span class=\"p\">(</span><span class=\"k\">for</span> <span class=\"nv\">node</span><span class=\"p\">:</span> <span class=\"kt\">TreeNode</span><span class=\"o\">&lt;</span><span class=\"kt\">NSString</span><span class=\"o\">&gt;</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">String</span> <span class=\"p\">{</span>\n    <span class=\"k\">var</span> <span class=\"nv\">description</span> <span class=\"o\">=</span> <span class=\"s\">\"Node '</span><span class=\"se\">\\(</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"k\">as!</span> <span class=\"kt\">String</span><span class=\"se\">)</span><span class=\"s\">'\"</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">right</span> <span class=\"k\">is</span> <span class=\"kt\">TreeNone</span><span class=\"o\">&lt;</span><span class=\"kt\">NSString</span><span class=\"o\">&gt;</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">left</span> <span class=\"k\">is</span> <span class=\"kt\">TreeNone</span><span class=\"o\">&lt;</span><span class=\"kt\">NSString</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n        <span class=\"n\">description</span><span class=\"o\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"s\">\" doesn't have any child\"</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"nv\">leftChild</span> <span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">left</span> <span class=\"k\">as?</span> <span class=\"kt\">TreeNode</span><span class=\"o\">&lt;</span><span class=\"kt\">NSString</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n        <span class=\"k\">let</span> <span class=\"nv\">rightChild</span> <span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">right</span> <span class=\"k\">as?</span> <span class=\"kt\">TreeNode</span><span class=\"o\">&lt;</span><span class=\"kt\">NSString</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n\n        <span class=\"n\">description</span><span class=\"o\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"s\">\" has children '</span><span class=\"se\">\\(</span><span class=\"n\">leftChild</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"k\">as!</span> <span class=\"kt\">String</span><span class=\"se\">)</span><span class=\"s\">' and '</span><span class=\"se\">\\(</span><span class=\"n\">rightChild</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"k\">as!</span> <span class=\"kt\">String</span><span class=\"se\">)</span><span class=\"s\">'\"</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">description</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">let</span> <span class=\"nv\">leftChild</span> <span class=\"o\">=</span> <span class=\"kt\">TreeNode</span><span class=\"o\">&lt;</span><span class=\"kt\">NSString</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"nv\">value</span><span class=\"p\">:</span> <span class=\"s\">\"Left Child\"</span><span class=\"p\">,</span> <span class=\"nv\">left</span><span class=\"p\">:</span> <span class=\"kt\">TreeNone</span><span class=\"p\">(),</span> <span class=\"nv\">right</span><span class=\"p\">:</span> <span class=\"kt\">TreeNone</span><span class=\"p\">())</span>\n<span class=\"k\">let</span> <span class=\"nv\">rightChild</span> <span class=\"o\">=</span> <span class=\"kt\">TreeNode</span><span class=\"o\">&lt;</span><span class=\"kt\">NSString</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"nv\">value</span><span class=\"p\">:</span> <span class=\"s\">\"Right Child\"</span><span class=\"p\">,</span> <span class=\"nv\">left</span><span class=\"p\">:</span> <span class=\"kt\">TreeNone</span><span class=\"p\">(),</span> <span class=\"nv\">right</span><span class=\"p\">:</span> <span class=\"kt\">TreeNone</span><span class=\"p\">())</span>\n<span class=\"k\">let</span> <span class=\"nv\">parent</span> <span class=\"o\">=</span> <span class=\"kt\">TreeNode</span><span class=\"o\">&lt;</span><span class=\"kt\">NSString</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"nv\">value</span><span class=\"p\">:</span> <span class=\"s\">\"Parent\"</span><span class=\"p\">,</span> <span class=\"nv\">left</span><span class=\"p\">:</span> <span class=\"n\">leftChild</span><span class=\"p\">,</span> <span class=\"nv\">right</span><span class=\"p\">:</span> <span class=\"n\">rightChild</span><span class=\"p\">)</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">description</span><span class=\"p\">(</span><span class=\"nv\">for</span><span class=\"p\">:</span> <span class=\"n\">leftChild</span><span class=\"p\">))</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nf\">description</span><span class=\"p\">(</span><span class=\"nv\">for</span><span class=\"p\">:</span> <span class=\"n\">parent</span><span class=\"p\">))</span>\n<span class=\"c1\">/// Output: Node 'Left Child' doesn't have any child</span>\n<span class=\"c1\">///         Node 'Parent' has children 'Left Child' and 'Right Child'</span>\n</code></pre></div></div>\n\n<blockquote>\n  <p>Note that the generic type should be a class, so that’s why NSString is used instead of Swift’s String.</p>\n</blockquote>\n\n<h3 id=\"interfaces--inheritance\">Interfaces &amp; Inheritance</h3>\n\n<p>The next on the list is interfaces &amp; inheritance. Again, I will use a common example, the shapes. In the following snippet I define an interface and two implementations of it.</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// Interfaces / Inheritance</span>\n\n<span class=\"kd\">interface</span> <span class=\"nc\">Shape</span> <span class=\"p\">{</span>\n    <span class=\"k\">fun</span> <span class=\"nf\">area</span><span class=\"p\">():</span> <span class=\"nc\">Float</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">class</span> <span class=\"nc\">Square</span><span class=\"p\">(</span><span class=\"kd\">val</span> <span class=\"py\">side</span><span class=\"p\">:</span> <span class=\"nc\">Float</span><span class=\"p\">)</span> <span class=\"p\">:</span> <span class=\"nc\">Shape</span> <span class=\"p\">{</span>\n    <span class=\"k\">override</span> <span class=\"k\">fun</span> <span class=\"nf\">area</span><span class=\"p\">()</span> <span class=\"p\">=</span> <span class=\"n\">side</span><span class=\"p\">.</span><span class=\"nf\">pow</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">open</span> <span class=\"kd\">class</span> <span class=\"nc\">Rect</span><span class=\"p\">(</span><span class=\"kd\">val</span> <span class=\"py\">width</span><span class=\"p\">:</span> <span class=\"nc\">Float</span><span class=\"p\">,</span> <span class=\"kd\">val</span> <span class=\"py\">height</span><span class=\"p\">:</span> <span class=\"nc\">Float</span><span class=\"p\">)</span> <span class=\"p\">:</span> <span class=\"nc\">Shape</span> <span class=\"p\">{</span>\n    <span class=\"k\">override</span> <span class=\"k\">fun</span> <span class=\"nf\">area</span><span class=\"p\">()</span> <span class=\"p\">=</span> <span class=\"n\">width</span> <span class=\"p\">*</span> <span class=\"n\">height</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>As you may have noticed, one of these implementation classes has the <code class=\"language-plaintext highlighter-rouge\">open</code> keyword, which means that it can be subclassed. If you don’t add the <code class=\"language-plaintext highlighter-rouge\">open</code> keyword, you will not be able to create a subclass, which is obvious by the ObjC header <code class=\"language-plaintext highlighter-rouge\">objc_subclassing_restricted</code> attribute.</p>\n\n<div class=\"language-objc highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">__attribute__</span><span class=\"p\">((</span><span class=\"n\">swift_name</span><span class=\"p\">(</span><span class=\"s\">\"Shape\"</span><span class=\"p\">)))</span>\n<span class=\"k\">@protocol</span> <span class=\"nc\">PlaygroundShape</span>\n<span class=\"err\">@required</span>\n<span class=\"k\">-</span> <span class=\"p\">(</span><span class=\"kt\">float</span><span class=\"p\">)</span><span class=\"n\">area</span> <span class=\"nf\">__attribute__</span><span class=\"p\">((</span><span class=\"n\">swift_name</span><span class=\"p\">(</span><span class=\"s\">\"area()\"</span><span class=\"p\">)));</span>\n<span class=\"k\">@end</span><span class=\"p\">;</span>\n\n<span class=\"n\">__attribute__</span><span class=\"p\">((</span><span class=\"n\">objc_subclassing_restricted</span><span class=\"p\">))</span>\n<span class=\"n\">__attribute__</span><span class=\"p\">((</span><span class=\"n\">swift_name</span><span class=\"p\">(</span><span class=\"s\">\"Square\"</span><span class=\"p\">)))</span>\n<span class=\"k\">@interface</span> <span class=\"nc\">PlaygroundSquare</span> <span class=\"p\">:</span> <span class=\"nc\">KotlinBase</span> <span class=\"o\">&lt;</span><span class=\"n\">PlaygroundShape</span><span class=\"o\">&gt;</span>\n<span class=\"k\">-</span> <span class=\"p\">(</span><span class=\"n\">instancetype</span><span class=\"p\">)</span><span class=\"nf\">initWithSide</span><span class=\"p\">:(</span><span class=\"kt\">float</span><span class=\"p\">)</span><span class=\"nv\">side</span> <span class=\"n\">__attribute__</span><span class=\"p\">((</span><span class=\"n\">swift_name</span><span class=\"p\">(</span><span class=\"s\">\"init(side:)\"</span><span class=\"p\">)))</span> <span class=\"n\">__attribute__</span><span class=\"p\">((</span><span class=\"n\">objc_designated_initializer</span><span class=\"p\">));</span>\n<span class=\"k\">-</span> <span class=\"p\">(</span><span class=\"kt\">float</span><span class=\"p\">)</span><span class=\"n\">area</span> <span class=\"nf\">__attribute__</span><span class=\"p\">((</span><span class=\"n\">swift_name</span><span class=\"p\">(</span><span class=\"s\">\"area()\"</span><span class=\"p\">)));</span>\n<span class=\"k\">@property</span> <span class=\"p\">(</span><span class=\"n\">readonly</span><span class=\"p\">)</span> <span class=\"kt\">float</span> <span class=\"n\">side</span> <span class=\"nf\">__attribute__</span><span class=\"p\">((</span><span class=\"n\">swift_name</span><span class=\"p\">(</span><span class=\"s\">\"side\"</span><span class=\"p\">)));</span>\n<span class=\"k\">@end</span><span class=\"p\">;</span>\n\n<span class=\"n\">__attribute__</span><span class=\"p\">((</span><span class=\"n\">swift_name</span><span class=\"p\">(</span><span class=\"s\">\"Rect\"</span><span class=\"p\">)))</span>\n<span class=\"k\">@interface</span> <span class=\"nc\">PlaygroundRect</span> <span class=\"p\">:</span> <span class=\"nc\">KotlinBase</span> <span class=\"o\">&lt;</span><span class=\"n\">PlaygroundShape</span><span class=\"o\">&gt;</span>\n<span class=\"k\">-</span> <span class=\"p\">(</span><span class=\"n\">instancetype</span><span class=\"p\">)</span><span class=\"nf\">initWithWidth</span><span class=\"p\">:(</span><span class=\"kt\">float</span><span class=\"p\">)</span><span class=\"nv\">width</span> <span class=\"nf\">height</span><span class=\"p\">:(</span><span class=\"kt\">float</span><span class=\"p\">)</span><span class=\"nv\">height</span> <span class=\"n\">__attribute__</span><span class=\"p\">((</span><span class=\"n\">swift_name</span><span class=\"p\">(</span><span class=\"s\">\"init(width:height:)\"</span><span class=\"p\">)))</span> <span class=\"n\">__attribute__</span><span class=\"p\">((</span><span class=\"n\">objc_designated_initializer</span><span class=\"p\">));</span>\n<span class=\"k\">-</span> <span class=\"p\">(</span><span class=\"kt\">float</span><span class=\"p\">)</span><span class=\"n\">area</span> <span class=\"nf\">__attribute__</span><span class=\"p\">((</span><span class=\"n\">swift_name</span><span class=\"p\">(</span><span class=\"s\">\"area()\"</span><span class=\"p\">)));</span>\n<span class=\"k\">@property</span> <span class=\"p\">(</span><span class=\"n\">readonly</span><span class=\"p\">)</span> <span class=\"kt\">float</span> <span class=\"n\">width</span> <span class=\"nf\">__attribute__</span><span class=\"p\">((</span><span class=\"n\">swift_name</span><span class=\"p\">(</span><span class=\"s\">\"width\"</span><span class=\"p\">)));</span>\n<span class=\"k\">@property</span> <span class=\"p\">(</span><span class=\"n\">readonly</span><span class=\"p\">)</span> <span class=\"kt\">float</span> <span class=\"n\">height</span> <span class=\"nf\">__attribute__</span><span class=\"p\">((</span><span class=\"n\">swift_name</span><span class=\"p\">(</span><span class=\"s\">\"height\"</span><span class=\"p\">)));</span>\n<span class=\"k\">@end</span><span class=\"p\">;</span>\n</code></pre></div></div>\n\n<p>The Swift implementation is straight-forward and an example of this could be the following snippet.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// MARK: - Interfaces &amp; Inheritance</span>\n\n<span class=\"kd\">class</span> <span class=\"kt\">Circle</span><span class=\"p\">:</span> <span class=\"kt\">Shape</span> <span class=\"p\">{</span>\n    <span class=\"kd\">func</span> <span class=\"nf\">area</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Float</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"kt\">Float</span><span class=\"o\">.</span><span class=\"n\">pi</span> <span class=\"o\">*</span> <span class=\"n\">radius</span> <span class=\"o\">*</span> <span class=\"n\">radius</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">let</span> <span class=\"nv\">radius</span><span class=\"p\">:</span> <span class=\"kt\">Float</span>\n\n    <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"nv\">radius</span><span class=\"p\">:</span> <span class=\"kt\">Float</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">radius</span> <span class=\"o\">=</span> <span class=\"n\">radius</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">class</span> <span class=\"kt\">DummyRect</span><span class=\"p\">:</span> <span class=\"kt\">Rect</span> <span class=\"p\">{</span>\n    <span class=\"k\">override</span> <span class=\"kd\">func</span> <span class=\"nf\">area</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Float</span> <span class=\"p\">{</span>\n        <span class=\"k\">return</span> <span class=\"n\">width</span> <span class=\"o\">*</span> <span class=\"n\">height</span> <span class=\"o\">*</span> <span class=\"mf\">1.3</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">let</span> <span class=\"nv\">square</span> <span class=\"o\">=</span> <span class=\"kt\">Square</span><span class=\"p\">(</span><span class=\"nv\">side</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"k\">let</span> <span class=\"nv\">rect</span> <span class=\"o\">=</span> <span class=\"kt\">Rect</span><span class=\"p\">(</span><span class=\"nv\">width</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"nv\">height</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"k\">let</span> <span class=\"nv\">dummyRect</span> <span class=\"o\">=</span> <span class=\"kt\">DummyRect</span><span class=\"p\">(</span><span class=\"nv\">width</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"nv\">height</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"k\">let</span> <span class=\"nv\">shapes</span><span class=\"p\">:</span> <span class=\"kt\">Array</span><span class=\"o\">&lt;</span><span class=\"kt\">Shape</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">square</span><span class=\"p\">,</span> <span class=\"n\">rect</span><span class=\"p\">,</span> <span class=\"n\">dummyRect</span><span class=\"p\">]</span>\n\n<span class=\"n\">shapes</span><span class=\"o\">.</span><span class=\"n\">forEach</span> <span class=\"p\">{</span> <span class=\"n\">shape</span> <span class=\"k\">in</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"s\">\"Shape area is </span><span class=\"se\">\\(</span><span class=\"n\">shape</span><span class=\"o\">.</span><span class=\"nf\">area</span><span class=\"p\">()</span><span class=\"se\">)</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n    <span class=\"c1\">/// Outputs: Shape area is 16.0</span>\n    <span class=\"c1\">///          Shape area is 4.0</span>\n    <span class=\"c1\">///          Shape area is 5.2</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>The only thing to notice is that we have to define the type of the Array since, by default, an array of type <code class=\"language-plaintext highlighter-rouge\">KotlinBase</code> is created.</p>\n\n<h3 id=\"expectactual-keywords-aka-platform-specific-code\">Expect/Actual keywords a.k.a Platform-Specific code</h3>\n\n<p>Often times, we have to provide some platform specific code. For example, we may want to get the device’s platform and version. \nTo cover for these scenarios we use the <code class=\"language-plaintext highlighter-rouge\">expect</code>/<code class=\"language-plaintext highlighter-rouge\">actual</code> keywords. In the <code class=\"language-plaintext highlighter-rouge\">common.kt</code>, we can declare a class, a function or a variable with the <code class=\"language-plaintext highlighter-rouge\">expect</code> keyword and keep the body empty, like we would do for an interface. An example of such function is the following snippet.</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// Expect</span>\n<span class=\"n\">expect</span> <span class=\"k\">fun</span> <span class=\"nf\">platformName</span><span class=\"p\">():</span> <span class=\"nc\">String</span>\n</code></pre></div></div>\n\n<p>Now, in the <code class=\"language-plaintext highlighter-rouge\">ios.kt</code> file, we make use of the <code class=\"language-plaintext highlighter-rouge\">actual</code> keyword to provide the implementation of the class, function or variable defined with the <code class=\"language-plaintext highlighter-rouge\">expect</code> keyword</p>\n\n<p>For this example, we will add the following snippet on the <code class=\"language-plaintext highlighter-rouge\">ios.kt</code> file:</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">import</span> <span class=\"nn\">platform.UIKit.UIDevice</span>\n\n<span class=\"n\">actual</span> <span class=\"k\">fun</span> <span class=\"nf\">platformName</span><span class=\"p\">():</span> <span class=\"nc\">String</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"nc\">UIDevice</span><span class=\"p\">.</span><span class=\"n\">currentDevice</span><span class=\"p\">.</span><span class=\"nf\">systemName</span><span class=\"p\">()</span> <span class=\"p\">+</span>\n            <span class=\"s\">\" \"</span> <span class=\"p\">+</span>\n            <span class=\"nc\">UIDevice</span><span class=\"p\">.</span><span class=\"n\">currentDevice</span><span class=\"p\">.</span><span class=\"n\">systemVersion</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>After compiling, the header of the generated framework will look like this:</p>\n\n<div class=\"language-objc highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">__attribute__</span><span class=\"p\">((</span><span class=\"n\">objc_subclassing_restricted</span><span class=\"p\">))</span>\n<span class=\"n\">__attribute__</span><span class=\"p\">((</span><span class=\"n\">swift_name</span><span class=\"p\">(</span><span class=\"s\">\"IosKt\"</span><span class=\"p\">)))</span>\n<span class=\"k\">@interface</span> <span class=\"nc\">PlaygroundIosKt</span> <span class=\"p\">:</span> <span class=\"nc\">KotlinBase</span>\n<span class=\"k\">+</span> <span class=\"p\">(</span><span class=\"n\">NSString</span> <span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">platformName</span> <span class=\"nf\">__attribute__</span><span class=\"p\">((</span><span class=\"n\">swift_name</span><span class=\"p\">(</span><span class=\"s\">\"platformName()\"</span><span class=\"p\">)));</span>\n<span class=\"k\">@end</span><span class=\"p\">;</span>\n</code></pre></div></div>\n\n<p>And we can use it in Swift in the following way:</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// MARK: - Platform Specific Code</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"s\">\"platform is </span><span class=\"se\">\\(</span><span class=\"kt\">IosKt</span><span class=\"o\">.</span><span class=\"nf\">platformName</span><span class=\"p\">()</span><span class=\"se\">)</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n<span class=\"c1\">/// Outputs: platform is iOS 12.4</span>\n</code></pre></div></div>\n\n<p>And that’s it for this post.</p>\n\n<h2 id=\"wrap-up\">Wrap-up</h2>\n\n<p>To sum up, in this post, we have seen a few cases of how Kotlin features are compiled to Obj-C and how we can use them in a Swift project. As we saw in a few examples, some features are not compiled exactly as we would expect and their usage is not so straight-forward. Therefore, a project like this playground can be really useful in many cases.</p>\n\n<p>The smaller scope and size of this kind of projects make them suitable for experimenting; be it a new implementation or a new feature introduced on a newer Kotlin version just like I did with the <code class=\"language-plaintext highlighter-rouge\">-Xobjc-generics</code> argument that I mentioned before. And also they are a good candidate for reference purposes.</p>\n\n<p>Thanks for reading, I hope that you found this post useful and should you have any suggestions on how to enrich this playground or any other questions or comments, just let me know on <a href=\"https://twitter.com/diamantidis_io\">Twitter</a> or by <a href=\"mailto:diamantidis@outlook.com\">email</a>!</p>\n\n",
            "tags": ["Swift","Kotlin","KMP","ObjC"],
            "image": "https://diamantidis.github.io/assets/socialIcon.png"
        },
        
        {
            "id": "https://diamantidis.github.io/2019/09/08/continuous-integration-for-kotlin-native-projects-with-gitlab-ci",
            "url": "https://diamantidis.github.io/2019/09/08/continuous-integration-for-kotlin-native-projects-with-gitlab-ci",
            "title": "Continuous Integration for Kotlin Native projects with Gitlab CI",
            "date_published": "2019-09-08T12:00:00+00:00",
            
            "date_modified": "2019-09-08T12:00:00+00:00",
            
            "author": {
                "name": "Ioannis Diamantidis",
                "url": "https://diamantidis.github.io"
            },
            "summary": "<p>How many times have you started a project with the intent to follow practices such as writing unit tests and enforcing a code style, only to give up after a while?</p>\n\n",
            "content_html": "<p>How many times have you started a project with the intent to follow practices such as writing unit tests and enforcing a code style, only to give up after a while?</p>\n\n<p>Despite all the initial good will and motivation, having another task to remember and perform every time we make a code change, makes it harder and harder to stay consistent and follow these practises for a long time. The cause can vary from case to case; be it that we just forget it, laziness or reasons that led us to put these efforts aside in an attempt to increase speed and velocity.</p>\n\n<p>As with every attempt to form a habit, it is important to make is as easy as possible to commit to this habit. This applies to our scenario too; it will increase the possibility of actually following these practices if it was super easy and not our responsibility to remember to run them every single time.</p>\n\n<p>And that’s exactly what <code class=\"language-plaintext highlighter-rouge\">Continuous Integration</code> is all about; to develop pipelines of tasks that will be executed on predefined triggers (e.g. when checking in new code) and when something is failing to notify us, so that we can take the proper actions.</p>\n\n<h2 id=\"solution\">Solution</h2>\n\n<p>Long story short, in this post I will try to document the steps that I took to setup a continuous integration solution to run unit tests and coding style tools for an iOS and an Android app built with Kotlin Multiplatform Project.</p>\n\n<p>For the purposes of this post I will make use of the project created on the previous posts related to Kotlin Multiplatform Project, about <a href=\"/2019/08/04/setup-kotlin-multiplatform-project\">setting up a project</a>, <a href=\"/2019/08/17/thoughts-on-kotlin-multiplatform-project-structure\">applying some changes in the default structure</a>, <a href=\"/2019/08/25/kotlin-multiplatform-project-unit-tests-for-ios-and-android\">setting up unit tests</a> and <a href=\"/2019/09/01/kotlin-multiplatform-project-code-styling-for-ios-and-android\">setting up code styling tools</a>. This project is also available on <a href=\"https://github.com/diamantidis/KMP_base\">GitHub</a> and <a href=\"https://gitlab.com/diamantidis_io/kmp_template\">Gitlab</a>.</p>\n\n<p>Ideally what I would like to achieve is that each time we push some code on the <code class=\"language-plaintext highlighter-rouge\">androidApp</code> directory to run only the Android app related tasks, every time we push something on the <code class=\"language-plaintext highlighter-rouge\">iosApp</code> directory to run the iOS related tasks and when something is changed on the <code class=\"language-plaintext highlighter-rouge\">shared</code> directory to run all the tasks (tests and code styling on the shared library, Android and iOS)</p>\n\n<p>There are plenty of CI solutions available such as Travis CI, CircleCI and GitLab CI, but after a quick investigation I think that GitLab CI is the best available option for this kind of implementation. More specifically, the <a href=\"https://docs.gitlab.com/ee/ci/yaml/#onlychangesexceptchanges\"><code class=\"language-plaintext highlighter-rouge\">only:changes</code></a> feature makes it quite easy to implement the aforementioned logic of running specific tasks based on the directory of the change.</p>\n\n<h2 id=\"setup\">Setup</h2>\n\n<p>To start with, GitLab CI requires repos to have a file named <code class=\"language-plaintext highlighter-rouge\">.gitlab-ci.yml</code> on the root directory. This file will contain all the configuration about the jobs that you want GitLab CI to execute.\nWhen this file is added, GitLab will detect it and use a tool named <a href=\"https://docs.gitlab.com/runner/\">GitLab Runner</a> to execute these jobs.</p>\n\n<p>Thus, in order to use GitLab CI, we have to create a GitLab runner for our jobs and then define those jobs in the <code class=\"language-plaintext highlighter-rouge\">.gitlab-ci.yml</code>.</p>\n\n<p>To check about the Runners, you can go to GitLab, open the project, and choose <code class=\"language-plaintext highlighter-rouge\">Settings</code> &gt; <code class=\"language-plaintext highlighter-rouge\">CI/CD</code>. Then, expand the <code class=\"language-plaintext highlighter-rouge\">Runners</code> section.</p>\n\n<p>There are a few <a href=\"https://docs.gitlab.com/ee/user/gitlab_com/#shared-runners\"><code class=\"language-plaintext highlighter-rouge\">Shared Runners</code></a> but sadly they are not suitable for our project since none of them comes with Xcode. Other solutions for Runners, like Docker are also rejected for the same reason. So, this leads me to <code class=\"language-plaintext highlighter-rouge\">Set up a specific Runner manually</code> on my local machine.</p>\n\n<p>The process of running a GitLab Runner on MacOS is quite straight-forward and you can follow the steps described on the <a href=\"https://docs.gitlab.com/runner/install/osx.html\">documentation</a>.</p>\n\n<p>Briefly,</p>\n\n<ul>\n  <li>download the binary by executing the following command:\n    <div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo </span>curl <span class=\"nt\">--output</span> /usr/local/bin/gitlab-runner <span class=\"se\">\\</span>\nhttps://gitlab-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-runner-darwin-amd64\n</code></pre></div>    </div>\n  </li>\n  <li>change the permissions to execute it\n    <div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">sudo chmod</span> +x /usr/local/bin/gitlab-runner\n</code></pre></div>    </div>\n  </li>\n  <li>register the runner (where $URL and $TOKEN are those in the <code class=\"language-plaintext highlighter-rouge\">Set up a specific Runner manually</code> section on GitLab’s CI/CD page:\n    <div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>gitlab-runner register <span class=\"nt\">-n</span> <span class=\"se\">\\</span>\n<span class=\"nt\">--name</span> <span class=\"s2\">\"kmp-runner\"</span> <span class=\"se\">\\</span>\n<span class=\"nt\">--url</span> <span class=\"nv\">$URL</span> <span class=\"se\">\\</span>\n<span class=\"nt\">--registration-token</span> <span class=\"nv\">$TOKEN</span> <span class=\"se\">\\</span>\n<span class=\"nt\">--executor</span> <span class=\"s2\">\"shell\"</span> <span class=\"se\">\\</span>\n<span class=\"nt\">--tag-list</span> <span class=\"s2\">\"ios,android, kmp\"</span> \n</code></pre></div>    </div>\n  </li>\n  <li>install the runner\n    <div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>gitlab-runner <span class=\"nb\">install</span>\n</code></pre></div>    </div>\n  </li>\n  <li>and finally, start the runner:\n    <div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>gitlab-runner start\n</code></pre></div>    </div>\n  </li>\n</ul>\n\n<p>If you refresh the CI/CD page on Gitlab, you will be able to see the new runner under the section <code class=\"language-plaintext highlighter-rouge\">Runners activated for this project</code>.</p>\n\n<h2 id=\"implementation\">Implementation</h2>\n\n<p>After this, let’s create create a file named <code class=\"language-plaintext highlighter-rouge\">.gitlab-ci.yml</code> on the root directory of our project and define the jobs that we want to run.</p>\n\n<p>First, we have to install bundler and then use <code class=\"language-plaintext highlighter-rouge\">bundle install</code> to install <code class=\"language-plaintext highlighter-rouge\">fastlane</code> and <code class=\"language-plaintext highlighter-rouge\">cocoapods</code>. Furthermore, we have to setup a few environmental variables for fastlane. This step is supposed to run regardless of the directory of the change.</p>\n\n<p><img src=\"https://diamantidis.github.io/assets/kmp/setup_stage.png\" alt=\"GitLab CI setup stage screenshot\" /></p>\n\n<blockquote>\n  <p>Here you can find the <a href=\"https://gitlab.com/diamantidis_io/kmp_template/commit/f60d674c8d3572849526dbf3f3ceb686612743a5\">commit on GitLab</a></p>\n</blockquote>\n\n<p>Then, it’s time to install the required dependencies. Currently we only have to run <code class=\"language-plaintext highlighter-rouge\">pod install</code> on the iOS flow, so we want this step to be executed after the initial setup is finished and only if there is some change either on the iOS app or the shared library. Since the pods are going to be used on the next steps of the pipeline, we have to make sure that the directory <code class=\"language-plaintext highlighter-rouge\">iosApp/Pods</code> will be cached.</p>\n\n<p><img src=\"https://diamantidis.github.io/assets/kmp/dependencies_stage.png\" alt=\"GitLab CI dependencies stage screenshot\" /></p>\n<blockquote>\n  <p>Here you can find the <a href=\"https://gitlab.com/diamantidis_io/kmp_template/commit/845efe0bb3c98b7a4c17126c686cadc7d3058ebe\">commit on GitLab</a></p>\n</blockquote>\n\n<p>After that, we can proceed to the tasks related with code quality. For each flow, be it the iOS app, the Android app or the shared library, we have setup, on a <a href=\"/2019/09/01/kotlin-multiplatform-project-code-styling-for-ios-and-android\">previous post</a>, some commands to lint and verify that our code conforms to some code style rules. Thus, we will add a new stage named <code class=\"language-plaintext highlighter-rouge\">Quality</code> and three new jobs, one for iOS, one for Android and one for the shared.</p>\n\n<p>The iOS one should start if the <code class=\"language-plaintext highlighter-rouge\">ios:dependency</code> job is finished and it should be executed only if there is some change on the <code class=\"language-plaintext highlighter-rouge\">iosApp</code> or <code class=\"language-plaintext highlighter-rouge\">shared</code> directory. \nSimilarly, the Android lint job should run only if there is a change on the <code class=\"language-plaintext highlighter-rouge\">androidApp</code> or the <code class=\"language-plaintext highlighter-rouge\">shared</code> directory and the shared:lint job only when there is a change on the shared directory.</p>\n\n<p><img src=\"https://diamantidis.github.io/assets/kmp/code_quality_stage.png\" alt=\"GitLab CI code quality stage screenshot\" /></p>\n<blockquote>\n  <p>Here you can find the <a href=\"https://gitlab.com/diamantidis_io/kmp_template/commit/9cdef12ad6cc6aa5740830f822e5eca7e4a50abe\">commit on GitLab</a></p>\n</blockquote>\n\n<p>Lastly, we add another stage for the tests. Following the same logic, we define three jobs to run the unit tests for iOS, Android and the shared library using the commands from a <a href=\"/2019/08/25/kotlin-multiplatform-project-unit-tests-for-ios-and-android\">previous post</a> on how to run unit tests. Each of these jobs will be dependent on the respective linting job and follow the same rules for when they should be executed.</p>\n\n<p><img src=\"https://diamantidis.github.io/assets/kmp/tests_stage.png\" alt=\"GitLab CI test stage screenshot\" /></p>\n<blockquote>\n  <p>Here you can find the <a href=\"https://gitlab.com/diamantidis_io/kmp_template/commit/29edcbfe279753e2dbac2339f4406da83fe9585a\">commit on GitLab</a></p>\n</blockquote>\n\n<p>Now, if you make a change on the iOS part, only the iOS-related jobs will be triggered and the same happens with the Android. In case of a change on the shared library all the jobs will be triggered.</p>\n\n<p><img src=\"https://diamantidis.github.io/assets/kmp/ios_jobs.png\" alt=\"iOS jobs screenshot\" />\n<img src=\"https://diamantidis.github.io/assets/kmp/android_jobs.png\" alt=\"android jobs screenshot\" />\n<img src=\"https://diamantidis.github.io/assets/kmp/shared_jobs.png\" alt=\"shared jobs screenshot\" /></p>\n\n<blockquote>\n  <p>You can find the whole <code class=\"language-plaintext highlighter-rouge\">gitlab-ci.yml</code> on the <a href=\"https://gitlab.com/diamantidis_io/kmp_template/blob/master/.gitlab-ci.yml\">GitLab repo</a></p>\n</blockquote>\n\n<h2 id=\"wrap-up\">Wrap up</h2>\n\n<p>To sum up, in this article I’ve tried to record the steps on how to setup a GitLab CI pipeline that will run the code styling and unit test jobs for a Kotlin Native project that contains an iOS app, an Android app and a shared library.</p>\n\n<p>With this implementation in place, you can rest assured that GitLab will run these jobs every time a new piece of code is added to the repo, while you can focus on the implementation of new features.</p>\n\n<p>Furthermore, the addition of the CI jobs makes this <a href=\"https://gitlab.com/diamantidis_io/kmp_template\">project</a> a potential template that can be used as a base for other projects to be built on top of it.</p>\n\n<p>Of course, the current implementation can be further extended to run only on pull requests or to build the apps and upload the builds to AppCenter, TestFlight or Google Play, but this is a topic for another post!</p>\n\n<p>Thanks for reading and should you have any questions, suggestions or comments, just let me know on <a href=\"https://twitter.com/diamantidis_io\">Twitter</a> or <a href=\"mailto:diamantidis@outlook.com\">email me</a>!!</p>\n",
            "tags": ["iOS","Android","KMP","GitLab"],
            "image": "https://diamantidis.github.io/assets/socialIcon.png"
        },
        
        {
            "id": "https://diamantidis.github.io/2019/09/01/kotlin-multiplatform-project-code-styling-for-ios-and-android",
            "url": "https://diamantidis.github.io/2019/09/01/kotlin-multiplatform-project-code-styling-for-ios-and-android",
            "title": "Kotlin Multiplatform Project: Code styling for iOS and Android",
            "date_published": "2019-09-01T06:00:00+00:00",
            
            "date_modified": "2019-09-01T06:00:00+00:00",
            
            "author": {
                "name": "Ioannis Diamantidis",
                "url": "https://diamantidis.github.io"
            },
            "summary": "<p>Continuing my journey on Kotlin Multiplatform Project, this time I will explore some tools that can be used to apply code style conventions on such projects. How many times have you ended up with a bunch of unused import on an Android project or using for example <code class=\"language-plaintext highlighter-rouge\">array.count == 0</code> instead of <code class=\"language-plaintext highlighter-rouge\">array.isEmpty</code> on an iOS app?</p>\n\n",
            "content_html": "<p>Continuing my journey on Kotlin Multiplatform Project, this time I will explore some tools that can be used to apply code style conventions on such projects. How many times have you ended up with a bunch of unused import on an Android project or using for example <code class=\"language-plaintext highlighter-rouge\">array.count == 0</code> instead of <code class=\"language-plaintext highlighter-rouge\">array.isEmpty</code> on an iOS app?</p>\n\n<p>Linting is here to help you alleviate those scenarios and eventually increase readability of your code base, make it more consistent in case your are working on a team and eliminate the code smells.</p>\n\n<p>For this post, I will make use of the project created on the previous posts related to Kotlin Multiplatform Project, about <a href=\"/2019/08/04/setup-kotlin-multiplatform-project\">setting up a project</a>, <a href=\"/2019/08/17/thoughts-on-kotlin-multiplatform-project-structure\">applying some changes in the default structure</a> and <a href=\"/2019/08/25/kotlin-multiplatform-project-unit-tests-for-ios-and-android\">setting up unit tests</a>. This project is also available on <a href=\"https://github.com/diamantidis/KMP_base\">GitHub</a>.</p>\n\n<p>Since the project consists of two languages (<code class=\"language-plaintext highlighter-rouge\">Swift</code> and <code class=\"language-plaintext highlighter-rouge\">Kotlin</code>), we will have to implement different solutions for each of them. \nTools like <a href=\"https://github.com/realm/SwiftLint\">SwiftLint</a> for Swift projects and <a href=\"https://github.com/arturbosch/detekt\">detekt</a> for Kotlin projects enable us to set some rules that we would like our codebase to follow and let us know in case we break some of them.</p>\n\n<p>Without further ado, let’s move to action starting from the iOS project and setting up SwiftLint.</p>\n\n<h2 id=\"swift-code-styling\">Swift code styling</h2>\n\n<p>A while ago, I have written <a href=\"/2018/12/23/a-guide-to-swiftlint\">a post about SwiftLint</a>, so I will not go in depth, but rather focus on installing, configuring and using SwiftLint. I will put a few references on separate GitHub commits for you to follow along.</p>\n\n<p>To install SwiftLint I will use CocoaPods, so before doing so, I will have to install CocoaPods in the project. \nLet’s add the CocoaPods gem in the Gemfile and run <code class=\"language-plaintext highlighter-rouge\">bundle install</code> on the command line (<a href=\"https://github.com/diamantidis/KMP_base/commit/3e1f5fd023317e2f30336136a41b2c68a74ee0eb\">GitHub commit</a>).</p>\n\n<p>After this is done, navigate to the <code class=\"language-plaintext highlighter-rouge\">iosApp</code> directory and run <code class=\"language-plaintext highlighter-rouge\">bundle exec pod init</code> (<a href=\"https://github.com/diamantidis/KMP_base/commit/741fd20af2e79ba5ce3e584d0b18a3520bc98370\">GitHub commit</a>).</p>\n\n<p>Then, add <code class=\"language-plaintext highlighter-rouge\">pod 'SwiftLint'</code> in your <code class=\"language-plaintext highlighter-rouge\">Podfile</code> and run <code class=\"language-plaintext highlighter-rouge\">bundle exec pod install</code>(<a href=\"https://github.com/diamantidis/KMP_base/commit/8e2fc5028e64b09711a94eae85fce4e43986bf72\">GitHub commit</a>).</p>\n\n<p>After that, open the <code class=\"language-plaintext highlighter-rouge\">Fastfile</code> of the iOS project and place the following snippet after the <code class=\"language-plaintext highlighter-rouge\">tests</code> lane to add a new lane for linting.</p>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">desc</span> <span class=\"s2\">\"Run linting\"</span>\n<span class=\"n\">lane</span> <span class=\"ss\">:lint</span> <span class=\"k\">do</span>\n<span class=\"n\">swiftlint</span><span class=\"p\">(</span>\n  <span class=\"ss\">executable: </span><span class=\"s1\">'./Pods/SwiftLint/swiftlint'</span><span class=\"p\">,</span> \n  <span class=\"ss\">mode: :lint</span><span class=\"p\">,</span>\n  <span class=\"ss\">config_file: </span><span class=\"s1\">'.swiftlint.yml'</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n<span class=\"k\">end</span>\n</code></pre></div></div>\n\n<p>Create a new file named <code class=\"language-plaintext highlighter-rouge\">.swiftlint.yml</code> in the iOS project directory and add the rules based on your needs. An example can be found on my <a href=\"/2018/12/23/a-guide-to-swiftlint\">previous article about SwiftLint</a>, on my <a href=\"https://github.com/diamantidis/KMP_base/blob/master/iosApp/.swiftlint.yml\">GitHub project</a> or be simply googling <code class=\"language-plaintext highlighter-rouge\">swiftlint.yml example</code>.</p>\n\n<p>Finally, you are ready to run <code class=\"language-plaintext highlighter-rouge\">bundle exec fastlane lint</code> to check if there are any linting issues on the project.</p>\n\n<blockquote>\n  <p>Here you can find the <a href=\"https://github.com/diamantidis/KMP_base/commit/4cbc5bd284395581a6d1a99511a192650a8413ba\">GitHub commit</a> with the new lane and the<br />\n<code class=\"language-plaintext highlighter-rouge\">.swiftlint.yml</code> file.</p>\n</blockquote>\n\n<p>You can also add one more lane on the <code class=\"language-plaintext highlighter-rouge\">Fastfile</code> to run the autocorrect functionality of SwiftLint. To do so, add the following snippet on your Fastfile</p>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  <span class=\"n\">desc</span> <span class=\"s2\">\"Run lint autocorrect\"</span>\n  <span class=\"n\">lane</span> <span class=\"ss\">:lint_autocorrect</span> <span class=\"k\">do</span>\n    <span class=\"n\">swiftlint</span><span class=\"p\">(</span>\n      <span class=\"ss\">mode: :autocorrect</span><span class=\"p\">,</span>\n      <span class=\"ss\">executable: </span><span class=\"s1\">'./Pods/SwiftLint/swiftlint'</span><span class=\"p\">,</span>\n      <span class=\"ss\">config_file: </span><span class=\"s1\">'.swiftlint.yml'</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n  <span class=\"k\">end</span>\n</code></pre></div></div>\n\n<p>And you will be able to execute this lane by running the command <code class=\"language-plaintext highlighter-rouge\">bundle exec fastlane lint_autocorrect</code> on your command line (<a href=\"https://github.com/diamantidis/KMP_base/commit/deda4e81872a6c49901acaa8346baff2a8abd585\">GitHub commit</a>).</p>\n\n<blockquote>\n  <p>A practice that I follow is to add some kind of threshold so that I am not forced to fix every warning right here and now. This is available through the <code class=\"language-plaintext highlighter-rouge\">warning_threshold: 20</code> key that you can add on your <code class=\"language-plaintext highlighter-rouge\">.swiftlint.yml</code> file.</p>\n</blockquote>\n\n<p>Having utilized SwiftLint and successfully ran the commands to lint and correct any issues, with the help of fastlane, on the Swift part of the codebase, it’s time to move on to the Kotlin part of our project.</p>\n\n<h2 id=\"kotlin-code-styling\">Kotlin code styling</h2>\n\n<p>For the Kotlin part of the project, I am going to use <a href=\"https://arturbosch.github.io/detekt/index.html\">detekt</a>, which is a static analysis tool for Kotlin.</p>\n\n<p>To install <code class=\"language-plaintext highlighter-rouge\">detekt</code> on our project, first add the following snippet on your <code class=\"language-plaintext highlighter-rouge\">build.gradle</code>:</p>\n<div class=\"language-groovy highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">plugins</span> <span class=\"o\">{</span>\n    <span class=\"n\">id</span> <span class=\"s2\">\"io.gitlab.arturbosch.detekt\"</span> <span class=\"n\">version</span> <span class=\"s2\">\"1.0.0\"</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>Then we can proceed with the configuration of <code class=\"language-plaintext highlighter-rouge\">detekt</code> and the rules. Since we may have to use some other tools on our project, let’s create a separate directory for the configuration of all these tools, named <code class=\"language-plaintext highlighter-rouge\">tools</code>. Inside this folder, create two new files, <code class=\"language-plaintext highlighter-rouge\">tools/detekt.gradle</code> and <code class=\"language-plaintext highlighter-rouge\">tools/detekt.yml</code>. The first contains the configuration for <code class=\"language-plaintext highlighter-rouge\">detekt</code>, whilst the second contains the rules that we want to apply to the project.</p>\n\n<p>Put the following snippet on <code class=\"language-plaintext highlighter-rouge\">tools/detekt.gradle</code>:</p>\n\n<div class=\"language-groovy highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">apply</span> <span class=\"nl\">plugin:</span> <span class=\"s2\">\"io.gitlab.arturbosch.detekt\"</span>\n\n<span class=\"n\">detekt</span> <span class=\"o\">{</span>\n    <span class=\"n\">toolVersion</span> <span class=\"o\">=</span> <span class=\"s2\">\"1.0.0\"</span>\n    <span class=\"n\">input</span> <span class=\"o\">=</span> <span class=\"n\">files</span><span class=\"o\">(</span><span class=\"s2\">\"src\"</span><span class=\"o\">)</span>\n    <span class=\"n\">filters</span> <span class=\"o\">=</span> <span class=\"s2\">\".*/resources/.*,.*/build/.*\"</span>\n    <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">files</span><span class=\"o\">(</span><span class=\"n\">file</span><span class=\"o\">(</span><span class=\"s2\">\"$project.rootDir/tools/detekt.yml\"</span><span class=\"o\">))</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>and the following snippet on <code class=\"language-plaintext highlighter-rouge\">tools/detekt.yml</code>:</p>\n\n<div class=\"language-yml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"na\">autoCorrect</span><span class=\"pi\">:</span> <span class=\"no\">true</span>\n\n<span class=\"na\">build</span><span class=\"pi\">:</span>\n  <span class=\"na\">warningThreshold</span><span class=\"pi\">:</span> <span class=\"m\">5</span>\n  <span class=\"na\">failThreshold</span><span class=\"pi\">:</span> <span class=\"m\">10</span>\n  <span class=\"na\">weights</span><span class=\"pi\">:</span>\n    <span class=\"na\">complexity</span><span class=\"pi\">:</span> <span class=\"m\">2</span>\n    <span class=\"na\">formatting</span><span class=\"pi\">:</span> <span class=\"m\">0</span>\n    <span class=\"na\">LongParameterList</span><span class=\"pi\">:</span> <span class=\"m\">1</span>\n    <span class=\"na\">comments</span><span class=\"pi\">:</span> <span class=\"m\">0.5</span>\n\n<span class=\"na\">style</span><span class=\"pi\">:</span>\n  <span class=\"na\">active</span><span class=\"pi\">:</span> <span class=\"no\">true</span>\n  <span class=\"na\">WildcardImport</span><span class=\"pi\">:</span>\n    <span class=\"na\">active</span><span class=\"pi\">:</span> <span class=\"no\">true</span>\n  <span class=\"na\">MaxLineLength</span><span class=\"pi\">:</span>\n    <span class=\"na\">active</span><span class=\"pi\">:</span> <span class=\"no\">true</span>\n    <span class=\"na\">maxLineLength</span><span class=\"pi\">:</span> <span class=\"m\">120</span>\n    <span class=\"na\">excludePackageStatements</span><span class=\"pi\">:</span> <span class=\"no\">true</span>\n    <span class=\"na\">excludeImportStatements</span><span class=\"pi\">:</span> <span class=\"no\">true</span>\n    <span class=\"na\">excludeCommentStatements</span><span class=\"pi\">:</span> <span class=\"no\">true</span>\n</code></pre></div></div>\n\n<blockquote>\n  <p>For more info and options about the possible rules, you can refer to the <a href=\"https://github.com/arturbosch/detekt/blob/master/detekt-cli/src/main/resources/default-detekt-config.yml\">default detekt config</a> or the <a href=\"https://arturbosch.github.io/detekt/configurations.html\">official documentation</a>.</p>\n</blockquote>\n\n<p>Now we can move to our project and apply detekt. \nFirstly, let’s navigate to the <code class=\"language-plaintext highlighter-rouge\">androidApp</code>, open <code class=\"language-plaintext highlighter-rouge\">build.gradle</code> and add the following lines:</p>\n<div class=\"language-groovy highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">apply</span> <span class=\"nl\">from:</span> <span class=\"s1\">'../tools/detekt.gradle'</span>\n<span class=\"n\">check</span><span class=\"o\">.</span><span class=\"na\">dependsOn</span> <span class=\"s1\">'detekt'</span>\n</code></pre></div></div>\n\n<p>Then, do the same on the <code class=\"language-plaintext highlighter-rouge\">shared/build.gradle</code>.</p>\n\n<blockquote>\n  <p>Here you can find the <a href=\"https://github.com/diamantidis/KMP_base/commit/80f463f7b8f568c6a2ecbbefaa003582a2a87cf9\">GitHub commit</a> with all the changes done to add and configure detekt.</p>\n</blockquote>\n\n<p>And that’s it. Now you can run <code class=\"language-plaintext highlighter-rouge\">./gradlew clean shared:detekt</code> and <code class=\"language-plaintext highlighter-rouge\">./gradlew clean androidApp:detekt</code>. The expected result will be a report of all the issues detected by detekt available on the command line. The report is also generated in html, txt and xml format.</p>\n\n<p><img src=\"https://diamantidis.github.io/assets/kmp/detekt_report.png\" alt=\"detekt report screenshot\" /></p>\n\n<p>Furthermore, by making the <code class=\"language-plaintext highlighter-rouge\">check</code> gradle task to depend on the <code class=\"language-plaintext highlighter-rouge\">detekt</code> task, we can also run <code class=\"language-plaintext highlighter-rouge\">./gradlew clean androidApp:check</code> and <code class=\"language-plaintext highlighter-rouge\">./gradlew clean shared:check</code> which will execute both the linting and the unit tests.</p>\n\n<h2 id=\"wrap-up\">Wrap up</h2>\n\n<p>We now have our tools for code styling up and running for both the Swift and the Kotlin part of the project!!</p>\n\n<p>To sum up, complying to some code style rules and conventions can be great for a project. Having a tool(or more than one) to do this job is even greater. It will save you from consuming mental power, time and energy to check and apply those rules.</p>\n\n<p>In this post, we have seen how to install, configure and use those tools. I opt to not delve deeper to the rules themselves since I think, according to my experience so far, that this is something totally subjective to each person and team and there should be some thorough thought process before deciding which rules to enable and which not. Contrary, I have focused on how to setup those tools and enable some sample rules so that it is easy for someone to build on top of this implementation.</p>\n\n<p>A potential next step is to configure some Continuous integration solution to take care of all these commands (and the unit tests as well) every time we check in some code, which is probably something I will cover in one of my next posts.</p>\n\n<p>Thanks for reading, and should you have any questions or comments, just let me know on <a href=\"https://twitter.com/diamantidis_io\">Twitter</a> or by <a href=\"mailto:diamantidis@outlook.com\">email</a>!</p>\n",
            "tags": ["iOS","Android","KMP","fastlane","SwiftLint","Detekt"],
            "image": "https://diamantidis.github.io/assets/socialIcon.png"
        },
        
        {
            "id": "https://diamantidis.github.io/2019/08/25/kotlin-multiplatform-project-unit-tests-for-ios-and-android",
            "url": "https://diamantidis.github.io/2019/08/25/kotlin-multiplatform-project-unit-tests-for-ios-and-android",
            "title": "Kotlin Multiplatform Project: Unit tests for iOS and Android",
            "date_published": "2019-08-25T06:00:00+00:00",
            
            "date_modified": "2019-08-25T06:00:00+00:00",
            
            "author": {
                "name": "Ioannis Diamantidis",
                "url": "https://diamantidis.github.io"
            },
            "summary": "<p>In every project, regardless of the language or framework, it’s really important to have confidence when making a code change. Unit tests are here for this specific reason. To ensure that the code works as expected, verify that one change doesn’t break anything else and to inform you in case that happens.</p>\n\n",
            "content_html": "<p>In every project, regardless of the language or framework, it’s really important to have confidence when making a code change. Unit tests are here for this specific reason. To ensure that the code works as expected, verify that one change doesn’t break anything else and to inform you in case that happens.</p>\n\n<p>Since I am still early on my Kotlin Multiplatform Project journey, and as I believe that it is of great benefit and much easier to setup unit tests, lint and CI sooner rather than latter, this post is all about this. Based on the project created on the previous posts (<a href=\"/2019/08/04/setup-kotlin-multiplatform-project\">here</a> and <a href=\"/2019/08/17/thoughts-on-kotlin-multiplatform-project-structure\">here</a>), and which is hosted on <a href=\"https://github.com/diamantidis/KMP_base\">GitHub</a>, I will try to setup and run unit tests for the iOS and the Android app and the shared library as well.</p>\n\n<p>Let’s get started with the iOS app since I am more familiar with this. :smile:</p>\n\n<h2 id=\"ios-unit-tests\">iOS Unit tests</h2>\n\n<p>There are several ways to run the unit tests for an iOS app. I will focus on those that can be run from a command line, which will later enable me to setup a Continuous Integration solution and run the tests every time I check in some new code.</p>\n\n<p>Long story short, the command to run the unit tests of the iOS app is the following and can be executed from the project root directory.</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>xcodebuild test -project iosApp/iosApp.xcodeproj -scheme iosApp -destination 'platform=iOS Simulator,name=iPhone 7' -derivedDataPath build ONLY_ACTIVE_ARCH=YES\n\n</code></pre></div></div>\n\n<p>Quite verbose, a? There is still an alternative and this is <code class=\"language-plaintext highlighter-rouge\">fastlane</code>. In case you are not aware of <code class=\"language-plaintext highlighter-rouge\">fastlane</code>, it is a tool to automate some tasks related with app development and you can find more info <a href=\"https://fastlane.tools/\">here</a>. I will follow the installation process with the Gemfile to add fastlane to this project. The fastlane’s documentation about the installation process can be found <a href=\"https://docs.fastlane.tools/getting-started/ios/setup/#use-a-gemfile\">here</a>.</p>\n\n<blockquote>\n  <p>A commit with all these changes can be found <a href=\"https://github.com/diamantidis/KMP_base/commit/44acdf4ba7a3afce0aacc9cc0e81e7aedfc504c6\">here</a>.</p>\n</blockquote>\n\n<p>After completing those steps, navigate to the directory <code class=\"language-plaintext highlighter-rouge\">iosApp</code>, and make sure that the installation is done correctly by running <code class=\"language-plaintext highlighter-rouge\">bundle exec fastlane</code>. This command will result in a message to setup fastlane since there is no fastlane folder in the project yet. It will look like the following screenshot:</p>\n\n<p><img src=\"https://diamantidis.github.io/assets/kmp/fastlane_setup.png\" alt=\"fastlane setup screenshot\" /></p>\n\n<p>You can type <code class=\"language-plaintext highlighter-rouge\">y</code>, and then, choose the <code class=\"language-plaintext highlighter-rouge\">Manual setup - manually setup your project to automate your tasks</code> among the option offered. After that, follow the instructions and press <code class=\"language-plaintext highlighter-rouge\">Enter</code>. A new fastlane folder will be created, containing a Fastfile with a <code class=\"language-plaintext highlighter-rouge\">custom_lane</code> already there.</p>\n\n<p>We are ready to replace this <code class=\"language-plaintext highlighter-rouge\">custom lane</code> with our own lane that will run the unit test. Open <code class=\"language-plaintext highlighter-rouge\">iosApp/fastlane/Fastfile</code> and replace the whole <code class=\"language-plaintext highlighter-rouge\">:custom_lane</code> with the following snippet:</p>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  <span class=\"n\">desc</span> <span class=\"s2\">\"Run iOS unit tests\"</span>\n  <span class=\"n\">lane</span> <span class=\"ss\">:tests</span> <span class=\"k\">do</span>\n    <span class=\"n\">run_tests</span><span class=\"p\">(</span>\n        <span class=\"ss\">project: </span><span class=\"s2\">\"iosApp.xcodeproj\"</span><span class=\"p\">,</span>\n        <span class=\"ss\">devices: </span><span class=\"p\">[</span><span class=\"s2\">\"iPhone 7\"</span><span class=\"p\">],</span>\n        <span class=\"ss\">derived_data_path: </span><span class=\"s2\">\"../build\"</span>\n    <span class=\"p\">)</span>\n  <span class=\"k\">end</span>\n</code></pre></div></div>\n\n<p>Then, go back to the command line and run the command <code class=\"language-plaintext highlighter-rouge\">bundle exec fastlane tests</code> to run the unit test. :tada:</p>\n\n<blockquote>\n  <p>A commit with all these changes can be found <a href=\"https://github.com/diamantidis/KMP_base/commit/81f3578628ccfbdd176c5a98c96db039c6968c94\">here</a>.</p>\n</blockquote>\n\n<blockquote>\n  <p>Just to be on the safe side, open <code class=\"language-plaintext highlighter-rouge\">iosAppTests.swift</code> and make it fail by changing <code class=\"language-plaintext highlighter-rouge\">7</code> to some other random numbers, and run the <code class=\"language-plaintext highlighter-rouge\">bundle exec fastlane tests</code> command again to verify that it runs as expected. Don’t trust any unit test, if you haven’t seen it fail.</p>\n</blockquote>\n\n<h2 id=\"android-app-unit-tests\">Android app unit tests</h2>\n\n<p>As we saw on the iOS app, there are more than one ways to run the unit tests from the command line. The same applies for the Android app too. To start with, use the command line and navigate to the root folder of your project. From there, you can execute the command <code class=\"language-plaintext highlighter-rouge\">./gradlew androidapp:test</code> to run the unit tests of the android app.</p>\n\n<p>Despite the fact that it’s a much shorter command compared to the iOS one, it would be nice to use fastlane to run the unit tests of the Android app too, so that we have familiar setup and commands for both projects.</p>\n\n<p>This time let’s follow a different approach to setup fastlane. Navigate to the <code class=\"language-plaintext highlighter-rouge\">androidApp</code> directory, and just create a folder with the name <code class=\"language-plaintext highlighter-rouge\">fastlane</code> and place a file named <code class=\"language-plaintext highlighter-rouge\">Fastfile</code> inside it.</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">mkdir </span>fastlane\n<span class=\"nb\">touch </span>fastlane/Fastfile\n</code></pre></div></div>\n\n<p>Open <code class=\"language-plaintext highlighter-rouge\">Fastline</code> with your favourite editor and, similar to the <code class=\"language-plaintext highlighter-rouge\">Fastfile</code> of the iOS project, add the following snippet:</p>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">default_platform</span><span class=\"p\">(</span><span class=\"ss\">:android</span><span class=\"p\">)</span>\n\n<span class=\"n\">platform</span> <span class=\"ss\">:android</span> <span class=\"k\">do</span>\n  <span class=\"n\">desc</span> <span class=\"s2\">\"Run Android unit tests\"</span>\n  <span class=\"n\">lane</span> <span class=\"ss\">:tests</span> <span class=\"k\">do</span>\n    <span class=\"n\">gradle</span><span class=\"p\">(</span>\n      <span class=\"ss\">task: </span><span class=\"s2\">\"test\"</span><span class=\"p\">,</span>\n      <span class=\"ss\">gradle_path: </span><span class=\"s2\">\"../gradlew\"</span>\n    <span class=\"p\">)</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n\n</code></pre></div></div>\n\n<p>And you are ready to go back to the command line and execute the same command as for the iOS project (<code class=\"language-plaintext highlighter-rouge\">bundle exec fastlane tests</code>) to run the unit test for the Android app.</p>\n<blockquote>\n  <p>Again make sure that the command is working as expected on all scenarios, by breaking the test. Changing 4 to 5 on <code class=\"language-plaintext highlighter-rouge\">ExampleUnitTest.kt</code> is enough. :smiling_imp:</p>\n</blockquote>\n\n<blockquote>\n  <p>A commit with all these changes can be found <a href=\"https://github.com/diamantidis/KMP_base/commit/fc656dd09c7141f5a3309c57966811deac416a32\">here</a>.</p>\n</blockquote>\n\n<h1 id=\"shared-library\">Shared Library</h1>\n\n<p>At this point, we have the scripts to run the unit tests for the iOS and the Android app, so it’s time to move on to the shared library. Sadly, we cannot use fastlane, and thus we are going to use <code class=\"language-plaintext highlighter-rouge\">gradle</code>. The simple command to run the tests is the following:\n<code class=\"language-plaintext highlighter-rouge\">./gradlew clean shared:test</code>. It seems that <code class=\"language-plaintext highlighter-rouge\">gradle</code> doesn’t print a detailed output of the results of the tests, but rather a generic status of <code class=\"language-plaintext highlighter-rouge\">BUILD SUCCESSFUL in Xs</code> in case of success.</p>\n\n<p>As we did before, let’s try to break the tests one by one. First, open <code class=\"language-plaintext highlighter-rouge\">SampleTests.kt</code> and replace <code class=\"language-plaintext highlighter-rouge\">assertTrue(Sample().checkMe() &gt; 0)</code> with <code class=\"language-plaintext highlighter-rouge\">assertTrue(Sample().checkMe() &gt; 100)</code>, and rerun <code class=\"language-plaintext highlighter-rouge\">./gradlew clean shared:test</code>. In this case, when an error occurs, the output is much more detailed like:</p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>sample.SampleTests &gt; testMe FAILED\n    java.lang.AssertionError at SampleTests.kt:10\n\n3 tests completed, 1 failed\n</code></pre></div></div>\n\n<p>Though it seems a little weird to output that 3 tests are completed and not 4 since there are 2 tests on the <code class=\"language-plaintext highlighter-rouge\">commonTest</code> directory and 1 for each of <code class=\"language-plaintext highlighter-rouge\">iosTest</code> and <code class=\"language-plaintext highlighter-rouge\">androidTest</code>.</p>\n\n<p>But let’s carry on, revert the change on <code class=\"language-plaintext highlighter-rouge\">SampleTests.kt</code> and try to break the test on <code class=\"language-plaintext highlighter-rouge\">SampleTestsAndroid.kt</code> too, by replacing the literal <code class=\"language-plaintext highlighter-rouge\">Android</code> with something else.</p>\n\n<p>Again, it seems to work:</p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>sample.SampleTestsAndroid &gt; testHello FAILED\n    java.lang.AssertionError at SampleTestsAndroid.kt:9\n\n3 tests completed, 1 failed\n</code></pre></div></div>\n\n<p>Similarly, revert <code class=\"language-plaintext highlighter-rouge\">SampleTestsAndroid.kt</code> and try to make the test on <code class=\"language-plaintext highlighter-rouge\">SampleTestsIOS.kt</code> fail. Same as the Android test, replacing the literal <code class=\"language-plaintext highlighter-rouge\">iOS</code> with something else is enough to make the test and therefore the command fail.</p>\n\n<p>But it doesn’t :thinking:.</p>\n\n<p>The tests for iOS are not executed and this is happening because Kotlin Multiplatform Project plugin doesn’t support running tests on other than the host platforms, e.g iOS on macOS. To solve this issue we have to manually add a new Gradle task to run those iOS tests. This task will spawn a simulator process where the tests will be run.</p>\n\n<p>The following snippet contains this task and it should be added in the <code class=\"language-plaintext highlighter-rouge\">shared/build.gradle</code>.</p>\n\n<div class=\"language-groovy highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">task</span> <span class=\"n\">iosTest</span> <span class=\"o\">{</span>\n    <span class=\"kt\">def</span> <span class=\"n\">device</span> <span class=\"o\">=</span> <span class=\"n\">project</span><span class=\"o\">.</span><span class=\"na\">findProperty</span><span class=\"o\">(</span><span class=\"s2\">\"iosDevice\"</span><span class=\"o\">)?.</span><span class=\"na\">toString</span><span class=\"o\">()</span> <span class=\"o\">?:</span> <span class=\"s2\">\"iPhone X\"</span>\n    <span class=\"n\">dependsOn</span> <span class=\"n\">kotlin</span><span class=\"o\">.</span><span class=\"na\">targets</span><span class=\"o\">.</span><span class=\"na\">ios</span><span class=\"o\">.</span><span class=\"na\">binaries</span><span class=\"o\">.</span><span class=\"na\">getTest</span><span class=\"o\">(</span><span class=\"s1\">'DEBUG'</span><span class=\"o\">).</span><span class=\"na\">linkTaskName</span>\n    <span class=\"n\">group</span> <span class=\"o\">=</span> <span class=\"n\">JavaBasePlugin</span><span class=\"o\">.</span><span class=\"na\">VERIFICATION_GROUP</span>\n    <span class=\"n\">description</span> <span class=\"o\">=</span> <span class=\"s2\">\"Runs iOS tests on a simulator\"</span>\n\n    <span class=\"n\">doLast</span> <span class=\"o\">{</span>\n        <span class=\"kt\">def</span> <span class=\"n\">binary</span> <span class=\"o\">=</span> <span class=\"n\">kotlin</span><span class=\"o\">.</span><span class=\"na\">targets</span><span class=\"o\">.</span><span class=\"na\">ios</span><span class=\"o\">.</span><span class=\"na\">binaries</span><span class=\"o\">.</span><span class=\"na\">getTest</span><span class=\"o\">(</span><span class=\"s1\">'DEBUG'</span><span class=\"o\">).</span><span class=\"na\">outputFile</span>\n        <span class=\"n\">exec</span> <span class=\"o\">{</span>\n            <span class=\"n\">commandLine</span> <span class=\"s1\">'xcrun'</span><span class=\"o\">,</span> <span class=\"s1\">'simctl'</span><span class=\"o\">,</span> <span class=\"s1\">'spawn'</span><span class=\"o\">,</span> <span class=\"n\">device</span><span class=\"o\">,</span> <span class=\"n\">binary</span><span class=\"o\">.</span><span class=\"na\">absolutePath</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>You can run this task by navigating to the project root directory and either executing the command <code class=\"language-plaintext highlighter-rouge\">./gradlew clean shared:iosTest</code> or <code class=\"language-plaintext highlighter-rouge\">./gradlew clean shared:iosTest -PiosDevice=\"iPhone 8\"</code> to run on a different simulator.</p>\n\n<p>Running those commands now will result in an error since we have changed <code class=\"language-plaintext highlighter-rouge\">SampleTestsIOS.kt</code>. If we rollback to the <code class=\"language-plaintext highlighter-rouge\">iOS</code> literal, both of these commands will finish with success.</p>\n\n<p>Furthermore, we can add the following snippet in the end of the <code class=\"language-plaintext highlighter-rouge\">shared/build.gradle</code> too: <code class=\"language-plaintext highlighter-rouge\">tasks.check.dependsOn iosTest</code>. This will enable us to execute <code class=\"language-plaintext highlighter-rouge\">./gradlew clean shared:check</code> and run all the tests. This can be potentially useful when we make changes on every project of the shared library and we want to run all the tests with one command.</p>\n\n<blockquote>\n  <p>A commit with all these changes can be found <a href=\"https://github.com/diamantidis/KMP_base/commit/25b7a226dd147f9f72d69d62ac0a477c67c7e3fc\">here</a>.</p>\n</blockquote>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>In this post, we have seen how to setup fastlane on both iOS and Android apps and what are the commands to run the test for each project individually. Now, every time we make a code change, we can run one of those commands to make sure that we haven’t break anything. Of course, unit tests and knowing how to run them is important but making sure that they are kept updated and that they run frequently and on every change is equally important to get the most out of them. Setting up Continuous integration and code coverage are some steps towards that direction but those are big topics on their own that I will probably cover in one of the next posts. Until then, have fun and do let me know if you have any questions!!</p>\n\n",
            "tags": ["iOS","Android","KMP","fastlane"],
            "image": "https://diamantidis.github.io/assets/socialIcon.png"
        },
        
        {
            "id": "https://diamantidis.github.io/2019/08/17/thoughts-on-kotlin-multiplatform-project-structure",
            "url": "https://diamantidis.github.io/2019/08/17/thoughts-on-kotlin-multiplatform-project-structure",
            "title": "Thoughts on Kotlin Multiplatform Project structure",
            "date_published": "2019-08-17T06:00:00+00:00",
            
            "date_modified": "2019-08-17T06:00:00+00:00",
            
            "author": {
                "name": "Ioannis Diamantidis",
                "url": "https://diamantidis.github.io"
            },
            "summary": "<p>In the <a href=\"/2019/08/04/setup-kotlin-multiplatform-project\">previous article</a>, I tried to explain step by step the process of creating an iOS and Android app with a shared library using Kotlin Multiplatform Project.\nHaving our project ready and running on both Android and iOS, it’s time to investigate how the project is structured.\nSo, the topic of this post will revolve around the folder structure of the created project, and I will share some of my thoughts about potential improvements.</p>\n\n",
            "content_html": "<p>In the <a href=\"/2019/08/04/setup-kotlin-multiplatform-project\">previous article</a>, I tried to explain step by step the process of creating an iOS and Android app with a shared library using Kotlin Multiplatform Project.\nHaving our project ready and running on both Android and iOS, it’s time to investigate how the project is structured.\nSo, the topic of this post will revolve around the folder structure of the created project, and I will share some of my thoughts about potential improvements.</p>\n\n<h2 id=\"project-folder-structure\">Project Folder Structure</h2>\n<p>The file tree of the current project looks like this. (some directories, like the <code class=\"language-plaintext highlighter-rouge\">build</code> are omitted for brevity)</p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>.\n├── app\n│   ├── Info.plist\n│   ├── build\n│   │   ├── ...\n│   │   └── ...\n│   ├── build.gradle\n│   └── src\n│       ├── commonMain\n│       │   ├── kotlin\n│       │   │   └── sample\n│       │   │       └── Sample.kt\n│       │   └── resources\n│       ├── commonTest\n│       │   ├── kotlin\n│       │   │   └── sample\n│       │   │       └── SampleTests.kt\n│       │   └── resources\n│       ├── iosMain\n│       │   ├── kotlin\n│       │   │   └── sample\n│       │   │       └── SampleIos.kt\n│       │   └── resources\n│       ├── iosTest\n│       │   ├── kotlin\n│       │   │   └── sample\n│       │   │       └── SampleTestsIOS.kt\n│       │   └── resources\n│       ├── main\n│       │   ├── AndroidManifest.xml\n│       │   ├── java\n│       │   │   └── sample\n│       │   │       └── SampleAndroid.kt\n│       │   ├── kotlin\n│       │   └── res\n│       │       ├── layout\n│       │       │   └── activity_main.xml\n│       │       └── values\n│       │           ├── strings.xml\n│       │           └── styles.xml\n│       └── test\n│           ├── java\n│           │   └── sample\n│           │       └── SampleTestsAndroid.kt\n│           └── kotlin\n├── build\n│   └── kotlin\n│       └── sessions\n├── build.gradle\n├── gradle\n│   └── wrapper\n│       ├── gradle-wrapper.jar\n│       └── gradle-wrapper.properties\n├── gradle.properties\n├── gradlew\n├── gradlew.bat\n├── iosApp\n│   ├── iosApp\n│   │   ├── AppDelegate.swift\n│   │   ├── Base.lproj\n│   │   │   ├── LaunchScreen.storyboard\n│   │   │   └── Main.storyboard\n│   │   ├── Info.plist\n│   │   └── ViewController.swift\n│   ├── iosApp.xcodeproj\n│   └── iosAppTests\n│       ├── Info.plist\n│       └── iosAppTests.swift\n├── local.properties\n└── settings.gradle\n</code></pre></div></div>\n\n<p>The main points of interest are two directories. \nThe first one is the <code class=\"language-plaintext highlighter-rouge\">iosApp</code> folder which contains the whole iOS app.\nThe second one is the <code class=\"language-plaintext highlighter-rouge\">app</code> folder which contains the shared library and the Android app. \nThe shared logic resides under the <code class=\"language-plaintext highlighter-rouge\">commonMain</code> folder and <code class=\"language-plaintext highlighter-rouge\">commonTest</code> is the place for the tests of the shared library. \n<code class=\"language-plaintext highlighter-rouge\">iOSMain</code> is the place for the iOS specific logic and <code class=\"language-plaintext highlighter-rouge\">iOSTest</code> is the place for the tests of the iOS logic.\nLastly, <code class=\"language-plaintext highlighter-rouge\">main</code> is used both for the JVM-specific logic of the shared library and the Android app as well. For instance, <code class=\"language-plaintext highlighter-rouge\">SampleAndroid.kt</code> contains both the JVM-specific code and the MainActivity of the android app.</p>\n\n<div class=\"language-kotlin highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">actual</span> <span class=\"kd\">class</span> <span class=\"nc\">Sample</span> <span class=\"p\">{</span>\n    <span class=\"n\">actual</span> <span class=\"k\">fun</span> <span class=\"nf\">checkMe</span><span class=\"p\">()</span> <span class=\"p\">=</span> <span class=\"mi\">44</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">actual</span> <span class=\"kd\">object</span> <span class=\"nc\">Platform</span> <span class=\"p\">{</span>\n    <span class=\"n\">actual</span> <span class=\"kd\">val</span> <span class=\"py\">name</span><span class=\"p\">:</span> <span class=\"nc\">String</span> <span class=\"p\">=</span> <span class=\"s\">\"Android\"</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">class</span> <span class=\"nc\">MainActivity</span> <span class=\"p\">:</span> <span class=\"nc\">AppCompatActivity</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n\n    <span class=\"k\">override</span> <span class=\"k\">fun</span> <span class=\"nf\">onCreate</span><span class=\"p\">(</span><span class=\"n\">savedInstanceState</span><span class=\"p\">:</span> <span class=\"nc\">Bundle</span><span class=\"p\">?)</span> <span class=\"p\">{</span>\n        <span class=\"k\">super</span><span class=\"p\">.</span><span class=\"nf\">onCreate</span><span class=\"p\">(</span><span class=\"n\">savedInstanceState</span><span class=\"p\">)</span>\n        <span class=\"nc\">Sample</span><span class=\"p\">().</span><span class=\"nf\">checkMe</span><span class=\"p\">()</span>\n        <span class=\"nf\">setContentView</span><span class=\"p\">(</span><span class=\"nc\">R</span><span class=\"p\">.</span><span class=\"n\">layout</span><span class=\"p\">.</span><span class=\"n\">activity_main</span><span class=\"p\">)</span>\n        <span class=\"n\">findViewById</span><span class=\"p\">&lt;</span><span class=\"nc\">TextView</span><span class=\"p\">&gt;(</span><span class=\"nc\">R</span><span class=\"p\">.</span><span class=\"n\">id</span><span class=\"p\">.</span><span class=\"n\">main_text</span><span class=\"p\">).</span><span class=\"n\">text</span> <span class=\"p\">=</span> <span class=\"nf\">hello</span><span class=\"p\">()</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h2 id=\"thoughts-thinking\">Thoughts :thinking:</h2>\n\n<p>Having the shared library logic mixed with the Android app can be a potential source of issues. Ideally I would like to keep it separate and have the shared library as a dependency on the Android app, just like the iOS app. Long story short, let’s create a new app and migrate all the android app logic out of the <code class=\"language-plaintext highlighter-rouge\">app</code> directory.</p>\n\n<h2 id=\"creating-a-new-android-app\">Creating a new Android App</h2>\n\n<p>Open the project with Android Studio and follow the steps below to create a new Android app inside the current project:</p>\n\n<ol>\n  <li>Right click on the project folder and then choose the option New &gt; Module.</li>\n  <li>Choose <code class=\"language-plaintext highlighter-rouge\">Phone &amp; Tablet Module</code> from the popup and press Next.</li>\n  <li>Configure the app by naming it as <code class=\"language-plaintext highlighter-rouge\">androidApp</code>, change the package name if you would like to and set the minimum sdk version, Then, press Next.</li>\n  <li>Choose the option <code class=\"language-plaintext highlighter-rouge\">Empty Activity</code> and press Next.</li>\n  <li>Name the activity <code class=\"language-plaintext highlighter-rouge\">MainActivity</code> and keep the option to <code class=\"language-plaintext highlighter-rouge\">Generate the layout file</code>, the name of the layout file as <code class=\"language-plaintext highlighter-rouge\">activity_main</code> and the source language as Kotlin. After that, click on the <code class=\"language-plaintext highlighter-rouge\">Finish</code> button.</li>\n</ol>\n\n<p>The new app is created and Gradle will try to sync and build the project, but it will end up showing an error with a message <code class=\"language-plaintext highlighter-rouge\">Plugin request for plugin already on the classpath must not include a version</code>.\nTo fix this error, let’s go to <code class=\"language-plaintext highlighter-rouge\">app/build.gradle</code> and remove the version from the line <code class=\"language-plaintext highlighter-rouge\">id 'org.jetbrains.kotlin.multiplatform' version '1.3.41'</code></p>\n\n<p>Next, let’s move all the repositories to the root <code class=\"language-plaintext highlighter-rouge\">build.gradle</code>, by adding the following snippet instead of the <code class=\"language-plaintext highlighter-rouge\">repositories</code> block to the <code class=\"language-plaintext highlighter-rouge\">build.gradle</code> on the root folder and in parallel removing the <code class=\"language-plaintext highlighter-rouge\">repositories</code> block from the <code class=\"language-plaintext highlighter-rouge\">app/build.gradle</code></p>\n<div class=\"language-groovy highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">allprojects</span> <span class=\"o\">{</span>\n    <span class=\"n\">repositories</span> <span class=\"o\">{</span>\n        <span class=\"n\">google</span><span class=\"o\">()</span>\n        <span class=\"n\">jcenter</span><span class=\"o\">()</span>\n        <span class=\"n\">mavenCentral</span><span class=\"o\">()</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>And, by the way, though it’s done automatically when creating the app, make sure to include <code class=\"language-plaintext highlighter-rouge\">androidApp</code> into <code class=\"language-plaintext highlighter-rouge\">settings.gradle</code>.</p>\n\n<p>Congrats, we are now able to run the app! At last we have the default “Hello World!!” on an Android app.</p>\n\n<blockquote>\n  <p>A commit with all these changes can be found <a href=\"https://github.com/diamantidis/KMP_base/commit/edf9d0ddfaf8a8433b28865ad9197ecd9fd66345\">here</a></p>\n</blockquote>\n\n<h2 id=\"migrate-android-app-from-shared-library-to-androidapp\">Migrate Android app from shared library to androidApp</h2>\n\n<p>The next step is to migrate the code related to the android app from the shared module to the <code class=\"language-plaintext highlighter-rouge\">androidApp</code>.</p>\n\n<p>First, go to <code class=\"language-plaintext highlighter-rouge\">androidApp/build.gradle</code> and add the dependency to the shared library by adding <code class=\"language-plaintext highlighter-rouge\">implementation project(':app')</code> inside the dependencies block so that we can use the shared project from within the app.</p>\n\n<p>This will make Gradle fail with message something like</p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Unable to resolve dependency for ':androidApp@debug/compileClasspath': Could not resolve project :app.\n</code></pre></div></div>\n\n<p>In order to fix this, let’s go to the <code class=\"language-plaintext highlighter-rouge\">app/build.gradle</code> and replace the line <code class=\"language-plaintext highlighter-rouge\">apply plugin: 'com.android.application'</code> with <code class=\"language-plaintext highlighter-rouge\">apply plugin: 'com.android.library'</code> since there will be no application inside the <code class=\"language-plaintext highlighter-rouge\">app</code> package. Also, remove the line with <code class=\"language-plaintext highlighter-rouge\">applicationId</code> from the <code class=\"language-plaintext highlighter-rouge\">android</code> block.</p>\n\n<p>Then copy <code class=\"language-plaintext highlighter-rouge\">activity_main.xml</code> from <code class=\"language-plaintext highlighter-rouge\">app/src/main/res/layout/</code> to <code class=\"language-plaintext highlighter-rouge\">androidApp/src/main/res/layout/</code> and the <code class=\"language-plaintext highlighter-rouge\">MainActivity</code> class from <code class=\"language-plaintext highlighter-rouge\">SampleAndroid.kt</code> to <code class=\"language-plaintext highlighter-rouge\">MainActivity.kt</code>.</p>\n\n<p>These are all the changes needed and if you run the app, you should be able to see the “Hello from Android” message.</p>\n\n<blockquote>\n  <p>A commit with all these changes can be found <a href=\"https://github.com/diamantidis/KMP_base/commit/2428ad7caa624ed32e52b6e6a1729330e1af7810\">here</a></p>\n</blockquote>\n\n<h2 id=\"cleaning-up-shared-library\">Cleaning up shared library</h2>\n\n<p>But we are not done yet. Some cleanup is required in the shared library to remove all the Android app related code.</p>\n\n<p>Let’s start from <code class=\"language-plaintext highlighter-rouge\">SampleAndroid.kt</code>, where we can remove the whole <code class=\"language-plaintext highlighter-rouge\">MainActivity</code> class and the related unused imports as well. Furthermore, <code class=\"language-plaintext highlighter-rouge\">app/src/main/res/</code> is unused so the entire directory can be safely removed. Moving on to the <code class=\"language-plaintext highlighter-rouge\">app/src/main/AndroidManifest.xml</code>, we can remove the <code class=\"language-plaintext highlighter-rouge\">&lt;application&gt;</code> block since there is no application any longer in this project. Finally, <code class=\"language-plaintext highlighter-rouge\">app/build.gradle</code> also needs some cleaning since we can remove the whole <code class=\"language-plaintext highlighter-rouge\">dependencies</code> block and other android-specific configurations like the whole <code class=\"language-plaintext highlighter-rouge\">android.defaultConfig</code> block.</p>\n\n<p>Phew, the shared library no longer has any Android-app related code! :sweat_smile:</p>\n\n<blockquote>\n  <p>A commit with all these changes can be found <a href=\"https://github.com/diamantidis/KMP_base/commit/39d537cf80b20b80f911d2d069231559277c4980\">here</a></p>\n</blockquote>\n\n<p>Now, take a look at the common and iOS part. As you can notice, they follow the same naming and folder conventions. Both are structured in a <code class=\"language-plaintext highlighter-rouge\">&lt;platform&gt;Main</code> and a <code class=\"language-plaintext highlighter-rouge\">&lt;platform&gt;Test</code> folder both containing a <code class=\"language-plaintext highlighter-rouge\">kotlin</code> folder.</p>\n\n<p>I would like to change the android part of the shared library to also adhere to these conventions. \nTherefore, I will move the sample package from the <code class=\"language-plaintext highlighter-rouge\">java</code> folder to the <code class=\"language-plaintext highlighter-rouge\">kotlin</code> folder and then rename the <code class=\"language-plaintext highlighter-rouge\">main</code> and the <code class=\"language-plaintext highlighter-rouge\">test</code> to <code class=\"language-plaintext highlighter-rouge\">androidMain</code> and <code class=\"language-plaintext highlighter-rouge\">androidTest</code> respectively.</p>\n\n<p>We are going to still need the <code class=\"language-plaintext highlighter-rouge\">main</code> package for the <code class=\"language-plaintext highlighter-rouge\">AndroidManifest.xml</code> since this is the default location gradle is looking for it. Otherwise, we will get an error with a message something like:</p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>ERROR: Cannot read packageName from &lt;project_location&gt;/app/src/main/AndroidManifest.xml\n</code></pre></div></div>\n<p>So, we have to create again a directory named <code class=\"language-plaintext highlighter-rouge\">main</code> inside the <code class=\"language-plaintext highlighter-rouge\">app/src</code> folder and then move <code class=\"language-plaintext highlighter-rouge\">AndroidManifest.xml</code> there.</p>\n\n<p>Lastly, we can remove the <code class=\"language-plaintext highlighter-rouge\">resources</code> folder from <code class=\"language-plaintext highlighter-rouge\">commonMain</code>, <code class=\"language-plaintext highlighter-rouge\">commonTest</code>, <code class=\"language-plaintext highlighter-rouge\">iosMain</code> and <code class=\"language-plaintext highlighter-rouge\">iosTest</code> folders since we are not going to need it for now.</p>\n\n<p>After all this changes, the folder structure of the shared library would be like the following:</p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>app/src\n├── androidMain\n│   └── kotlin\n│       └── sample\n│           └── SampleAndroid.kt\n├── androidTest\n│   └── kotlin\n│       └── sample\n│           └── SampleTestsAndroid.kt\n├── commonMain\n│   └── kotlin\n│       └── sample\n│           └── Sample.kt\n├── commonTest\n│   └── kotlin\n│       └── sample\n│           └── SampleTests.kt\n├── iosMain\n│   └── kotlin\n│       └── sample\n│           └── SampleIos.kt\n├── iosTest\n│   └── kotlin\n│       └── sample\n│           └── SampleTestsIOS.kt\n└── main\n    └── AndroidManifest.xml\n</code></pre></div></div>\n\n<blockquote>\n  <p>A commit with all these changes can be found <a href=\"https://github.com/diamantidis/KMP_base/commit/68a281ed4f20574ad4a4d34f2eb167302a2c364f\">here</a></p>\n</blockquote>\n\n<h2 id=\"rename-app-to-shared\">Rename app to shared</h2>\n\n<p>There is still one change that I would like to make. This would be to change the <code class=\"language-plaintext highlighter-rouge\">app</code> to something like <code class=\"language-plaintext highlighter-rouge\">shared</code> to better illustrate what it actually is.</p>\n\n<p>Let’s try to see the steps needed to do so.</p>\n\n<p>First and foremost, let’s make use of Android Studio’s refactor utility and rename the whole module <code class=\"language-plaintext highlighter-rouge\">app</code> to <code class=\"language-plaintext highlighter-rouge\">shared</code>. As expected, Android Studio will make all the required changes and the <code class=\"language-plaintext highlighter-rouge\">androidApp</code> will work without any further changes.</p>\n\n<blockquote>\n  <p>A commit with all these changes can be found <a href=\"https://github.com/diamantidis/KMP_base/commit/dd493891c05c64b37bf4ccb978dfd4104b85692f\">here</a></p>\n</blockquote>\n\n<p>But this is not the case for the iOS app too. :disappointed:</p>\n\n<p>First we will get the error <code class=\"language-plaintext highlighter-rouge\">error: Build input file cannot be found: '&lt;project_dir&gt;/app/Info.plist'</code> when we try to run the app.</p>\n\n<p>On Android Studio, open <code class=\"language-plaintext highlighter-rouge\">project.pbxproj</code>, search for <code class=\"language-plaintext highlighter-rouge\">/app/Info.plist</code> and change it to <code class=\"language-plaintext highlighter-rouge\">/shared/Info.plist</code>.</p>\n\n<p>That change will fix this issue, but another one pops up with a message that contains something like:</p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code> What went wrong:\nThe specified project directory '&lt;project_dir&gt;/app' does not exist.\n</code></pre></div></div>\n\n<p>This comes from the custom build script that builds the shared framework. Again, open <code class=\"language-plaintext highlighter-rouge\">project.pbxproj</code>, search for <code class=\"language-plaintext highlighter-rouge\">PBXShellScriptBuildPhase</code> and inside this section replace the occurrence of <code class=\"language-plaintext highlighter-rouge\">/app</code> with <code class=\"language-plaintext highlighter-rouge\">/shared</code>.</p>\n\n<p>After cleaning and building the app again, we now get an error on <code class=\"language-plaintext highlighter-rouge\">ViewController.swift</code> saying that <code class=\"language-plaintext highlighter-rouge\">No such module 'app'</code>.</p>\n\n<p>In order to fix that, let’s go to our <code class=\"language-plaintext highlighter-rouge\">shared/build.gradle</code> and scroll to the bottom where we declare the iOS framework. It’s still <code class=\"language-plaintext highlighter-rouge\">app</code>. So, let’s change that to <code class=\"language-plaintext highlighter-rouge\">shared</code> and change <code class=\"language-plaintext highlighter-rouge\">ViewController.swift</code> to <code class=\"language-plaintext highlighter-rouge\">import shared</code>.</p>\n\n<p>Going back to Xcode to build the app, we are now getting this <code class=\"language-plaintext highlighter-rouge\">ld: framework not found app</code> error! :tired_face:</p>\n\n<p>Let’s open <code class=\"language-plaintext highlighter-rouge\">project.pbxproj</code> on Android Studio again, and this time search for<code class=\"language-plaintext highlighter-rouge\">app.framework</code> and replace all the occurrences with <code class=\"language-plaintext highlighter-rouge\">shared.framework</code>.</p>\n\n<p>Next, search for <code class=\"language-plaintext highlighter-rouge\">app</code> with the <code class=\"language-plaintext highlighter-rouge\">words</code> options on, to find those that are only app and not for example <code class=\"language-plaintext highlighter-rouge\">AppDelegate</code>. Sadly, a few other cases will by matched, like <code class=\"language-plaintext highlighter-rouge\">iosApp.app</code> or <code class=\"language-plaintext highlighter-rouge\">com.example.app</code>, so changing <code class=\"language-plaintext highlighter-rouge\">app</code> to <code class=\"language-plaintext highlighter-rouge\">shared</code> have to be done one by one.</p>\n\n<p>And…, that’s it, you can now run your app in both iOS and Android! :tada:</p>\n\n<blockquote>\n  <p>A commit with all these changes can be found <a href=\"https://github.com/diamantidis/KMP_base/commit/5bb82c759fbf9bdca45034994f3bbf60ec379ba1\">here</a></p>\n</blockquote>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>The project, now, has a folder structure that keeps both the iOS and the Android app separated from the shared logic and also the package that contains the shared logic is finally named shared.</p>\n\n<p>Since I am still doing my first baby steps on Kotlin Multiplatform Project, I may have to make some adaptations to this structure as I learn more, but for now, I believe that these changes on the current project will help me it the long run.\nHaving said that and with a folder structure that I believe that it seems to be more suitable, I will continue my exploration on Kotlin Multiplatform Project with a post on setting up and running unit tests for the apps and the shared library and how to built a CI solution for this project. \nI hope that you find this post useful and let me know if you have any questions! See you soon!</p>\n\n",
            "tags": ["iOS","Xcode","Android","Kotlin","KMP"],
            "image": "https://diamantidis.github.io/assets/socialIcon.png"
        },
        
        {
            "id": "https://diamantidis.github.io/2019/08/04/setup-kotlin-multiplatform-project",
            "url": "https://diamantidis.github.io/2019/08/04/setup-kotlin-multiplatform-project",
            "title": "How to setup a Kotlin Multiplatform Project for iOS and Android",
            "date_published": "2019-08-04T06:00:00+00:00",
            
            "date_modified": "2019-08-04T06:00:00+00:00",
            
            "author": {
                "name": "Ioannis Diamantidis",
                "url": "https://diamantidis.github.io"
            },
            "summary": "<p>Hi, time has come to write something about Kotlin Multiplatform Project and more specifically how to setup a project with an iOS app, an Android app and a shared library. I have recently started playing around with Kotlin Multiplatform Project, and it seems quite an interesting project to me. Thus, I will try to document my steps and learning in a series of posts, starting from this one.</p>\n\n",
            "content_html": "<p>Hi, time has come to write something about Kotlin Multiplatform Project and more specifically how to setup a project with an iOS app, an Android app and a shared library. I have recently started playing around with Kotlin Multiplatform Project, and it seems quite an interesting project to me. Thus, I will try to document my steps and learning in a series of posts, starting from this one.</p>\n\n<p>Kotlin Multiplatform Project(or KMP from now on) is an experimental feature that allows us to write code in Kotlin and compile/transpile this codebase to multiple platforms including JVM, Android, iOS, Javascript, Desktop apps, etc.</p>\n\n<p>Thanks to <a href=\"https://kotlinlang.org/docs/reference/native-overview.html\">Kotlin native</a>(or K/N), we are able to compile Kotlin code to native binaries, including but not restricted to iOS, meaning that we can write some code in Kotlin which can be used on both the iOS and Android app. Doesn’t it sound interesting?</p>\n\n<p>Quite often while developing an app, we end up in scenarios where we have to write a lot of duplicate or similar code between the iOS and Android app. Usually, it’s related to network requests, the transformation of the data fetched so that they can populate views and/or something else. Generally, it’s the so-called business logic.</p>\n\n<p>And that is the problem that KMP is there to solve. Write this business logic once and share in with multiple targets. And despite the fact that I am focusing more on sharing code between iOS and Android, it doesn’t mean that you are limited to this. In contrast, you can share code between Server and Client, iOS, Android, Javascript, Desktop (macOS, windows, linux), webassembly etc.</p>\n\n<p>Be aware, though, that KMP is still an experimental feature and as per <a href=\"https://kotlinlang.org/docs/reference/building-mpp-with-gradle.html\">Kotlin Reference Page</a></p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Multiplatform projects are an experimental feature in Kotlin 1.2 and 1.3. \nAll of the language and tooling features described in this document are subject to change in future Kotlin versions.\n</code></pre></div></div>\n\n<p>So, be careful and think twice before taking the decision to use it on a real project.</p>\n\n<p>Let’s try to create our first project!!</p>\n\n<h2 id=\"how-to-create-a-project-with-intellij\">How to create a project with IntelliJ</h2>\n\n<p>For this tutorial, I am using IntelliJ IDEA CE 2019.1.3 to create the initial project, Android Studio 3.4.2 and Xcode 10.2.1. Apart from those, I am using Kotlin 1.3.41 and Gradle 5.4.1</p>\n\n<p>To create the initial project:</p>\n<ol>\n  <li>Head to IntelliJ and create a new project.</li>\n  <li>From the option on the left pane, select <code class=\"language-plaintext highlighter-rouge\">Kotlin</code>, then <code class=\"language-plaintext highlighter-rouge\">Mobile Android/iOS | Gradle</code> from the main pane and press <code class=\"language-plaintext highlighter-rouge\">Next</code></li>\n  <li>In the next screen, make sure to have checked the <code class=\"language-plaintext highlighter-rouge\">Use default Gradle wrapper</code> and press <code class=\"language-plaintext highlighter-rouge\">Next</code></li>\n  <li>Then choose a name for your project and press <code class=\"language-plaintext highlighter-rouge\">Next</code>.</li>\n</ol>\n\n<p><img src=\"https://diamantidis.github.io/assets/kmp/intellij_kmp_project.png\" alt=\"IntelliJ KMP projects screenshot\" /></p>\n\n<p>The project is created and it will try to sync Gradle and build. But it will fail with an error saying</p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>The SDK directory '&lt;projectDir&gt;/PleaseSpecifyAndroidSdkPathHere' does not exist.\n\nPlease fix the 'sdk.dir' property in the local.properties file.\n</code></pre></div></div>\n<p>To fix this issue, edit <code class=\"language-plaintext highlighter-rouge\">local.properties</code> which is located on the root directory of the project and add the SDK path (usually located at <code class=\"language-plaintext highlighter-rouge\">/Users/&lt;user&gt;/Library/Android/sdk</code>)</p>\n\n<p>Now, you can head to Android Studio and run the Android app!! If everything is correct, the app will be built successfully and you will see a screen with a message <code class=\"language-plaintext highlighter-rouge\">Hello from Android</code>.</p>\n\n<p>Time to try the iOS app. Let’s open the <code class=\"language-plaintext highlighter-rouge\">iosApp.xcodeproj</code> with Xcode and try to build the app on a Simulator.</p>\n\n<p>It will fail with an error:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>.\n.\n.\n/../gradlew: No such file or directory\nCommand PhaseScriptExecution failed with a nonzero exit code\n</code></pre></div></div>\n\n<p>To fix this issue, run <code class=\"language-plaintext highlighter-rouge\">gradle wrapper</code> on the project root directory, wait until it is finished and then try to build the app again. You should be able to run the app and you will see a screen with a message <code class=\"language-plaintext highlighter-rouge\">Hello from iOS</code>.</p>\n\n<p><img src=\"https://diamantidis.github.io/assets/kmp/android_app.png\" alt=\"Android app screenshot\" />\n<img src=\"https://diamantidis.github.io/assets/kmp/ios_app.png\" alt=\"iOS app screenshot\" /></p>\n\n<p>But, we are not done yet. To run the app on a real iOS device, the app should be signed. Therefore, if you try to run the project on a real iOS device, you will get a error with message:\n<code class=\"language-plaintext highlighter-rouge\">Signing for \"iosApp\" requires a development team. Select a development team in the project editor. (in target 'iosApp')</code></p>\n\n<p>To fix this, go to the project Editor and change the Bundle Identifier and select your Personal Team for the signing.</p>\n\n<p><img src=\"https://diamantidis.github.io/assets/kmp/xcode_signing.png\" alt=\"Xcode project signing screenshot\" /></p>\n\n<p>After applying this fix, when you try to build the app again, a new error will appear, with a message:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Undefined symbols for architecture arm64:\n  \"_OBJC_CLASS_$_AppProxy\", referenced from:\n      objc-class-ref in ViewController.o\nld: symbol(s) not found for architecture arm64\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\n</code></pre></div></div>\n\n<p>The root cause of this issue, can be easily found if you navigate to <code class=\"language-plaintext highlighter-rouge\">app/build.gradle</code>. Inside the <code class=\"language-plaintext highlighter-rouge\">kotlin</code> block, you will notice a comment like <code class=\"language-plaintext highlighter-rouge\">Switch here to iosArm64 (or iosArm32) to build library for iPhone device</code>.</p>\n\n<p><img src=\"https://diamantidis.github.io/assets/kmp/ios_project_block.png\" alt=\"iOS project block screenshot\" /></p>\n\n<p>The existing code is suitable only for the simulator, so if you want to run on an actual device, you have to change <code class=\"language-plaintext highlighter-rouge\">iosX64</code> to <code class=\"language-plaintext highlighter-rouge\">iosArm64</code>. Ideally, we would like to be able to run the app, both on Simulator and on an actual device without having to change that every time.</p>\n\n<p>To do that, remove the whole <code class=\"language-plaintext highlighter-rouge\">iosX64(\"ios\")</code> block and instead put the following script:</p>\n\n<div class=\"language-groovy highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">targets</span> <span class=\"o\">{</span>\n    <span class=\"kd\">final</span> <span class=\"kt\">def</span> <span class=\"n\">iOSTarget</span> <span class=\"o\">=</span> <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">getenv</span><span class=\"o\">(</span><span class=\"s1\">'SDK_NAME'</span><span class=\"o\">)?.</span><span class=\"na\">startsWith</span><span class=\"o\">(</span><span class=\"s2\">\"iphoneos\"</span><span class=\"o\">)</span> <span class=\"err\">\\</span>\n                          <span class=\"o\">?</span> <span class=\"n\">presets</span><span class=\"o\">.</span><span class=\"na\">iosArm64</span> <span class=\"o\">:</span> <span class=\"n\">presets</span><span class=\"o\">.</span><span class=\"na\">iosX64</span>\n\n    <span class=\"n\">fromPreset</span><span class=\"o\">(</span><span class=\"n\">iOSTarget</span><span class=\"o\">,</span> <span class=\"s1\">'ios'</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">binaries</span> <span class=\"o\">{</span>\n            <span class=\"n\">framework</span><span class=\"o\">()</span>\n        <span class=\"o\">}</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<p>Now, try to build the app again. This time, the iOS app will be successfully built both on actual devices and simulators!!!</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>And this is it!! If you are interested, you can find this project on <a href=\"https://github.com/diamantidis/KMP_base\">GitHub</a>. This project, which is created by following these steps, will act as the base for my next posts on KMP. In the next post, I will try to delve deeper on the structure on the initial project and make some tweaks here and there. See you soon!!</p>\n\n",
            "tags": ["iOS","Xcode","IntelliJ","Android","Kotlin","Kotlin Native"],
            "image": "https://diamantidis.github.io/assets/socialIcon.png"
        },
        
        {
            "id": "https://diamantidis.github.io/2019/07/21/xcode-custom-templates",
            "url": "https://diamantidis.github.io/2019/07/21/xcode-custom-templates",
            "title": "A step-by-step guide to create a custom Xcode template",
            "date_published": "2019-07-21T06:00:00+00:00",
            
            "date_modified": "2019-07-21T06:00:00+00:00",
            
            "author": {
                "name": "Ioannis Diamantidis",
                "url": "https://diamantidis.github.io"
            },
            "summary": "<p>For quite a long time I wanted to experiment with the creation of a custom Xcode template and finally the time has come!! In this article, I will try to describe step-by-step the process of creating a custom Xcode template from scratch. For those unfamiliar with the term, Xcode template is something we use quite often. When creating a new file or a new project, Xcode offers a wide variety of template options to choose from.</p>\n\n",
            "content_html": "<p>For quite a long time I wanted to experiment with the creation of a custom Xcode template and finally the time has come!! In this article, I will try to describe step-by-step the process of creating a custom Xcode template from scratch. For those unfamiliar with the term, Xcode template is something we use quite often. When creating a new file or a new project, Xcode offers a wide variety of template options to choose from.</p>\n\n<p>For example, when creating a <code class=\"language-plaintext highlighter-rouge\">Cocoa Touch Class</code>, you select the superclass and the preferred language, be it <code class=\"language-plaintext highlighter-rouge\">Swift</code> or <code class=\"language-plaintext highlighter-rouge\">Objective-C</code>. Based on these choices, a file (or more) will be created. In case of a <code class=\"language-plaintext highlighter-rouge\">UIViewController</code> subclass, the end result will be a file with a subclass of <code class=\"language-plaintext highlighter-rouge\">UIVIewController</code> containing the <code class=\"language-plaintext highlighter-rouge\">viewDidLoad</code> implementation in the selected language. Though, apart from those predefined templates, we are also able to create and add our own custom Xcode templates, or use some custom templates developed by the community.</p>\n\n<h1 id=\"what-is-the-end-result\">What is the end result?</h1>\n\n<p>In my case, what I would like to achieve is to create a template for when I add a new feature/module to an existing project. Depending on the architecture of the project and the team, each feature usually follows some specific conventions regarding the folder structure and the required components. That means that every time a new feature is added, we have to do some manual steps to create the folder structure and the classes. For this article, I am going to use  Coordinators and MVVM, so every new feature adheres to the following folder and naming conventions</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>&lt;MODULE_NAME&gt;\n├── Coordinators\n│   └── &lt;MODULE_NAME&gt;Coordinator.swift\n├── ViewControllers\n│   └── &lt;MODULE_NAME&gt;ViewController.swift\n└── ViewModels\n    └── &lt;MODULE_NAME&gt;ViewModel.swift\n\n</code></pre></div></div>\n\n<p>And this is what I would like to achieve. An Xcode custom template that will create the above-mentioned structure and add all the boilerplate code for the instantiation of each component.</p>\n\n<h1 id=\"how-do-i-start\">How do I start?</h1>\n\n<p>A way to start is by taking a look at the existing file templates. You can find all the default Xcode templates inside the directory:</p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/Library/Xcode/Templates/\n</code></pre></div></div>\n\n<p>Navigating through this directory, you can find a bunch of templates. For instance, the Cocoa Touch Class template is located under <code class=\"language-plaintext highlighter-rouge\">File Templates</code> &gt; <code class=\"language-plaintext highlighter-rouge\">Source</code> &gt; <code class=\"language-plaintext highlighter-rouge\">Cocoa Touch Class.xctemplate</code>. There, you can find all the template files for all the possible options that you have when creating a Cocoa Touch Class from Xcode.</p>\n\n<p>But, if you want to add your own custom template, this directory is not the proper one. Instead, use</p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>~/Library/Developer/Xcode/Templates/\n</code></pre></div></div>\n\n<p>This folder contains two sub-folders: <code class=\"language-plaintext highlighter-rouge\">File Templates</code> and <code class=\"language-plaintext highlighter-rouge\">Project Templates</code>. The first one is for the templates that are meant to be used on an existing project, and is the location where we are going to place our template, whereas <code class=\"language-plaintext highlighter-rouge\">Project Templates</code> is the location for templates used when creating an entirely new project.</p>\n\n<p>So, now we are ready to start building our own template!!</p>\n\n<h1 id=\"preparation\">Preparation</h1>\n\n<p>To start with, let’s create a folder inside this directory, that will eventually contain the template files. The folder should have an <code class=\"language-plaintext highlighter-rouge\">.xctemplate</code> extension. For example, I use <code class=\"language-plaintext highlighter-rouge\">IDModule.xctemplate</code>. For a template to be visible on Xcode it is required to have three files, the <code class=\"language-plaintext highlighter-rouge\">TemplateInfo.plist</code>, <code class=\"language-plaintext highlighter-rouge\">TemplateIcon.png</code> and <code class=\"language-plaintext highlighter-rouge\">TemplateIcon@2x.png</code>.</p>\n\n<p>The <code class=\"language-plaintext highlighter-rouge\">TemplateIcon.img</code> is a 48x48 image whereas the <code class=\"language-plaintext highlighter-rouge\">TemplateIcon@2x.png</code> is a 96x96 image and are the thumbnails that will be presented in the template selection window on Xcode.</p>\n\n<p>The <code class=\"language-plaintext highlighter-rouge\">TemplateInfo.plist</code> will contain the configuration of the template and for my case it will look like this (the actual file can be found on <a href=\"https://gist.github.com/diamantidis/be9f31b35d301fa97c5f3531adde86c3#file-templateinfo-plist\">this gist</a>).</p>\n\n<p><img src=\"https://diamantidis.github.io/assets/xcode_templates/templateInfo_plist.png\" alt=\"Xcode custom template TemplateInfo.plist screenshot\" /></p>\n\n<p>As you can see, it contains three keys: <code class=\"language-plaintext highlighter-rouge\">Kind</code>, <code class=\"language-plaintext highlighter-rouge\">Platforms</code> and <code class=\"language-plaintext highlighter-rouge\">Options</code>.\nLet’s check each of those one by one.</p>\n\n<p>The first one is the <code class=\"language-plaintext highlighter-rouge\">Kind</code>. It describes the “kind” of the template and here we use the value:</p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Xcode.IDEFoundation.TextSubstitutionFileTemplateKind\n</code></pre></div></div>\n\n<p>The next one is the <code class=\"language-plaintext highlighter-rouge\">Platforms</code> key that describes which platform to target and it’s value is an array. Since our template is only for iOS, we only add one item with value <code class=\"language-plaintext highlighter-rouge\">com.apple.platform.iphoneos</code>.</p>\n\n<p>Lastly is the <code class=\"language-plaintext highlighter-rouge\">Options</code> key which can be used to allow users to customize the template. In our scenario, we would like to get the name of the module from a user input. The value of this key is an array and each of the items is a dictionary with keys like <code class=\"language-plaintext highlighter-rouge\">Description</code>, <code class=\"language-plaintext highlighter-rouge\">Identifier</code>,\n<code class=\"language-plaintext highlighter-rouge\">Name</code>, <code class=\"language-plaintext highlighter-rouge\">Required</code> and <code class=\"language-plaintext highlighter-rouge\">Type</code>. We use <code class=\"language-plaintext highlighter-rouge\">productName</code> as an identifier so that Xcode will know that this is the name of the module and using it will populate some Xcode so-called text macros (<code class=\"language-plaintext highlighter-rouge\">___FILEBASENAME___</code> and <code class=\"language-plaintext highlighter-rouge\">___FILEBASENAMEASIDENTIFIER___</code>) that will later be used to create the directory and the files.</p>\n\n<blockquote>\n  <p>To find more information about the Xcode text macros, refer to the documentation provided by Apple and more specifically to <a href=\"https://help.apple.com/xcode/mac/10.2/#/dev7fe737ce0\">Text macros reference</a> and <a href=\"https://help.apple.com/xcode/mac/10.2/#/devc8a500cb9\">Text macro format</a>.</p>\n</blockquote>\n\n<p>Without further ado, we can now try to create a new template on Xcode and the module will be there but no file will be created yet.</p>\n\n<p><img src=\"https://diamantidis.github.io/assets/xcode_templates/xcode_id_module.png\" alt=\"Xcode ID Module screenshot screenshot\" /></p>\n\n<p>So let’s move on to creating the actual template!!</p>\n\n<h1 id=\"the-template\">The template</h1>\n\n<p>As we mention before, there are some macros that can be used when creating a template. One of those is <code class=\"language-plaintext highlighter-rouge\">___FILEBASENAME___</code>, and it’s value is what we typed on the <code class=\"language-plaintext highlighter-rouge\">productName</code> field when creating the module. To make our template create a folder with the name that we typed on the field, we will create a new folder inside the <code class=\"language-plaintext highlighter-rouge\">IDModule.xctemplate</code> folder, and we will name it <code class=\"language-plaintext highlighter-rouge\">___FILEBASENAME___</code> .</p>\n\n<p>Next, we will create three more folders, named <code class=\"language-plaintext highlighter-rouge\">Coordinators</code>, <code class=\"language-plaintext highlighter-rouge\">ViewControllers</code> and <code class=\"language-plaintext highlighter-rouge\">ViewModels</code> inside the <code class=\"language-plaintext highlighter-rouge\">___FILEBASENAME___</code> folder. Finally, we will create three files named <code class=\"language-plaintext highlighter-rouge\">___FILEBASENAME___Coordinator.swift</code>, <code class=\"language-plaintext highlighter-rouge\">___FILEBASENAME___ViewController.swift</code> and  <code class=\"language-plaintext highlighter-rouge\">___FILEBASENAME___ViewModel.swift</code> inside <code class=\"language-plaintext highlighter-rouge\">Coordinators</code>, <code class=\"language-plaintext highlighter-rouge\">ViewControllers</code> and <code class=\"language-plaintext highlighter-rouge\">ViewModels</code> folders respectively.</p>\n\n<p>The final structure of the <code class=\"language-plaintext highlighter-rouge\">IDModule.xctemplate</code> folder will be something like this:</p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>.\n├── TemplateIcon.png\n├── TemplateIcon@2x.png\n├── TemplateInfo.plist\n└── ___FILEBASENAME___\n    ├── Coordinators\n    │   └── ___FILEBASENAME___Coordinator.swift\n    ├── ViewControllers\n    │   └── ___FILEBASENAME___ViewController.swift\n    └── ViewModels\n        └── ___FILEBASENAME___ViewModel.swift\n</code></pre></div></div>\n\n<p>Until now, we have created the folder structure and the files. Let’s now move to the contents of each of those files.</p>\n\n<p>For the files, we are going to use a few more text macros like <code class=\"language-plaintext highlighter-rouge\">___FILEHEADER___</code>, <code class=\"language-plaintext highlighter-rouge\">___FILEBASENAMEASIDENTIFIER___</code> and <code class=\"language-plaintext highlighter-rouge\">___VARIABLE_productName:identifier___</code> that will allow us to set the file header and the proper name for each class, struct and variable in the files.</p>\n\n<h5 id=\"___filebasename___coordinatorswift\"><strong><code class=\"language-plaintext highlighter-rouge\">___FILEBASENAME___Coordinator.swift</code></strong></h5>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">//___FILEHEADER___</span>\n<span class=\"kd\">import</span> <span class=\"kt\">Foundation</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">___FILEBASENAMEASIDENTIFIER___</span> <span class=\"p\">{</span>\n\n    <span class=\"kd\">func</span> <span class=\"nf\">start</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n\n    <span class=\"p\">}</span>\n\n    <span class=\"kd\">private</span> <span class=\"kd\">lazy</span> <span class=\"k\">var</span> <span class=\"nv\">viewModel</span><span class=\"p\">:</span> <span class=\"nv\">___VARIABLE_productName</span><span class=\"p\">:</span><span class=\"n\">identifier___ViewModel</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"k\">let</span> <span class=\"nv\">vm</span> <span class=\"o\">=</span> <span class=\"nv\">___VARIABLE_productName</span><span class=\"p\">:</span><span class=\"nf\">identifier___ViewModel</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"n\">vm</span>\n    <span class=\"p\">}()</span>\n\n    <span class=\"kd\">private</span> <span class=\"kd\">lazy</span> <span class=\"k\">var</span> <span class=\"nv\">viewController</span><span class=\"p\">:</span> <span class=\"nv\">___VARIABLE_productName</span><span class=\"p\">:</span><span class=\"n\">identifier___ViewController</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"k\">let</span> <span class=\"nv\">vc</span> <span class=\"o\">=</span> <span class=\"nv\">___VARIABLE_productName</span><span class=\"p\">:</span><span class=\"nf\">identifier___ViewController</span><span class=\"p\">(</span><span class=\"nv\">with</span><span class=\"p\">:</span> <span class=\"n\">viewModel</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">vc</span>\n    <span class=\"p\">}()</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h5 id=\"___filebasename___viewcontrollerswift\"><strong><code class=\"language-plaintext highlighter-rouge\">___FILEBASENAME___ViewController.swift</code></strong></h5>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">//___FILEHEADER___</span>\n<span class=\"kd\">import</span> <span class=\"kt\">UIKit</span>\n\n<span class=\"kd\">class</span> <span class=\"nv\">___FILEBASENAMEASIDENTIFIER___</span><span class=\"p\">:</span> <span class=\"kt\">UIViewController</span> <span class=\"p\">{</span>\n\n    <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"n\">with</span> <span class=\"nv\">viewModel</span><span class=\"p\">:</span> <span class=\"nv\">___VARIABLE_productName</span><span class=\"p\">:</span><span class=\"n\">identifier___ViewModel</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">viewModel</span> <span class=\"o\">=</span> <span class=\"n\">viewModel</span>\n        <span class=\"k\">super</span><span class=\"o\">.</span><span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"nv\">nibName</span><span class=\"p\">:</span> <span class=\"kc\">nil</span><span class=\"p\">,</span> <span class=\"nv\">bundle</span><span class=\"p\">:</span> <span class=\"kc\">nil</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kd\">@available</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"p\">,</span> <span class=\"n\">unavailable</span><span class=\"p\">)</span>\n    <span class=\"kd\">required</span> <span class=\"nf\">init</span><span class=\"p\">?(</span><span class=\"n\">coder</span> <span class=\"nv\">aDecoder</span><span class=\"p\">:</span> <span class=\"kt\">NSCoder</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nf\">fatalError</span><span class=\"p\">(</span><span class=\"s\">\"init(coder:) has not been implemented\"</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">override</span> <span class=\"kd\">func</span> <span class=\"nf\">viewDidLoad</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">super</span><span class=\"o\">.</span><span class=\"nf\">viewDidLoad</span><span class=\"p\">()</span>\n\n        <span class=\"c1\">// Do any additional setup after loading the view.</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kd\">private</span> <span class=\"k\">let</span> <span class=\"nv\">viewModel</span><span class=\"p\">:</span> <span class=\"nv\">___VARIABLE_productName</span><span class=\"p\">:</span><span class=\"n\">identifier___ViewModel</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h5 id=\"___filebasename___viewmodelswift\"><strong><code class=\"language-plaintext highlighter-rouge\">___FILEBASENAME___ViewModel.swift</code></strong></h5>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">//___FILEHEADER___</span>\n<span class=\"kd\">import</span> <span class=\"kt\">Foundation</span>\n\n<span class=\"kd\">struct</span> <span class=\"n\">___FILEBASENAMEASIDENTIFIER___</span><span class=\"p\">{</span>\n\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>One interesting thing to notice is that <code class=\"language-plaintext highlighter-rouge\">___FILEBASENAMEASIDENTIFIER___</code> is re-evaluated based on the context. For example, inside the <code class=\"language-plaintext highlighter-rouge\">___FILEBASENAME___Coordinator.swift</code> the value of <code class=\"language-plaintext highlighter-rouge\">___FILEBASENAME___</code> and <code class=\"language-plaintext highlighter-rouge\">___FILEBASENAMEASIDENTIFIER___</code> will be the actual name of the file including the Coordinator suffix.</p>\n\n<blockquote>\n  <p>All these files and the <code class=\"language-plaintext highlighter-rouge\">TemplateInfo.plist</code> are available on <a href=\"https://gist.github.com/diamantidis/be9f31b35d301fa97c5f3531adde86c3\">a gist</a>.</p>\n</blockquote>\n\n<p>So now it’s time to create a new module on Xcode!! Let’s say we want to add a new Login feature to a new app!! Using the <code class=\"language-plaintext highlighter-rouge\">IDModule</code> template, the output that we will get will be like this:\n<img src=\"https://diamantidis.github.io/assets/xcode_templates/xcode_template_files.png\" alt=\"Xcode Template files screenshot\" /></p>\n\n<h1 id=\"but\">But!!</h1>\n\n<p>Some of you may have already noticed that something is wrong with the folder created. The color signals that it’s not a group and if you try to instantiate the Coordinator from somewhere in the rest of the app, you will be unable to do so.</p>\n\n<p>This is happening because the template creates just a folder and not actually an Xcode group, so all the files inside the module are not members of the app target. Sadly, after some research, it seems that it is not currently possible to create a new group when you use a new file template, only when creating a template for a new project. A quick solution is to create the group from the folder and then delete the reference to the initial folder.</p>\n\n<p>Point to the parent folder, right click and choose “Add files to “…””.</p>\n\n<p><img src=\"https://diamantidis.github.io/assets/xcode_templates/xcode_add_files.png\" alt=\"Xcode Add files to target screenshot\" /></p>\n\n<p>A new window will pop up. There, choose the root folder of your module, and pick “Create groups” for the field “Added folders”. Then press “Add”.</p>\n\n<p><img src=\"https://diamantidis.github.io/assets/xcode_templates/xcode_select_files.png\" alt=\"Xcode Select files screenshot\" /></p>\n\n<p>The new group is created, and now we can safely right click on the old folder of our module, choose “Delete” and pick the option “Remove reference”.</p>\n\n<p>The new module is ready to be used!</p>\n\n<h1 id=\"conclusion\">Conclusion</h1>\n\n<p>To sum up, this article can be used as a guide to create a custom template and presents how easy and straight-forward is to do so. Of course it doesn’t cover all the available options such as adding more fields/options when creating a template and not only the name and based on them to create different file (like the case with <code class=\"language-plaintext highlighter-rouge\">Swift</code> or <code class=\"language-plaintext highlighter-rouge\">Objective-C</code> option) and maybe creating a base template that can be used by many child templates (the case for most of the Xcode predefined templates). In general, Xcode custom templates can be used to ease, in some extend, the process of creating a new file or a new module, eventually resulting in a more efficient way for working since it will remove some time-consuming and not so interesting tasks. And maybe guarantee some consistency amongst team members in the way modules and files are created.</p>\n\n<p>Thanks for reading, I hope you find this post useful!</p>\n\n<p>Feel free to follow me on <a href=\"https://twitter.com/diamantidis_io\">Twitter</a> and let me know what’s your opinion about Xcode templates and whether you are using them in your projects!</p>\n\n",
            "tags": ["iOS","Xcode","Productivity"],
            "image": "https://diamantidis.github.io/assets/socialIcon.png"
        },
        
        {
            "id": "https://diamantidis.github.io/2019/06/30/firebase-remote-config-iOS-implementation",
            "url": "https://diamantidis.github.io/2019/06/30/firebase-remote-config-iOS-implementation",
            "title": "How to use Firebase Remote Config and A/B testing on an iOS app(part II)",
            "date_published": "2019-06-30T06:00:00+00:00",
            
            "date_modified": "2019-06-30T06:00:00+00:00",
            
            "author": {
                "name": "Ioannis Diamantidis",
                "url": "https://diamantidis.github.io"
            },
            "summary": "<p>In the <a href=\"/2019/06/22/firebase-remote-config-ab-testing\">previous article</a>, we described the steps required to set up Firebase Remote Config and A/B testing. So, it is time to proceed with the implementation of a demo app. In this article, I will showcase the process of integrating Firebase Remote Config into an iOS app and I will use the login screen example described in the previous article.</p>\n\n",
            "content_html": "<p>In the <a href=\"/2019/06/22/firebase-remote-config-ab-testing\">previous article</a>, we described the steps required to set up Firebase Remote Config and A/B testing. So, it is time to proceed with the implementation of a demo app. In this article, I will showcase the process of integrating Firebase Remote Config into an iOS app and I will use the login screen example described in the previous article.</p>\n\n<h1 id=\"setup-ios-app\">Setup iOS app</h1>\n\n<p>First thing first, in case you haven’t done that yet, add the following two lines on the Podfile.</p>\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  <span class=\"n\">pod</span> <span class=\"s1\">'Firebase/Core'</span>\n  <span class=\"n\">pod</span> <span class=\"s1\">'Firebase/RemoteConfig'</span>\n</code></pre></div></div>\n\n<p>Then, let’s setup our models. The data used in the <a href=\"/2019/06/22/firebase-remote-config-ab-testing\">previous article</a> is as the following:</p>\n<div class=\"language-json highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"nl\">\"label\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"nl\">\"text\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"Welcome to Remote Config Demo\"</span><span class=\"w\">\n  </span><span class=\"p\">},</span><span class=\"w\">\n  </span><span class=\"nl\">\"button\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"nl\">\"text\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"Continue\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"nl\">\"color\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n      </span><span class=\"nl\">\"red\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">50</span><span class=\"p\">,</span><span class=\"w\">\n      </span><span class=\"nl\">\"green\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">205</span><span class=\"p\">,</span><span class=\"w\">\n      </span><span class=\"nl\">\"blue\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">50</span><span class=\"w\">\n    </span><span class=\"p\">}</span><span class=\"w\">\n  </span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<p>Our goal is to map this JSON to a Swift struct and then use this struct when manipulating the user interface. Firebase Config data can be mapped as String, Number, Boolean. In our case, since the expected data is a JSON, it would be nice if we can get the data as <code class=\"language-plaintext highlighter-rouge\">NSData</code> and then using <code class=\"language-plaintext highlighter-rouge\">Codable</code> protocol to decode it.</p>\n\n<p>So, based on the JSON value, we define 4 structs.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">struct</span> <span class=\"kt\">LabelConfig</span><span class=\"p\">:</span> <span class=\"kt\">Codable</span> <span class=\"p\">{</span>\n    <span class=\"k\">var</span> <span class=\"nv\">text</span><span class=\"p\">:</span> <span class=\"kt\">String</span>\n<span class=\"p\">}</span>\n<span class=\"kd\">struct</span> <span class=\"kt\">ButtonConfig</span><span class=\"p\">:</span> <span class=\"kt\">Codable</span> <span class=\"p\">{</span>\n    <span class=\"k\">var</span> <span class=\"nv\">text</span><span class=\"p\">:</span> <span class=\"kt\">String</span>\n    <span class=\"k\">var</span> <span class=\"nv\">color</span><span class=\"p\">:</span> <span class=\"kt\">ColorConfig</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">struct</span> <span class=\"kt\">ColorConfig</span><span class=\"p\">:</span> <span class=\"kt\">Codable</span> <span class=\"p\">{</span>\n    <span class=\"k\">var</span> <span class=\"nv\">red</span><span class=\"p\">:</span> <span class=\"kt\">Int</span>\n    <span class=\"k\">var</span> <span class=\"nv\">green</span><span class=\"p\">:</span> <span class=\"kt\">Int</span>\n    <span class=\"k\">var</span> <span class=\"nv\">blue</span><span class=\"p\">:</span> <span class=\"kt\">Int</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">struct</span> <span class=\"kt\">ScreenConfig</span><span class=\"p\">:</span> <span class=\"kt\">Codable</span> <span class=\"p\">{</span>\n    <span class=\"k\">var</span> <span class=\"nv\">label</span><span class=\"p\">:</span> <span class=\"kt\">LabelConfig</span>\n    <span class=\"k\">var</span> <span class=\"nv\">button</span><span class=\"p\">:</span> <span class=\"kt\">ButtonConfig</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Then, let’s create an enum with all the possible parameter keys that are set up on the Firebase Config. Currently, there is only the login option, but there can be potentially more.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">enum</span> <span class=\"kt\">RemoteConfigParameters</span><span class=\"p\">:</span> <span class=\"kt\">String</span><span class=\"p\">,</span> <span class=\"kt\">CaseIterable</span> <span class=\"p\">{</span>\n    <span class=\"k\">case</span> <span class=\"n\">login</span> <span class=\"o\">=</span> <span class=\"s\">\"login_screen\"</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Continuing, we will need an extension on this enum to get the value for each option. Using extensions is a nice way to provide a user-friendly interface and at the same time stay consistent with the separation of concerns. This extension provides a helper function to convert the data fetched from remotely to a codable type. And the property <code class=\"language-plaintext highlighter-rouge\">value</code> takes advantage of this helper to map the parameter key to a codable model. In our case, <code class=\"language-plaintext highlighter-rouge\">login_screen</code> will decode the data to <code class=\"language-plaintext highlighter-rouge\">ScreenConfig</code>.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">extension</span> <span class=\"kt\">RemoteConfigParameters</span> <span class=\"p\">{</span>\n\n    <span class=\"k\">var</span> <span class=\"nv\">value</span><span class=\"p\">:</span> <span class=\"kt\">Codable</span><span class=\"p\">?</span> <span class=\"p\">{</span>\n        <span class=\"k\">switch</span> <span class=\"k\">self</span> <span class=\"p\">{</span>\n        <span class=\"k\">case</span> <span class=\"o\">.</span><span class=\"nv\">login</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"k\">try</span><span class=\"p\">?</span> <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"nf\">toCodable</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"nf\">get</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"kt\">ScreenConfig</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kd\">private</span> <span class=\"kd\">func</span> <span class=\"n\">toCodable</span><span class=\"o\">&lt;</span><span class=\"kt\">T</span><span class=\"p\">:</span> <span class=\"kt\">Codable</span><span class=\"o\">&gt;</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Result</span><span class=\"o\">&lt;</span><span class=\"kt\">T</span><span class=\"p\">,</span> <span class=\"kt\">Error</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n        <span class=\"k\">let</span> <span class=\"nv\">data</span> <span class=\"o\">=</span> <span class=\"kt\">RemoteConfig</span><span class=\"o\">.</span><span class=\"nf\">remoteConfig</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"nf\">configValue</span><span class=\"p\">(</span><span class=\"nv\">forKey</span><span class=\"p\">:</span> <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">rawValue</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">dataValue</span>\n         <span class=\"k\">return</span> <span class=\"kt\">Result</span> <span class=\"p\">{</span> <span class=\"k\">try</span> <span class=\"kt\">JSONDecoder</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"nf\">decode</span><span class=\"p\">(</span><span class=\"kt\">T</span><span class=\"o\">.</span><span class=\"k\">self</span><span class=\"p\">,</span> <span class=\"nv\">from</span><span class=\"p\">:</span> <span class=\"n\">data</span><span class=\"p\">)</span> <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Because the data is fetched over the wire, a lot of things can go wrong. For this reason, and since we want the app to still function regardless of the availability of the Remote Config data, default values should be provided for every parameter key that we are using. These values will act as a lifeguard in case something goes wrong. \nIn order to do so, another extension, that will provide a defaultValue property, is added to <code class=\"language-plaintext highlighter-rouge\">RemoteConfigParameters</code>.</p>\n\n<p>This is also another “nice” use of enums combined with switch statements. On a potential scenario of adding a new parameter key, you will not have to remember to add a default value. The compiler will do it for you, by providing a graceful warning stating that “Switch must be exhaustive” :P.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">extension</span> <span class=\"kt\">RemoteConfigParameters</span> <span class=\"p\">{</span>\n    <span class=\"k\">var</span> <span class=\"nv\">defaultValue</span><span class=\"p\">:</span> <span class=\"kt\">Data</span> <span class=\"p\">{</span>\n        <span class=\"k\">switch</span> <span class=\"k\">self</span> <span class=\"p\">{</span>\n        <span class=\"k\">case</span> <span class=\"o\">.</span><span class=\"nv\">login</span><span class=\"p\">:</span>\n            <span class=\"k\">let</span> <span class=\"nv\">config</span> <span class=\"o\">=</span> <span class=\"kt\">ScreenConfig</span><span class=\"p\">(</span>\n                <span class=\"nv\">label</span><span class=\"p\">:</span> <span class=\"kt\">LabelConfig</span><span class=\"p\">(</span>\n                    <span class=\"nv\">text</span><span class=\"p\">:</span> <span class=\"s\">\"Welcome to Remote Config Demo (default)\"</span>\n                <span class=\"p\">),</span>\n                <span class=\"nv\">button</span><span class=\"p\">:</span> <span class=\"kt\">ButtonConfig</span><span class=\"p\">(</span>\n                    <span class=\"nv\">text</span><span class=\"p\">:</span> <span class=\"s\">\"Continue (default)\"</span><span class=\"p\">,</span>\n                    <span class=\"nv\">color</span><span class=\"p\">:</span> <span class=\"kt\">ColorConfig</span><span class=\"p\">(</span><span class=\"nv\">red</span><span class=\"p\">:</span> <span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"nv\">green</span><span class=\"p\">:</span> <span class=\"mi\">206</span><span class=\"p\">,</span> <span class=\"nv\">blue</span><span class=\"p\">:</span> <span class=\"mi\">50</span><span class=\"p\">)</span>\n                <span class=\"p\">)</span>\n            <span class=\"p\">)</span>\n\n            <span class=\"k\">return</span> <span class=\"k\">try!</span> <span class=\"kt\">JSONEncoder</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"nf\">encode</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">)</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Now, that everything is ready, it is time to fetch the remote data. Since fetching is asynchronous, it would be nice if the UI can reflect the state of the fetching. An enum named <code class=\"language-plaintext highlighter-rouge\">RemoteConfigState</code> will be used for this reason, and it will define the possible states.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">enum</span> <span class=\"kt\">RemoteConfigState</span> <span class=\"p\">{</span>\n    <span class=\"k\">case</span> <span class=\"n\">loading</span>\n    <span class=\"k\">case</span> <span class=\"n\">loaded</span>\n    <span class=\"k\">case</span> <span class=\"n\">error</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Then, to fetch the Remote Value, a new enum named <code class=\"language-plaintext highlighter-rouge\">RemoteConfigFetcher</code> is added.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">enum</span> <span class=\"kt\">RemoteConfigFetcher</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// 1</span>\n    <span class=\"kd\">static</span> <span class=\"kd\">private(set)</span> <span class=\"k\">var</span> <span class=\"nv\">state</span><span class=\"p\">:</span> <span class=\"kt\">RemoteConfigState</span><span class=\"p\">?</span> <span class=\"o\">=</span> <span class=\"kc\">nil</span>\n    <span class=\"c1\">// 2</span>\n    <span class=\"kd\">static</span> <span class=\"k\">var</span> <span class=\"nv\">finishCallback</span><span class=\"p\">:</span> <span class=\"p\">(()</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Void</span><span class=\"p\">)?</span> <span class=\"o\">=</span> <span class=\"kc\">nil</span>\n\n    <span class=\"c1\">// 3</span>\n    <span class=\"kd\">static</span> <span class=\"kd\">func</span> <span class=\"nf\">fetch</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"nf\">setDefaultValues</span><span class=\"p\">()</span>\n        <span class=\"kt\">DispatchQueue</span><span class=\"o\">.</span><span class=\"nf\">global</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">async</span> <span class=\"p\">{</span>\n            <span class=\"nf\">fetchRemoteValues</span><span class=\"p\">()</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\">// 4</span>\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kd\">func</span> <span class=\"nf\">setDefaultValues</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n\n        <span class=\"k\">let</span> <span class=\"nv\">appDefaults</span> <span class=\"o\">=</span> <span class=\"kt\">RemoteConfigParameters</span><span class=\"o\">.</span><span class=\"n\">allCases</span><span class=\"o\">.</span><span class=\"nf\">reduce</span><span class=\"p\">([</span><span class=\"kt\">String</span><span class=\"p\">:</span> <span class=\"kt\">NSObject</span><span class=\"p\">]())</span> <span class=\"p\">{</span> <span class=\"p\">(</span><span class=\"n\">dict</span><span class=\"p\">,</span> <span class=\"n\">param</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"p\">[</span><span class=\"kt\">String</span><span class=\"p\">:</span> <span class=\"kt\">NSObject</span><span class=\"p\">]</span> <span class=\"k\">in</span>\n            <span class=\"k\">var</span> <span class=\"nv\">dict</span> <span class=\"o\">=</span> <span class=\"n\">dict</span>\n            <span class=\"n\">dict</span><span class=\"p\">[</span><span class=\"n\">param</span><span class=\"o\">.</span><span class=\"n\">rawValue</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">param</span><span class=\"o\">.</span><span class=\"n\">defaultValue</span> <span class=\"k\">as</span> <span class=\"kt\">NSObject</span>\n            <span class=\"k\">return</span> <span class=\"n\">dict</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"kt\">RemoteConfig</span><span class=\"o\">.</span><span class=\"nf\">remoteConfig</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"nf\">setDefaults</span><span class=\"p\">(</span><span class=\"n\">appDefaults</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\">// 5</span>\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kd\">func</span> <span class=\"nf\">fetchRemoteValues</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n\n        <span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"o\">.</span><span class=\"n\">loading</span>\n        <span class=\"cp\">#warning(\"Only set expirationDuration to 0 in debug mode.\")</span>\n        <span class=\"k\">let</span> <span class=\"nv\">expirationDuration</span><span class=\"p\">:</span> <span class=\"kt\">TimeInterval</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"kt\">RemoteConfig</span><span class=\"o\">.</span><span class=\"nf\">remoteConfig</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"nf\">fetch</span><span class=\"p\">(</span><span class=\"nv\">withExpirationDuration</span><span class=\"p\">:</span> <span class=\"n\">expirationDuration</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"p\">(</span><span class=\"n\">status</span><span class=\"p\">,</span> <span class=\"n\">error</span><span class=\"p\">)</span> <span class=\"k\">in</span>\n            <span class=\"k\">defer</span> <span class=\"p\">{</span>\n                <span class=\"nf\">finishCallback</span><span class=\"p\">?()</span>\n            <span class=\"p\">}</span>\n            <span class=\"k\">guard</span> <span class=\"n\">error</span> <span class=\"o\">==</span> <span class=\"kc\">nil</span><span class=\"p\">,</span> <span class=\"n\">status</span> <span class=\"o\">==</span> <span class=\"o\">.</span><span class=\"n\">success</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n                <span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"o\">.</span><span class=\"n\">error</span>\n                <span class=\"k\">return</span>\n            <span class=\"p\">}</span>\n            <span class=\"kt\">RemoteConfig</span><span class=\"o\">.</span><span class=\"nf\">remoteConfig</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"nf\">activateFetched</span><span class=\"p\">()</span>\n            <span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"o\">.</span><span class=\"n\">loaded</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>To explain in a little more details what this enum is doing, I added some numbers in the comments.</p>\n\n<ol>\n  <li>a <code class=\"language-plaintext highlighter-rouge\">private(set)</code> property to keep the state of the request. It will later be used to render the right screen based on the state of the fetching.</li>\n  <li>a callback that will be used to inform the caller when fetching is finished.</li>\n  <li>the public function that will start the process of fetching the Remote Config data. First, it calls the function to set the default values and then calls the function to fetch the Remote Config data.</li>\n  <li>a function to set Remote Config default’s values. It basically transforms all the cases of <code class=\"language-plaintext highlighter-rouge\">RemoteConfigParameters</code> to defaults parameters for RemoteConfig, using the function previously described to provide default values for each case.</li>\n  <li>the main function, which triggers the remote fetch. On the callback, <code class=\"language-plaintext highlighter-rouge\">defer</code> is used to trigger the finishcallback when everything is set up, and then there is a control statement to check if there is an error or not. According to that, the <code class=\"language-plaintext highlighter-rouge\">state</code> property is change to reflect the response.</li>\n</ol>\n\n<p>That’s it all we need to do to fetch the values from Firebase. Now it is time to see how we will use this enum in our app.</p>\n\n<p>Let’s move to the <code class=\"language-plaintext highlighter-rouge\">AppDelegate</code> and particularly in the <code class=\"language-plaintext highlighter-rouge\">didFinishLaunchingWithOptions</code> function. Two lines will be added to configure <code class=\"language-plaintext highlighter-rouge\">Firebase</code> and to trigger the <code class=\"language-plaintext highlighter-rouge\">RemoteConfigFetcher</code> to fetch the values.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"o\">.</span>\n<span class=\"o\">.</span>\n    <span class=\"kd\">func</span> <span class=\"nf\">application</span><span class=\"p\">(</span><span class=\"n\">_</span> <span class=\"nv\">application</span><span class=\"p\">:</span> <span class=\"kt\">UIApplication</span><span class=\"p\">,</span> <span class=\"n\">didFinishLaunchingWithOptions</span> <span class=\"nv\">launchOptions</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">UIApplication</span><span class=\"o\">.</span><span class=\"kt\">LaunchOptionsKey</span><span class=\"p\">:</span> <span class=\"kt\">Any</span><span class=\"p\">]?)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">Bool</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// Override point for customization after application launch.</span>\n\n        <span class=\"kt\">FirebaseApp</span><span class=\"o\">.</span><span class=\"nf\">configure</span><span class=\"p\">()</span>\n        <span class=\"kt\">RemoteConfigFetcher</span><span class=\"o\">.</span><span class=\"nf\">fetch</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"kc\">true</span>\n    <span class=\"p\">}</span>\n\n<span class=\"o\">.</span>\n<span class=\"o\">.</span>\n</code></pre></div></div>\n\n<p>Then, let’s move to the ViewController.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>\n<span class=\"kd\">import</span> <span class=\"kt\">UIKit</span>\n\n<span class=\"kd\">class</span> <span class=\"kt\">ViewController</span><span class=\"p\">:</span> <span class=\"kt\">UIViewController</span> <span class=\"p\">{</span>\n\n    <span class=\"k\">override</span> <span class=\"kd\">func</span> <span class=\"nf\">viewDidLoad</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">super</span><span class=\"o\">.</span><span class=\"nf\">viewDidLoad</span><span class=\"p\">()</span>\n\n        <span class=\"nf\">renderScreen</span><span class=\"p\">()</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kd\">private</span> <span class=\"kd\">func</span> <span class=\"nf\">renderScreen</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n\n        <span class=\"k\">if</span> <span class=\"kt\">RemoteConfigFetcher</span><span class=\"o\">.</span><span class=\"n\">state</span> <span class=\"o\">==</span> <span class=\"o\">.</span><span class=\"n\">loaded</span> <span class=\"p\">{</span>\n            <span class=\"nf\">showScreen</span><span class=\"p\">()</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"kt\">RemoteConfigFetcher</span><span class=\"o\">.</span><span class=\"n\">state</span> <span class=\"o\">==</span> <span class=\"o\">.</span><span class=\"n\">error</span> <span class=\"p\">{</span>\n            <span class=\"nf\">showError</span><span class=\"p\">()</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"nf\">showLoadingView</span><span class=\"p\">()</span>\n            <span class=\"kt\">RemoteConfigFetcher</span><span class=\"o\">.</span><span class=\"n\">finishCallback</span> <span class=\"o\">=</span> <span class=\"n\">renderScreen</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kd\">private</span> <span class=\"kd\">func</span> <span class=\"nf\">showLoadingView</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"n\">label</span><span class=\"o\">.</span><span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"s\">\"Loading...\"</span>\n        <span class=\"n\">button</span><span class=\"o\">.</span><span class=\"n\">isHidden</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kd\">private</span> <span class=\"kd\">func</span> <span class=\"nf\">showError</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"n\">label</span><span class=\"o\">.</span><span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"s\">\"An error happened\"</span>\n        <span class=\"n\">button</span><span class=\"o\">.</span><span class=\"n\">isHidden</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kd\">private</span> <span class=\"kd\">func</span> <span class=\"nf\">showScreen</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n\n        <span class=\"k\">guard</span> <span class=\"k\">let</span> <span class=\"nv\">config</span> <span class=\"o\">=</span> <span class=\"kt\">RemoteConfigParameters</span><span class=\"o\">.</span><span class=\"n\">login</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"k\">as?</span> <span class=\"kt\">ScreenConfig</span> <span class=\"k\">else</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"p\">}</span>\n        <span class=\"n\">label</span><span class=\"o\">.</span><span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">label</span><span class=\"o\">.</span><span class=\"n\">text</span>\n        <span class=\"n\">button</span><span class=\"o\">.</span><span class=\"nf\">setTitle</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">button</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"nv\">for</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">normal</span><span class=\"p\">)</span>\n        <span class=\"n\">button</span><span class=\"o\">.</span><span class=\"n\">tintColor</span> <span class=\"o\">=</span> <span class=\"kt\">UIColor</span><span class=\"p\">(</span>\n            <span class=\"nv\">red</span><span class=\"p\">:</span> <span class=\"kt\">CGFloat</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">button</span><span class=\"o\">.</span><span class=\"n\">color</span><span class=\"o\">.</span><span class=\"n\">red</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mf\">255.0</span><span class=\"p\">,</span>\n            <span class=\"nv\">green</span><span class=\"p\">:</span> <span class=\"kt\">CGFloat</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">button</span><span class=\"o\">.</span><span class=\"n\">color</span><span class=\"o\">.</span><span class=\"n\">green</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mf\">255.0</span><span class=\"p\">,</span>\n            <span class=\"nv\">blue</span><span class=\"p\">:</span> <span class=\"kt\">CGFloat</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">button</span><span class=\"o\">.</span><span class=\"n\">color</span><span class=\"o\">.</span><span class=\"n\">blue</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mf\">255.0</span><span class=\"p\">,</span>\n            <span class=\"nv\">alpha</span><span class=\"p\">:</span> <span class=\"mi\">1</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">button</span><span class=\"o\">.</span><span class=\"n\">isHidden</span> <span class=\"o\">=</span> <span class=\"kc\">false</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kd\">@IBOutlet</span> <span class=\"k\">weak</span> <span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">button</span><span class=\"p\">:</span> <span class=\"kt\">UIButton</span><span class=\"o\">!</span>\n    <span class=\"kd\">@IBOutlet</span> <span class=\"k\">weak</span> <span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">label</span><span class=\"p\">:</span> <span class=\"kt\">UILabel</span><span class=\"o\">!</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Here, we make use of the <code class=\"language-plaintext highlighter-rouge\">state</code> property to reflect it in to the UI. If the request is not finished, we show a label stating that it is loading. In case of an error, a corresponding screen is shown. When the data is fetched successfully, using the extension of <code class=\"language-plaintext highlighter-rouge\">RemoteConfigParameters</code>, we get the data and adjust the UI components according to it.</p>\n\n<h1 id=\"conclusion\">Conclusion</h1>\n\n<p>And that’s it, now the app will look like this!!</p>\n\n<video controls=\"\" autoplay=\"\" width=\"320\" height=\"560\">\n  <source src=\"https://diamantidis.github.io/assets/firebase/firebase_app_video.mp4\" type=\"video/mp4\" />\n      Your browser does not support the video tag.\n</video>\n\n<p>And not only that, but, having Firebase Remote Config set up, you also get A/B testing!!</p>\n\n<p><img src=\"https://diamantidis.github.io/assets/firebase/firebase_ab_variantB.png\" alt=\"Remote A/B app with variant B screenshot\" /></p>\n\n<p>In a handful of steps we manage to integrate an iOS app with Firebase Remote Config and A/B testing using the login screen as an example. This enable us to control remotely some aspects of the user interface and at the same time experiment with the texts. \nI hope you find it useful and let me know if you have any questions!!</p>\n",
            "tags": ["iOS","Swift","Firebase","Remote Config","A/B testing"],
            "image": "https://diamantidis.github.io/assets/socialIcon.png"
        },
        
        {
            "id": "https://diamantidis.github.io/2019/06/22/firebase-remote-config-ab-testing",
            "url": "https://diamantidis.github.io/2019/06/22/firebase-remote-config-ab-testing",
            "title": "How to use Firebase Remote Config and A/B testing on an iOS app(part I)",
            "date_published": "2019-06-22T06:00:00+00:00",
            
            "date_modified": "2019-06-22T06:00:00+00:00",
            
            "author": {
                "name": "Ioannis Diamantidis",
                "url": "https://diamantidis.github.io"
            },
            "summary": "<p>This article is part of a series on how to setup and integrate Firebase Remote Config and A/B testing on an iOS app. To illustrate and describe the process, I will use a somewhat easy but potentially useful example; this of a login’s screen aesthetics. The main focus of this particular article is on how to setup Firebase Remote Config and A/B testing on Firebase Console, so that you can later use them on the app. Let’s start with what is Firebase Remote Config</p>\n\n",
            "content_html": "<p>This article is part of a series on how to setup and integrate Firebase Remote Config and A/B testing on an iOS app. To illustrate and describe the process, I will use a somewhat easy but potentially useful example; this of a login’s screen aesthetics. The main focus of this particular article is on how to setup Firebase Remote Config and A/B testing on Firebase Console, so that you can later use them on the app. Let’s start with what is Firebase Remote Config</p>\n\n<h1 id=\"remote-config\">Remote Config</h1>\n<p>Remote Config is a Firebase feature that enables us to configure the app from the Firebase console. \nThat means that this configuration, and therefore the app, can be changed on the fly without having to make any update on the app or go through the whole release process.</p>\n\n<p>Remote config can be used to address a wide variety of use cases, such as changing color palette, updating copy or using in as a kill switch to enable and disable features. Imagination is the only limit!! The principles and the steps needed to setup Remote Config are more or less the same regardless of the complexity of the use case.</p>\n\n<p>Of course, in order to be able to take advantage of this feature, some preparation must be done beforehand. The app should be able to fetch this configuration, transform it to the expected structure and act accordingly based on this value.</p>\n\n<p>So, let’s dive in!!</p>\n\n<h1 id=\"setup-firebase-console-account\">Setup Firebase Console account</h1>\n<p>First thing first, we have to setup a Firebase project in Firebase Console. Google has done an amazing job both on the documentation and the on-boarding process with a step by step guide and clean instructions. The documentation can be found <a href=\"https://firebase.google.com/docs/ios/setup\">here</a> and to start a new project just head to the <a href=\"https://firebase.google.com/\">main page</a>, press the <code class=\"language-plaintext highlighter-rouge\">Get Started</code> button and follow the steps.</p>\n\n<h1 id=\"setup-remote-config\">Setup Remote Config</h1>\n\n<p>Now that you have Firebase set up, it’s time to move to how to setup Remote Config. On the navigation pane, that appears on the left side of the Firebase Console, expand the option <code class=\"language-plaintext highlighter-rouge\">Grow</code> and choose <code class=\"language-plaintext highlighter-rouge\">Remote Config</code>.</p>\n\n<p><img src=\"https://diamantidis.github.io/assets/firebase/firebase_left_pane.png\" alt=\"Remote Config menu option screenshot\" />\n<img src=\"https://diamantidis.github.io/assets/firebase/remote_config_initial.png\" alt=\"Remote Config initial screen screenshot\" /></p>\n\n<p>Then, add a parameter key, a description and a value, like in the following screenshot.</p>\n\n<p><img src=\"https://diamantidis.github.io/assets/firebase/remote_config_values.png\" alt=\"Remote Config with values screenshot\" /></p>\n\n<p>Regarding the value, a JSON editor can be used to add a JSON value. To do so, press the button with the two brackets on the right side of the value and the JSON editor will pop up. Now you can enter the value here. In my scenario, I have added a JSON that will contain the values to manipulate a login screen that contains a label and a button.</p>\n\n<p><img src=\"https://diamantidis.github.io/assets/firebase/remote_config_json_editor.png\" alt=\"Remote Config with values screenshot\" /></p>\n\n<p>Press <code class=\"language-plaintext highlighter-rouge\">Save</code> on the popup of the JSON editor, <code class=\"language-plaintext highlighter-rouge\">Update</code> on the bottom right corner and last but not least, press <code class=\"language-plaintext highlighter-rouge\">Publish changes</code> on the top right corner of the screen. (that’s usually the step that it’s easy to forget :smirk:)</p>\n\n<p><img src=\"https://diamantidis.github.io/assets/firebase/firebase_config_publish.png\" alt=\"Remote Config publish screenshot\" /></p>\n\n<p>That’s it everything you need to do on Firebase Console to setup Remote Config.</p>\n\n<p>Even if Remote Config alone is a nice feature that can be used in a plethora of scenarios, combined with A/B Testing is becoming a powerful weapon.</p>\n\n<p>So, let’s move on to A/B testing!!</p>\n\n<h1 id=\"ab-testing\">A/B Testing</h1>\n\n<p>A/B testing is yet another Firebase feature to, well, do A/B testing :stuck_out_tongue:.</p>\n\n<p>It is still in beta, and it currently supports two possible ways to experiment, either by notification or by applying different Remote Config to segments.</p>\n\n<p>For example, let’s say that we want to experiment with the tone of the message on the login screen and see how it affects the press of the login button. To do so, let’s go back to the Firebase Console.</p>\n\n<p>The creation of an experiment is straightforward. Again, go to the left side navigation pane, but this time press the option <code class=\"language-plaintext highlighter-rouge\">A/B testing</code> and then the button <code class=\"language-plaintext highlighter-rouge\">Create experiment</code>. Then, two options will be presented. Select the <code class=\"language-plaintext highlighter-rouge\">Remote Config</code>.</p>\n\n<p><img src=\"https://diamantidis.github.io/assets/firebase/firebase_ab_initial.png\" alt=\"Remote A/B testing initial screenshot\" />\n<img src=\"https://diamantidis.github.io/assets/firebase/firebase_ab_options.png\" alt=\"Remote A/B testing options screenshot\" /></p>\n\n<p>Firstly you set the basic info like the name and the description.</p>\n\n<p><img src=\"https://diamantidis.github.io/assets/firebase/firebase_ab_basic.png\" alt=\"Remote A/B testing basic screenshot\" /></p>\n\n<p>Then, you select the targeting. This can be, for example, only one version of the app, or users with a specific language. There is also the option to choose the percentage out of those, that you want to participate in the experiment.</p>\n\n<p><img src=\"https://diamantidis.github.io/assets/firebase/firebase_ab_targeting.png\" alt=\"Remote A/B testing targeting screenshot\" /></p>\n\n<p>After that, it’s the goals. Here you set the metric with which the different groups are going to get compared. It can be an event, like the press of a button, retention, crash free users, etc etc.</p>\n\n<p><img src=\"https://diamantidis.github.io/assets/firebase/firebase_ab_goals.png\" alt=\"Remote A/B testing goals screenshot\" /></p>\n\n<p>And then, you decide the different variants. Each variant represents a different set of configuration for the user. There is also the possibility to filter each variant to a subset of users by pressing the according button. So in our case, if we want to make an experiment with the tone of the message on the login screen, we will add two variants, besides the control group which will be the default. For example, the first one may be a text with a more direct tone and the other one with a more passive tone.</p>\n\n<p><img src=\"https://diamantidis.github.io/assets/firebase/firebase_ab_variants.png\" alt=\"Remote A/B testing variants screenshot\" /></p>\n\n<p>After pressing the <code class=\"language-plaintext highlighter-rouge\">Review</code> button on the bottom right corner, you will redirected to an overview screen and by pressing the <code class=\"language-plaintext highlighter-rouge\">Start experiment</code> button, the experiment will start.</p>\n\n<p><img src=\"https://diamantidis.github.io/assets/firebase/firebase_ab_final_screen.png\" alt=\"Remote A/B testing final screen screenshot\" /></p>\n\n<p>And that’s it!! Nothing else to do!!</p>\n\n<h1 id=\"conclusion\">Conclusion</h1>\n\n<p>As we saw in this post, setting up Firebase A/B testing in conjunction with Remote Config is definitely neither difficult nor a time-consuming process, especially compared to the potential results it may have on user satisfaction, conversion and retention.\nIn the <a href=\"/2019/06/30/firebase-remote-config-iOS-implementation\">next article</a> of this series, I will delve deeper into the implementation of a demo iOS app that will make use of all the things discussed in this article. Stay tuned!!</p>\n",
            "tags": ["Firebase","Remote Config","A/B testing"],
            "image": "https://diamantidis.github.io/assets/socialIcon.png"
        },
        
        {
            "id": "https://diamantidis.github.io/2019/01/06/curl-options",
            "url": "https://diamantidis.github.io/2019/01/06/curl-options",
            "title": "Useful Curl features",
            "date_published": "2019-01-06T06:00:00+00:00",
            
            "date_modified": "2019-01-06T06:00:00+00:00",
            
            "author": {
                "name": "Ioannis Diamantidis",
                "url": "https://diamantidis.github.io"
            },
            "summary": "<p>Happy New Year everyone!! This is my first post of the year!!<br />\nToday’s topic is a guide about some of the features of <a href=\"https://github.com/curl/curl\">curl</a>. Curl is a command line tool that can be used to make API requests and generally to transfer data to a URL from the Terminal.</p>\n\n",
            "content_html": "<p>Happy New Year everyone!! This is my first post of the year!!<br />\nToday’s topic is a guide about some of the features of <a href=\"https://github.com/curl/curl\">curl</a>. Curl is a command line tool that can be used to make API requests and generally to transfer data to a URL from the Terminal.</p>\n\n<p>As a developer you will often encounter situations where you will have to communicate with an API to fetch information or do some kind of transaction (create, update, delete, file upload). And curl is a tool to help on these situations. To install curl on a Mac, given that Homebrew is already installed, you just have to run <code class=\"language-plaintext highlighter-rouge\">brew install curl</code> and then you will be able to run the <code class=\"language-plaintext highlighter-rouge\">curl</code> command. To get more information about curl, you can refer to curl’s man page by typing <code class=\"language-plaintext highlighter-rouge\">man curl</code> on your terminal.</p>\n\n<blockquote>\n  <p>To search for options when using the man command, type <code class=\"language-plaintext highlighter-rouge\">/</code> followed by the term that you are looking for. For example, to find the occurrences of the word <code class=\"language-plaintext highlighter-rouge\">file</code>, just type <code class=\"language-plaintext highlighter-rouge\">/file</code> and then use <code class=\"language-plaintext highlighter-rouge\">n</code> and <code class=\"language-plaintext highlighter-rouge\">Shift</code> + <code class=\"language-plaintext highlighter-rouge\">n</code>, to navigate forth and back respectively.</p>\n</blockquote>\n\n<blockquote>\n  <p>If you are using Alamofire to handle the requests, then you can print the curl command of any of them, by just using <code class=\"language-plaintext highlighter-rouge\">debugPrint(request)</code>, where request is the <code class=\"language-plaintext highlighter-rouge\">Alamofire.request</code>. More info can be found on <a href=\"https://github.com/Alamofire/Alamofire/blob/master/Documentation/Usage.md#customdebugstringconvertible\">Alamofire’s documentation</a>.</p>\n</blockquote>\n\n<blockquote>\n  <p>For all the example mentioned in this post, I am using a local Vapor project, with the initial <code class=\"language-plaintext highlighter-rouge\">Todo</code> endpoints plus some others that I added to present some of the options. I will come back with more about Vapor on a future post. :wink:</p>\n</blockquote>\n\n<p>So let’s start!!!</p>\n\n<h1 id=\"verbose-mode\">Verbose mode</h1>\n\n<p>When making a request, sometimes you are not only interested about the content of the response, but maybe also for some other information like the response status or the headers. To get this kind of information, along with a more detailed representation of both the request and the response, you can append your command with the option <code class=\"language-plaintext highlighter-rouge\">-v</code> or <code class=\"language-plaintext highlighter-rouge\">--verbose</code>. For example, you can write a command like this,</p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>curl 'http://localhost:8080/todos' -v\n</code></pre></div></div>\n\n<h1 id=\"timing-breakdown\">Timing breakdown</h1>\n\n<p>To get more information on the exact duration that each step of the request takes, like how long it takes until the name resolving is completed, or how long it takes to connect with the server or how long it takes to transfer the information, you can use the option <code class=\"language-plaintext highlighter-rouge\">--write-out</code> together with the options available like <code class=\"language-plaintext highlighter-rouge\">time_namelookup</code>, <code class=\"language-plaintext highlighter-rouge\">time_connect</code>, <code class=\"language-plaintext highlighter-rouge\">time_starttransfer</code> etc..</p>\n\n<p><img src=\"https://diamantidis.github.io/assets/curl/write_out_option.png\" alt=\"Write-out option from man page screenshot\" /></p>\n\n<p>As an example you can use this command</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>curl \\\n--output /dev/null \\\n--silent \\\n--write-out 'namelookup:    %{time_namelookup}\\nconnect:       %{time_connect}\\npretransfer:   %{time_pretransfer}\\nstarttransfer: %{time_starttransfer}\\ntotal:         %{time_total}\\n' \\\nhttp://localhost:8080/todos \n</code></pre></div></div>\n\n<p>and the result will be a response like this:</p>\n\n<p><img src=\"https://diamantidis.github.io/assets/curl/write_out_output.png\" alt=\"Write-out output screenshot\" /></p>\n\n<blockquote>\n  <p>The options <code class=\"language-plaintext highlighter-rouge\">--output /dev/null</code> and <code class=\"language-plaintext highlighter-rouge\">--silent</code> are used to not show the response of the request and to not show the progress of the request respectively, thus getting a better-looking overview of the information.</p>\n</blockquote>\n\n<p>An alternative to using this lengthy command line is to use a file instead. You can create a file with the content of the <code class=\"language-plaintext highlighter-rouge\">--write-out</code> option and then use this file.</p>\n\n<p>For example, you can create a file, with the name <code class=\"language-plaintext highlighter-rouge\">curl_format.txt</code> and the following content:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>    namelookup:  %{time_namelookup}\\n\n       connect:  %{time_connect}\\n\n   pretransfer:  %{time_pretransfer}\\n\n starttransfer:  %{time_starttransfer}\\n\n                    ----------\\n\n         total:  %{time_total}\\n\n</code></pre></div></div>\n\n<p>And then run the command:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>curl \\\n-o /dev/null \\\n-s \\\n-w '@curl_format.txt' \\\nhttp://localhost:8080/todos \n</code></pre></div></div>\n\n<p>and you will get a familiar response as before.</p>\n\n<blockquote>\n  <p><code class=\"language-plaintext highlighter-rouge\">-o</code>, <code class=\"language-plaintext highlighter-rouge\">-s</code> and <code class=\"language-plaintext highlighter-rouge\">-m</code> are the single character alternative to <code class=\"language-plaintext highlighter-rouge\">--output</code>, <code class=\"language-plaintext highlighter-rouge\">--silent</code> and <code class=\"language-plaintext highlighter-rouge\">--write-out</code> options</p>\n</blockquote>\n\n<h1 id=\"proxy\">Proxy</h1>\n\n<p>If you want to pass the request through a proxy, like <a href=\"https://www.charlesproxy.com/\">Charles</a> you can use the option <code class=\"language-plaintext highlighter-rouge\">-x</code> or <code class=\"language-plaintext highlighter-rouge\">--proxy</code>, for example</p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>curl -x http://localhost:8888 http://localhost:8080/todos\n</code></pre></div></div>\n\n<p><img src=\"https://diamantidis.github.io/assets/curl/curl_man_proxy_option.png\" alt=\"man page proxy option screenshot\" /></p>\n\n<h1 id=\"url-options\">URL options</h1>\n\n<p>One of the first topics that the <code class=\"language-plaintext highlighter-rouge\">man curl</code> command covers is the URL and how this can be formatted.</p>\n\n<p><img src=\"https://diamantidis.github.io/assets/curl/curl_man_url_options.png\" alt=\"man page url options screenshot\" /></p>\n\n<p>With a smart use of this formatting template, you can have a series of numbers as a url param and in this way making the same request multiple times, like in the following example.\nRunning <code class=\"language-plaintext highlighter-rouge\">curl 'http://localhost:8080/todos?[1-5]'</code> will result in making 5 requests</p>\n\n<p><img src=\"https://diamantidis.github.io/assets/curl/curl_multiple_requests.png\" alt=\"curl multiple requests screenshot\" /></p>\n\n<p>You can also use these options to make requests to fetch the corresponding information for a list of items, like <code class=\"language-plaintext highlighter-rouge\">curl 'http://localhost:8080/todos/[1-5]'</code> which will result in 5 requests, one for each id.\nIt also supports a stepper to the range, like <code class=\"language-plaintext highlighter-rouge\">curl 'http://localhost:8080/todos/[1-5:2]'</code> to make a request only for the odd numbers.</p>\n\n<p>The results will be:</p>\n\n<p><img src=\"https://diamantidis.github.io/assets/curl/curl_multiple_requests_stepper.png\" alt=\"curl multiple requests stepper screenshot\" /></p>\n\n<p>Lastly, you can provide a set of options inside curly brackets, like in the following command</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>curl 'http://localhost:8080/todos/{1,2,4}'\n</code></pre></div></div>\n<p>which will result in three request for these ids. The values can be alphanumeric, so this can be used with letters or words too, like for example</p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>curl 'http://localhost:8080/todos/{a,b,c}'\n</code></pre></div></div>\n\n<p>And also they can be used simultaneously when constructing a url like, <code class=\"language-plaintext highlighter-rouge\">curl 'http://localhost:8080/v[1-2]/todos/{a,b,c}'</code>, which will result in 6 requests, three for v1 and three for v2.</p>\n\n<h1 id=\"file-upload\">File upload</h1>\n\n<p>When you want to upload a file you can use the following curl command:</p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>curl -X POST \\\n'http://localhost:8080/upload' \\\n-H 'Content-Type: multipart/form-data;' \\\n-F 'image=@image.png;type=image/png;'\n</code></pre></div></div>\n\n<p>The <code class=\"language-plaintext highlighter-rouge\">-F</code> option is used to specify the HTTP multipart POST data and <code class=\"language-plaintext highlighter-rouge\">image</code> is the name of the field.\nAgain, a more detailed description about this option can be found on the man page.\n<img src=\"https://diamantidis.github.io/assets/curl/curl_man_form_option.png\" alt=\"man page form option screenshot\" /></p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>These are a few examples of curl usage that I found useful for me and I want to share as it could come handy for others too. Obviously, there are a lot more options and the way to find them is by searching the man page. \nHope that you find it useful too, and if want to mention some other options that I haven’t mentioned, just let me know on <a href=\"https://twitter.com/diamantidis_io\">Twitter</a>!!</p>\n",
            "tags": ["Curl","Command Line","File Upload"],
            "image": "https://diamantidis.github.io/assets/socialIcon.png"
        },
        
        {
            "id": "https://diamantidis.github.io/2018/12/23/a-guide-to-swiftlint",
            "url": "https://diamantidis.github.io/2018/12/23/a-guide-to-swiftlint",
            "title": "A guide to SwiftLint",
            "date_published": "2018-12-23T08:30:00+00:00",
            
            "date_modified": "2018-12-23T08:30:00+00:00",
            
            "author": {
                "name": "Ioannis Diamantidis",
                "url": "https://diamantidis.github.io"
            },
            "summary": "<p><a href=\"https://github.com/realm/SwiftLint\">SwiftLint</a> is a great tool to enforce Swift style and conventions.\nWhen working with different developers with different levels of experience and different preferences it is hard to keep a consistency in the way the code is written. \nFurthermore, as a developer, we are quite lazy to check for linting issues every time we commit, so better let a tool and CI do the job for us.\nLong story short, SwiftLint is a tool to help a team configure some styling rules based on its needs and preferences, and later on, using CI, enforce these rules to the whole development team.</p>\n\n",
            "content_html": "<p><a href=\"https://github.com/realm/SwiftLint\">SwiftLint</a> is a great tool to enforce Swift style and conventions.\nWhen working with different developers with different levels of experience and different preferences it is hard to keep a consistency in the way the code is written. \nFurthermore, as a developer, we are quite lazy to check for linting issues every time we commit, so better let a tool and CI do the job for us.\nLong story short, SwiftLint is a tool to help a team configure some styling rules based on its needs and preferences, and later on, using CI, enforce these rules to the whole development team.</p>\n\n<h2 id=\"how-to-install\">How to install</h2>\n\n<p>SwiftLint can be installed using various ways. The easiest way is to install the pre-built package, by downloading the .pkg file from the <a href=\"https://github.com/realm/SwiftLint/releases\">latest GitHub release</a>.\nAnother easy way is by using Homebrew and running <code class=\"language-plaintext highlighter-rouge\">brew install swiftlint</code>. SwiftLint can also be installed using CocoaPods, by adding <code class=\"language-plaintext highlighter-rouge\">pod 'SwiftLint'</code> to the Podfile and running <code class=\"language-plaintext highlighter-rouge\">pod install</code>.</p>\n\n<p>More instructions and details can be found on the project’s <a href=\"https://github.com/realm/SwiftLint#installation\">GitHub Page</a>.</p>\n\n<h2 id=\"integrate-with-xcode\">Integrate with Xcode</h2>\n\n<p>After installing, SwiftLint can be integrated into Xcode (or other editors like AppCode) so that you can get the warnings and errors when building the project and have them displayed in the IDE.</p>\n\n<p>To do so, for Xcode, add a new “Run Script Phase” in the “Build Phases” section. This script should be like the following snippet if the installation is done using CocoaPods</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>if which \"${PODS_ROOT}/SwiftLint/swiftlint\" &gt;/dev/null; then\n    ${PODS_ROOT}/SwiftLint/swiftlint\nelse\n    echo \"warning: SwiftLint not installed, download from https://github.com/realm/SwiftLint\"\nfi\n</code></pre></div></div>\n\n<p><img src=\"https://diamantidis.github.io/assets/swiftlint/swiftlint_run_script_phase.png\" alt=\"SwiftLint Run Script Phase screenshot\" /></p>\n\n<h2 id=\"integrate-with-fastlane\">Integrate with fastlane</h2>\n\n<p>You can also integrate SwiftLint with fastlane by adding another lane in the <code class=\"language-plaintext highlighter-rouge\">Fastfile</code>, like:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>desc \"Run linting\"\nlane :lint do\nswiftlint(\n  executable: './Pods/SwiftLint/swiftlint', \n  mode: :lint,\n  strict: true,\n  config_file: '.swiftlint.yml',\n)\nend\n</code></pre></div></div>\n\n<p>Now, you can run <code class=\"language-plaintext highlighter-rouge\">fastlane lint</code> and you will get the list of issues.</p>\n\n<p>For more options, you can refer to the <a href=\"https://docs.fastlane.tools/actions/swiftlint/\">documentation</a>.</p>\n\n<h2 id=\"swiftlint-rules\">SwiftLint rules.</h2>\n\n<p>After having everything set up, it’s time to configure the rules. \nSwiftLint offers a plethora of rules and you can use the <code class=\"language-plaintext highlighter-rouge\">.swiftlint.yml</code> file to configure them.</p>\n\n<p>Enforcing the length of a line, a file or the body of a function and display some warning when using force casting and force try are some of the simplest but really useful rules, that you can start with. \nOther rules can be enforcing private IBActions and IBOutlets or throwing an error when using a legacy constructors. \nTo check the full list of the rules that comes with SwiftLint, you can run the command <code class=\"language-plaintext highlighter-rouge\">swiftlint rules</code> and choose the rules you want to have in your project.</p>\n\n<p><img src=\"https://diamantidis.github.io/assets/swiftlint/swiftlint_rules.png\" alt=\"SwiftLint Rules screenshot\" /></p>\n\n<p>To get more details about each rule, you can run the <code class=\"language-plaintext highlighter-rouge\">swiftlint rules</code> command appended with the identifier of the rule, like <code class=\"language-plaintext highlighter-rouge\">swiftlint rules todo</code>.\nTo add a rule to your <code class=\"language-plaintext highlighter-rouge\">.swiftlint.yml</code>, all you have to do is to enable it in the <code class=\"language-plaintext highlighter-rouge\">opt_in_rules</code> section.</p>\n\n<p>An example of a <code class=\"language-plaintext highlighter-rouge\">swiftlint.yml</code> file is the following:</p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>force_cast: warning\nforce_try: warning\n\nline_length:\n  warning: 120\n  error: 500\n\nfile_length:\n  warning: 600\n  error: 1000\n\nfunction_body_length:\n  warning: 40\n  error: 120\n\nopt_in_rules:\n  - empty_count\n  - force_unwrapping\n  - legacy_constant\n  - legacy_constructor\n  - private_action\n  - private_outlet\n</code></pre></div></div>\n\n<p>Apart from these rules, there is the option to add some customs rules by using some regex expression. This can be done by appending the <code class=\"language-plaintext highlighter-rouge\">swiftlint.yml</code> file with a <code class=\"language-plaintext highlighter-rouge\">custom_rules</code> section containing the rule.</p>\n\n<p>For example, to add a rule to enforce an empty space after a guard statement add the following snippet to your <code class=\"language-plaintext highlighter-rouge\">swiftlint.yml</code> file:</p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>custom_rules:\n  empty_line_after_guard:\n    name: \"Empty Line After Guard\"\n    regex: '(^ *guard[ a-zA-Z0-9=?.\\(\\),&gt;&lt;!]*\\{[ a-zA-Z0-9=?.\\(\\),&gt;&lt;!]*\\}\\n *(?!(?:return|guard))\\S+)'\n    message: \"There should be an empty line after a guard\"\n    severity: warning\n</code></pre></div></div>\n\n<p>Despite the fact that SwiftLine offers so many rules and such flexibility for customizations, sometimes you may not able to comply to a rule. SwiftLint has got you covered for this scenario too.</p>\n\n<p>You can use a comment in the code file to disable the check for a specific rule to a specific line. To do so, just add a comment as in the following snippet.</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>// swiftlint:disable:next force_cast\nlet noWarning = NSNumber() as! Int\n</code></pre></div></div>\n\n<p>To run the command against a single file, you can use the option <code class=\"language-plaintext highlighter-rouge\">--path</code> when running the <code class=\"language-plaintext highlighter-rouge\">swiftlint lint</code> command like <code class=\"language-plaintext highlighter-rouge\">swiftlint lint --path Project/AppDelegate.swift</code>. Alternatively, you can use the following command if you want to run against two or more files,</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>SCRIPT_INPUT_FILE_COUNT=2 SCRIPT_INPUT_FILE_0=\"Project/AppDelegate.swift\" SCRIPT_INPUT_FILE_1=\"Project/ViewController.swift\" swiftlint lint --use-script-input-files\n</code></pre></div></div>\n\n<p>Last but not least is the process of fixing the linting issues. For some rules this has to be done manually but for some others it can be done automatically.\nIf you notice, when running the <code class=\"language-plaintext highlighter-rouge\">swiftlint rules</code> command, each rule has a column named <code class=\"language-plaintext highlighter-rouge\">correctable</code>. This means that those rules can be automatically fixed by simply running the <code class=\"language-plaintext highlighter-rouge\">swiftlint autocorrect</code> command. And of course, the above-mentioned ways of running against one or more files can be applied for the autocorrect command too. Also, a different lane can be added to the Fastfile to cater for the autocorrect using the <code class=\"language-plaintext highlighter-rouge\">autocorrect</code> mode.</p>\n\n<p>For example,</p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  desc \"Run lint autocorrect\"\n  lane :lint_autocorrect do\n    swiftlint(\n      mode: :autocorrect,\n      executable: './Pods/SwiftLint/swiftlint',\n      config_file: '.swiftlint.yml',\n    )\n  end\n\n</code></pre></div></div>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>This is just an introduction to the full list of options that SwiftLint provides. Despite the fact that only a handful of options are mentioned, it is clear that SwiftLint is a great tool to use and can help to provide consistency in the codebase and reduce the code smells.</p>\n\n<p>This is my last blog post for 2018, so … <br />\nMerry Christmas and a Happy New Year!! :santa::christmas_tree:</p>\n\n",
            "tags": ["SwiftLint","Xcode","fastlane","CI"],
            "image": "https://diamantidis.github.io/assets/socialIcon.png"
        },
        
        {
            "id": "https://diamantidis.github.io/2018/12/07/xcode-shortcuts-and-custom-key-bindings",
            "url": "https://diamantidis.github.io/2018/12/07/xcode-shortcuts-and-custom-key-bindings",
            "title": "Xcode shortcuts and custom key bindings",
            "date_published": "2018-12-07T22:00:00+00:00",
            
            "date_modified": "2018-12-07T22:00:00+00:00",
            
            "author": {
                "name": "Ioannis Diamantidis",
                "url": "https://diamantidis.github.io"
            },
            "summary": "<p>A recent discussion with a colleague about the use of the Xcode shortcuts is the reason behind this blog post.</p>\n\n",
            "content_html": "<p>A recent discussion with a colleague about the use of the Xcode shortcuts is the reason behind this blog post.</p>\n\n<p>The use of keyboard shortcuts can result in greater productivity because it enables a developer to navigate, perform actions and edit code more efficiently compared to using the mouse and the navigation menu.</p>\n\n<p>Apart from this, writing this blog post is also a great opportunity for me to learn more about Xcode shortcuts.</p>\n\n<p>A list of the “default” Xcode shortcuts, as listed by Apple, can be found <a href=\"https://developer.apple.com/library/archive/documentation/IDEs/Conceptual/xcode_help-command_shortcuts/Introduction/Introduction.html#//apple_ref/doc/uid/TP40010560-CH1-SW1\">here</a></p>\n\n<p>Also this list can be found in Xcode by following Xcode &gt; Preferences (or better <code class=\"language-plaintext highlighter-rouge\">⌘</code> + <code class=\"language-plaintext highlighter-rouge\">,</code>) &gt; Key bindings, where you can also edit or add new shortcuts to the commands not yet set.</p>\n\n<p><img src=\"https://diamantidis.github.io/assets/shortcuts/key_bindings_menu.png\" alt=\"key bindings menu in xcode screenshot\" /></p>\n\n<h2 id=\"key-mapping\">Key mapping</h2>\n<p>As some may be unaware and since more often than not Apple’s keyboards don’t use the symbols, the mapping of the keys to the symbols is the following:</p>\n\n<ul>\n  <li><code class=\"language-plaintext highlighter-rouge\">⌃</code> (Control)</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">⌥</code> (Option)</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">⇧</code> (Shift)</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">⌘</code> (Command)</li>\n</ul>\n\n<p>Those symbols will be later used in conjunction with a primary key to form the shortcuts.</p>\n\n<h2 id=\"some-examples-of-useful-shortcuts\">Some examples of useful shortcuts</h2>\n<p>A list of commands that I primarily use are listed below:</p>\n\n<ul>\n  <li>\n    <p>Go to line (<code class=\"language-plaintext highlighter-rouge\">⌘</code> + <code class=\"language-plaintext highlighter-rouge\">L</code>) <br /><span class=\"list_item_description\">As a result, an input text will pop up, and there you can add the number of the line you want to move to.\n<img src=\"https://diamantidis.github.io/assets/shortcuts/line_number.png\" alt=\"go to line screenshot\" />\n</span></p>\n  </li>\n  <li>\n    <p>Add breakpoint ( <code class=\"language-plaintext highlighter-rouge\">⌘</code>+ <code class=\"language-plaintext highlighter-rouge\">\\</code>) <br /><span class=\"list_item_description\">A breakpoint will be added to the line. To activate/deactivate the debugger use <code class=\"language-plaintext highlighter-rouge\">⌘</code> + <code class=\"language-plaintext highlighter-rouge\">Y</code>.\n</span></p>\n  </li>\n  <li>\n    <p>Fold method (<code class=\"language-plaintext highlighter-rouge\">⇧</code> + <code class=\"language-plaintext highlighter-rouge\">⌥</code> + <code class=\"language-plaintext highlighter-rouge\">⌘</code> + <code class=\"language-plaintext highlighter-rouge\">←</code>) <br /><span class=\"list_item_description\">To unfold method (<code class=\"language-plaintext highlighter-rouge\">⇧</code> + <code class=\"language-plaintext highlighter-rouge\">⌥</code> + <code class=\"language-plaintext highlighter-rouge\">⌘</code> + <code class=\"language-plaintext highlighter-rouge\">→</code>)</span></p>\n  </li>\n  <li>\n    <p>Build ( <code class=\"language-plaintext highlighter-rouge\">⌘</code> + <code class=\"language-plaintext highlighter-rouge\">B</code> ) <br /><span class=\"list_item_description\">Also, to clean (<code class=\"language-plaintext highlighter-rouge\">⇧</code> + <code class=\"language-plaintext highlighter-rouge\">⌘</code> + <code class=\"language-plaintext highlighter-rouge\">K</code>)</span></p>\n  </li>\n  <li>\n    <p>Find call hierarchy (<code class=\"language-plaintext highlighter-rouge\">⌃</code> + <code class=\"language-plaintext highlighter-rouge\">⇧</code> + <code class=\"language-plaintext highlighter-rouge\">⌘</code> + <code class=\"language-plaintext highlighter-rouge\">H</code>) <br /><span class=\"list_item_description\">When on a function name, you can press the above-mentioned key combination to find the callers of the function.</span></p>\n  </li>\n  <li>\n    <p>Edit all in scope ( <code class=\"language-plaintext highlighter-rouge\">⌃</code> + <code class=\"language-plaintext highlighter-rouge\">⌘</code> + <code class=\"language-plaintext highlighter-rouge\">E</code>) <br /><span class=\"list_item_description\">It can be useful in case of renaming a variable or function.</span></p>\n  </li>\n  <li>\n    <p>Jump to Definition (<code class=\"language-plaintext highlighter-rouge\">⌃</code> + <code class=\"language-plaintext highlighter-rouge\">⌘</code> + <code class=\"language-plaintext highlighter-rouge\">J</code>) <br /><span class=\"list_item_description\">This can be used if you want to jump to the definition of the method. Also, use  <code class=\"language-plaintext highlighter-rouge\">⌃</code> + <code class=\"language-plaintext highlighter-rouge\">⌘</code> + <code class=\"language-plaintext highlighter-rouge\">←</code> to go back to the invoker again if it’s in a different file.</span></p>\n  </li>\n  <li>\n    <p>Move focus to editor (<code class=\"language-plaintext highlighter-rouge\">⌘</code> + <code class=\"language-plaintext highlighter-rouge\">J</code>) <br /><span class=\"list_item_description\">To move the focus/cursor to the editor area. A new window will open and you can select if you want to move to the editor, to add to a new assistant editor or to move to an existing one.\n<img src=\"https://diamantidis.github.io/assets/shortcuts/move_focus_to_editor.png\" alt=\"move focus to editor screenshot\" />\n</span></p>\n  </li>\n  <li>\n    <p>Open is Assistant Editor (<code class=\"language-plaintext highlighter-rouge\">⌥</code> + <code class=\"language-plaintext highlighter-rouge\">⌘</code> + <code class=\"language-plaintext highlighter-rouge\">,</code>) <br /><span class=\"list_item_description\">This can be used, if you are in the navigation controller and you want to open a file to the assistant editor.</span></p>\n  </li>\n  <li>\n    <p>Move focus to next Area (<code class=\"language-plaintext highlighter-rouge\">⌥</code> + <code class=\"language-plaintext highlighter-rouge\">⌘</code> + <code class=\"language-plaintext highlighter-rouge\">`</code>) <br /><span class=\"list_item_description\">It can be used for scenarios when you are in the main editor and you want to move to the assistant editor. Also, (<code class=\"language-plaintext highlighter-rouge\">⌥</code> + <code class=\"language-plaintext highlighter-rouge\">⌘</code> + <code class=\"language-plaintext highlighter-rouge\">⇧</code>  + <code class=\"language-plaintext highlighter-rouge\">`</code>) can be used to move back.</span></p>\n  </li>\n  <li>\n    <p>Center selection (<code class=\"language-plaintext highlighter-rouge\">⌃</code> + <code class=\"language-plaintext highlighter-rouge\">L</code>) <br /><span class=\"list_item_description\">This can be used to move the screen so the selected area is in the center of the screen.</span></p>\n  </li>\n</ul>\n\n<p>These are only a subset of the available commands that I found really useful. Of course there are plenty more and I am trying to always enrich my list, so feel free to share with me on <a href=\"https://twitter.com/diamantidis_io\">Twitter</a> which one you are using.</p>\n\n<h2 id=\"custom-key-bindings\">Custom key bindings</h2>\n<p>Apart from the already defined key bindings, there is a way to add custom ones. Features like duplication of a line and moving X numbers of lines up or down are some of the key bindings that Xcode doesn’t support.</p>\n\n<p>To add a custom key binding someone has to follow the next steps:</p>\n<ul>\n  <li>Open\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>/Applications/Xcode.app/Contents/Frameworks/IDEKit.framework/Resources/IDETextKeyBindingSet.plist\n</code></pre></div>    </div>\n  </li>\n  <li>Edit file and add something like the following inside the outer <code class=\"language-plaintext highlighter-rouge\">&lt;dict&gt;</code>:\n    <div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  &lt;key&gt;Custom Key Bindings&lt;/key&gt;\n  &lt;dict&gt;\n      &lt;key&gt;Move 5 lines down&lt;/key&gt;\n      &lt;string&gt;moveDown:, moveDown:, moveDown:, moveDown:, moveDown:&lt;/string&gt;\n      &lt;key&gt;Move 5 lines up&lt;/key&gt;\n      &lt;string&gt;moveUp:, moveUp:, moveUp:, moveUp:, moveUp:&lt;/string&gt;\n      &lt;key&gt;Duplicate current line&lt;/key&gt;\n      &lt;string&gt;selectLine:, copy:, moveToBeginningOfLine:, paste:, moveToEndOfLine:&lt;/string&gt;\n  &lt;/dict&gt;\n</code></pre></div>    </div>\n  </li>\n  <li>Restart Xcode</li>\n  <li>Go to Xcode &gt; Preferences (or better <code class=\"language-plaintext highlighter-rouge\">⌘</code> + <code class=\"language-plaintext highlighter-rouge\">,</code>) &gt; Key bindings</li>\n  <li>Find the key bindings</li>\n  <li>Assign a keyboard shortcut and</li>\n  <li>You can try the new shortcuts :rocket:</li>\n</ul>\n\n<p><img src=\"https://diamantidis.github.io/assets/shortcuts/custom_key_bindings.png\" alt=\"custom bindings menu in xcode screenshot\" /></p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>I hope you find those shortcuts useful and start using them on your daily routine to save some time. Furthermore, being able to add custom bindings can prove to be really useful especially on cases that are not currently supported by Xcode and are quite common, like quickly moving up and down on a file.</p>\n\n<p>Thanks for reading, and feel free to follow me on <a href=\"https://twitter.com/diamantidis_io\">Twitter</a> and share your questions, suggestions or comments about this post!!</p>\n",
            "tags": ["Xcode","Productivity"],
            "image": "https://diamantidis.github.io/assets/socialIcon.png"
        },
        
        {
            "id": "https://diamantidis.github.io/2018/11/25/download-provision-profiles-with-applescript",
            "url": "https://diamantidis.github.io/2018/11/25/download-provision-profiles-with-applescript",
            "title": "Download provision profiles with AppleScript",
            "date_published": "2018-11-25T06:00:00+00:00",
            
            "date_modified": "2018-11-25T06:00:00+00:00",
            
            "author": {
                "name": "Ioannis Diamantidis",
                "url": "https://diamantidis.github.io"
            },
            "summary": "<p>In my try to empty my To-do list, one item that caught my attention and I decided to give it a try is AppleScript.</p>\n\n",
            "content_html": "<p>In my try to empty my To-do list, one item that caught my attention and I decided to give it a try is AppleScript.</p>\n\n<p>AppleScript is a scripting language that allows us to interact with applications and many parts of the Mac OS.\nWell, with AppleScript you can automate pretty much anything on a Mac OS.</p>\n\n<p>AppleScript is an English-like language which contains words that are used in the every-day life thus making the writing of a script feels like creating a normal sentence. Due to that, it is quite easy to write, read and understand.</p>\n\n<p>A few examples of what can be implemented with AppleScript are the following:</p>\n\n<ul>\n  <li>Show notification</li>\n  <li>Turn sound on and off</li>\n  <li>Open a program or a file with a specific program</li>\n  <li>Send an email with the Mail app</li>\n  <li>Empty the trash</li>\n</ul>\n\n<p>An <code class=\"language-plaintext highlighter-rouge\">AppleScript</code> script can be written and run using the <code class=\"language-plaintext highlighter-rouge\">Script Editor</code> application. Alternatively, the <code class=\"language-plaintext highlighter-rouge\">osascript</code> command can be used to run the AppleScript “script” like for example <code class=\"language-plaintext highlighter-rouge\">osascript -e 'display notification \"hello world!\"'</code></p>\n\n<h2 id=\"osascript\">Osascript</h2>\n\n<p>Osascript is a tool to run any script in an OSA(Open Scripting Architecture) language. More info about OSA can be found <a href=\"https://developer.apple.com/library/archive/documentation/AppleScript/Conceptual/AppleScriptX/Concepts/osa.html\">on Apple’s documentation</a>.</p>\n\n<p>To find out which OSA languages are installed on your system, you can run the <code class=\"language-plaintext highlighter-rouge\">osalang</code> command. Two of the most popular such languages are <code class=\"language-plaintext highlighter-rouge\">AppleScript</code> and <code class=\"language-plaintext highlighter-rouge\">JavaScript</code>. The script can either be plain text or a compiled script (.scpt) created by Script Editor or <code class=\"language-plaintext highlighter-rouge\">osacompile</code> command.\nPlain text will be treated as AppleScript, unless it is stated differently using the <code class=\"language-plaintext highlighter-rouge\">-l</code> option. For more info about <code class=\"language-plaintext highlighter-rouge\">osacript</code> you can refer to it’s <a href=\"https://ss64.com/osx/osascript.html\">man page</a>.</p>\n\n<h2 id=\"a-real-world-example\">A “real world” example</h2>\n<p>One of the tasks that I found interesting, is to automate the process needed to download and update the provisioning profiles in Xcode.</p>\n\n<p>The process can be described with the following steps:</p>\n<ul>\n  <li>Open Xcode</li>\n  <li>From the navigation menu, choose Preferences or alternative <code class=\"language-plaintext highlighter-rouge\">Command</code> + <code class=\"language-plaintext highlighter-rouge\">,</code>. A new dialog opens.</li>\n  <li>Press the option “Accounts” from the the toolbar. The new window contains a list of all the appleIds on the left and details for each of them on the right.</li>\n  <li>Press the appleId that you want. It opens the details.</li>\n  <li>On the bottom right corner of the right pane, there is a button “Download Manual Profiles”</li>\n  <li>Press the button</li>\n</ul>\n\n<h2 id=\"implementation-with-javascript\">Implementation with JavaScript</h2>\n<p>First I start doing the implementation with JavaScript, to get a better idea on how it is working.</p>\n\n<p>The JavaScript implementation is the following (<a href=\"https://gist.github.com/diamantidis/0d2a9e28c12d2f1b3d3c02e7f32c7019\">gist with the JavaScript implementation</a>):</p>\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nx\">Application</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Xcode</span><span class=\"dl\">\"</span><span class=\"p\">).</span><span class=\"nx\">activate</span><span class=\"p\">();</span>\n\n<span class=\"nx\">delay</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>\n\n<span class=\"kd\">var</span> <span class=\"nx\">system</span> <span class=\"o\">=</span> <span class=\"nx\">Application</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">System Events</span><span class=\"dl\">\"</span><span class=\"p\">),</span>\n    <span class=\"nx\">xcode</span> <span class=\"o\">=</span> <span class=\"nx\">system</span><span class=\"p\">.</span><span class=\"nx\">processes</span><span class=\"p\">[</span><span class=\"dl\">\"</span><span class=\"s2\">Xcode</span><span class=\"dl\">\"</span><span class=\"p\">];</span>\n\n<span class=\"c1\">// open preferences</span>\n<span class=\"nx\">system</span><span class=\"p\">.</span><span class=\"nx\">keystroke</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">,</span><span class=\"dl\">\"</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"dl\">\"</span><span class=\"s2\">using</span><span class=\"dl\">\"</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">command down</span><span class=\"dl\">\"</span> <span class=\"p\">});</span>\n\n\n<span class=\"c1\">// click on Accounts tab</span>\n<span class=\"nx\">xcode</span><span class=\"p\">.</span><span class=\"nx\">windows</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"nx\">toolbars</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"nx\">uiElements</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">].</span><span class=\"nx\">click</span><span class=\"p\">();</span>\n\n<span class=\"c1\">// get the rows of the appleIDs</span>\n<span class=\"kd\">var</span> <span class=\"nx\">accountRows</span> <span class=\"o\">=</span> <span class=\"nx\">xcode</span><span class=\"p\">.</span><span class=\"nx\">windows</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"nx\">scrollAreas</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"nx\">tables</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"nx\">rows</span><span class=\"p\">,</span>\n    <span class=\"nx\">currentRow</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// Loop through the account rows and</span>\n<span class=\"c1\">// press the button to download the profiles for each account</span>\n<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">var</span> <span class=\"nx\">accountIndex</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"nx\">accountIndex</span> <span class=\"o\">&lt;</span> <span class=\"nx\">accountRows</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span> <span class=\"nx\">accountIndex</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">currentRow</span> <span class=\"o\">=</span> <span class=\"nx\">accountRows</span><span class=\"p\">[</span><span class=\"nx\">accountIndex</span><span class=\"p\">];</span>\n\n    <span class=\"nx\">currentRow</span><span class=\"p\">.</span><span class=\"nx\">select</span><span class=\"p\">();</span>\n\n    <span class=\"kd\">var</span> <span class=\"nx\">buttons</span> <span class=\"o\">=</span> <span class=\"nx\">xcode</span><span class=\"p\">.</span><span class=\"nx\">windows</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">].</span><span class=\"nx\">buttons</span><span class=\"p\">;</span>\n\n    <span class=\"kd\">var</span> <span class=\"nx\">selectedButton</span> <span class=\"o\">=</span> <span class=\"nx\">filterButtonByTitle</span><span class=\"p\">(</span><span class=\"nx\">buttons</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">Download Manual Profiles</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">selectedButton</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">selectedButton</span><span class=\"p\">.</span><span class=\"nx\">click</span><span class=\"p\">();</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// Function to filter buttons by name</span>\n<span class=\"kd\">function</span> <span class=\"nx\">filterButtonByTitle</span><span class=\"p\">(</span><span class=\"nx\">buttons</span><span class=\"p\">,</span> <span class=\"nx\">title</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"kd\">var</span> <span class=\"nx\">currentButton</span><span class=\"p\">,</span> <span class=\"nx\">buttonName</span><span class=\"p\">;</span>\n\n    <span class=\"c1\">// Loop over all the buttons, and return the one with title as the param</span>\n    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kd\">var</span> <span class=\"nx\">buttonIndex</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"nx\">buttonIndex</span> <span class=\"o\">&lt;</span> <span class=\"nx\">buttons</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span> <span class=\"nx\">buttonIndex</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n\n        <span class=\"nx\">currentButton</span> <span class=\"o\">=</span> <span class=\"nx\">buttons</span><span class=\"p\">[</span><span class=\"nx\">buttonIndex</span><span class=\"p\">];</span>\n        <span class=\"nx\">buttonName</span> <span class=\"o\">=</span> <span class=\"nx\">currentButton</span><span class=\"p\">.</span><span class=\"nx\">title</span><span class=\"p\">();</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">buttonName</span> <span class=\"o\">==</span> <span class=\"nx\">title</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span> <span class=\"nx\">currentButton</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>This can be executed by running <code class=\"language-plaintext highlighter-rouge\">osascript javascript_download_profiles.scpt</code>.\nI would say that the documentation was not so good and there are not so many examples available online.</p>\n\n<p>The library documentation can be found by pressing <code class=\"language-plaintext highlighter-rouge\">Shift</code> + <code class=\"language-plaintext highlighter-rouge\">Command</code> + <code class=\"language-plaintext highlighter-rouge\">L</code> when using the\n<code class=\"language-plaintext highlighter-rouge\">Script Editor</code>. It contains documentation for both JavaScript and AppleScript and how to use them to communicate with a lot of Mac OS apps.</p>\n\n<p><img src=\"/assets/applescript/documentation.png\" alt=\"script editor's documentation screenshot\" /></p>\n\n<p>On the first run of the script, you will get prompted to set Accessibility Access in System Preferences or you will get an error like <code class=\"language-plaintext highlighter-rouge\">... execution error: Error on line X: Error: osascript is not allowed to send keystrokes. (1002)</code>.</p>\n\n<p>To do so, go to <code class=\"language-plaintext highlighter-rouge\">System Preferences</code> &gt; <code class=\"language-plaintext highlighter-rouge\">Security &amp; Privacy</code> &gt; <code class=\"language-plaintext highlighter-rouge\">Privacy</code> &gt; <code class=\"language-plaintext highlighter-rouge\">Accessibility</code> and select the programs that you choose to run the script</p>\n\n<p><img src=\"/assets/applescript/accessibility_permissions.png\" alt=\"Accessibility permissions screenshot\" /></p>\n\n<h2 id=\"implementation-with-applescript\">Implementation with AppleScript</h2>\n\n<p>After facing these issues with JavaScript, I was more confident to start the AppleScript implementation which is the following(<a href=\"https://gist.github.com/diamantidis/c688cc192d9d525248f55da6602fb4ad\">gist with the AppleScript implementation</a>):</p>\n\n<div class=\"language-applescript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">activate</span><span class=\"w\"> </span><span class=\"nb\">application</span><span class=\"w\"> </span><span class=\"s2\">\"Xcode\"</span><span class=\"w\">\n</span><span class=\"k\">tell</span><span class=\"w\"> </span><span class=\"nb\">application</span><span class=\"w\"> </span><span class=\"s2\">\"System Events\"</span><span class=\"w\">\n    </span><span class=\"k\">tell</span><span class=\"w\"> </span><span class=\"nv\">process</span><span class=\"w\"> </span><span class=\"s2\">\"Xcode\"</span><span class=\"w\">\n        </span><span class=\"nv\">keystroke</span><span class=\"w\"> </span><span class=\"s2\">\",\"</span><span class=\"w\"> </span><span class=\"nv\">using</span><span class=\"w\"> </span><span class=\"nv\">command</span><span class=\"w\"> </span><span class=\"nv\">down</span><span class=\"w\">\n\n        </span><span class=\"nv\">click</span><span class=\"w\"> </span><span class=\"nb\">button</span><span class=\"w\"> </span><span class=\"s2\">\"Accounts\"</span><span class=\"w\"> </span><span class=\"k\">of</span><span class=\"w\"> </span><span class=\"na\">toolbar</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"k\">of</span><span class=\"w\"> </span><span class=\"na\">window</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\">\n        </span><span class=\"nb\">delay</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\">\n        </span><span class=\"k\">repeat</span><span class=\"w\"> </span><span class=\"nv\">with</span><span class=\"w\"> </span><span class=\"nv\">account_row</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"nv\">rows</span><span class=\"w\"> </span><span class=\"k\">of</span><span class=\"w\"> </span><span class=\"nv\">table</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"k\">of</span><span class=\"w\"> </span><span class=\"nb\">scroll</span><span class=\"w\"> </span><span class=\"nv\">area</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"k\">of</span><span class=\"w\"> </span><span class=\"na\">window</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\">\n            </span><span class=\"nb\">select</span><span class=\"w\"> </span><span class=\"nv\">account_row</span><span class=\"w\">\n\n            </span><span class=\"nb\">delay</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\">\n\n            </span><span class=\"k\">repeat</span><span class=\"w\"> </span><span class=\"nv\">with</span><span class=\"w\"> </span><span class=\"nv\">aButton</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"nb\">buttons</span><span class=\"w\"> </span><span class=\"k\">of</span><span class=\"w\"> </span><span class=\"na\">window</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\">\n                </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"na\">title</span><span class=\"w\"> </span><span class=\"k\">of</span><span class=\"w\"> </span><span class=\"nv\">aButton</span><span class=\"w\"> </span><span class=\"ow\">starts with</span><span class=\"w\"> </span><span class=\"s2\">\"Download Manual Profiles\"</span><span class=\"w\"> </span><span class=\"k\">then</span><span class=\"w\"> </span><span class=\"nv\">click</span><span class=\"w\"> </span><span class=\"nv\">aButton</span><span class=\"w\">\n            </span><span class=\"k\">end</span><span class=\"w\"> </span><span class=\"k\">repeat</span><span class=\"w\">\n        </span><span class=\"k\">end</span><span class=\"w\"> </span><span class=\"k\">repeat</span><span class=\"w\">\n    </span><span class=\"k\">end</span><span class=\"w\"> </span><span class=\"k\">tell</span><span class=\"w\">\n</span><span class=\"k\">end</span><span class=\"w\"> </span><span class=\"k\">tell</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<p>This can be executed by running <code class=\"language-plaintext highlighter-rouge\">osascript applescript_download_profiles.scpt</code>.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>It’s always nice to experiment with technologies that you haven’t use before and at the same time to explore new options and possibilities to make your life easier by enabling you to automate processes. This post only scratches the surface of the AppleScript capabilities and I am looking forward to start using AppleScript to automate tasks that I do quite often. Furthermore, it is a great opportunity to get a better idea on how it works underneath with use of the apple events, Open Scripting Architecture and the language components.</p>\n\n",
            "tags": ["AppleScript","Xcode","JavaScript","OSA"],
            "image": "https://diamantidis.github.io/assets/socialIcon.png"
        },
        
        {
            "id": "https://diamantidis.github.io/2018/11/10/save-time-with-git-aliases",
            "url": "https://diamantidis.github.io/2018/11/10/save-time-with-git-aliases",
            "title": "Save time with git aliases",
            "date_published": "2018-11-10T06:02:00+00:00",
            
            "date_modified": "2018-11-10T06:02:00+00:00",
            
            "author": {
                "name": "Ioannis Diamantidis",
                "url": "https://diamantidis.github.io"
            },
            "summary": "<p>This is a blog post for those that don’t like using the computer mouse or trackpad, those who don’t use <a href=\"https://www.sourcetreeapp.com/\">Sourcetree</a> or other version-control tools to manage a repository.\nThe fans of the command line. Are you tired of writing these long commands like <code class=\"language-plaintext highlighter-rouge\">git push --set-upstream</code> when you have to push a new branch to remote? One of the solutions that will save those precious seconds while typing these git commands is git aliases. :rocket:</p>\n\n",
            "content_html": "<p>This is a blog post for those that don’t like using the computer mouse or trackpad, those who don’t use <a href=\"https://www.sourcetreeapp.com/\">Sourcetree</a> or other version-control tools to manage a repository.\nThe fans of the command line. Are you tired of writing these long commands like <code class=\"language-plaintext highlighter-rouge\">git push --set-upstream</code> when you have to push a new branch to remote? One of the solutions that will save those precious seconds while typing these git commands is git aliases. :rocket:</p>\n\n<h2 id=\"add-git-alias\">Add git alias</h2>\n<p>The simplest way to add a git alias is by running a command to add the alias to the git global configuration file.\nFor example, running the command <code class=\"language-plaintext highlighter-rouge\">git config --global alias.hist \"log --pretty=format:'%h %ad | %s%d [%an]' --graph --date=short\"</code> will add the alias <code class=\"language-plaintext highlighter-rouge\">git hist</code>.</p>\n\n<p>Alternatively, you can edit the git config file, usually located at <code class=\"language-plaintext highlighter-rouge\">~/.gitconfig</code>.</p>\n\n<blockquote>\n  <p><code class=\"language-plaintext highlighter-rouge\">Hint:</code> The location of the file can be found by running: <code class=\"language-plaintext highlighter-rouge\">git config --list --show-origin</code> or by running <code class=\"language-plaintext highlighter-rouge\">git config --global -e</code>. The first command will list all the git-related configuration, along with the file they are placed, and the second command will open the global config file for edit with the default editor.</p>\n</blockquote>\n\n<p><img src=\"https://diamantidis.github.io/assets/git_aliases/git_config_list.png\" alt=\"Git Config list screenshot\" />\n<sub><sup>Screenshot for <code class=\"language-plaintext highlighter-rouge\">git config --list --show-origin</code></sup></sub>\n<img src=\"https://diamantidis.github.io/assets/git_aliases/git_config_global_e.png\" alt=\"Git Config global -e screenshot\" />\n<sub><sup>Screenshot for <code class=\"language-plaintext highlighter-rouge\">git config --global -e</code></sup></sub></p>\n\n<p>To add an alias to the global git config file, you can simply add a section for alias (if it doesn’t exist) and start writing your aliases like:</p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>[alias]\n  co = checkout\n  c = commit\n  s = status\n</code></pre></div></div>\n\n<p><img src=\"https://diamantidis.github.io/assets/git_aliases/git_config_aliases.png\" alt=\"Git Config aliases screenshot\" /></p>\n\n<h2 id=\"shell-level-aliases\">Shell level aliases</h2>\n<p>If your shell supports aliases or shortcuts, you can add aliases on this level, too. For example, edit the <code class=\"language-plaintext highlighter-rouge\">.bash_profile</code> by running the command\n<code class=\"language-plaintext highlighter-rouge\">vim  ~/.bash_profile</code> (or create if it doesn’t exist by running <code class=\"language-plaintext highlighter-rouge\">touch ~/.bash_profile</code>) and add some aliases like:</p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>alias g='git'\nalias ga='git add'\n</code></pre></div></div>\n\n<p><img src=\"https://diamantidis.github.io/assets/git_aliases/bash_profile.png\" alt=\"Bash profile screenshot\" /></p>\n\n<p>After saving and exiting, run <code class=\"language-plaintext highlighter-rouge\">source ~/.bash_profile</code> or <code class=\"language-plaintext highlighter-rouge\">. ~/.bash_profile</code> to source the modified file.</p>\n\n<h2 id=\"is-there-anything-more\">Is there anything more?</h2>\n<p>The answer is yes. <a href=\"https://github.com/robbyrussell/oh-my-zsh\">Oh-my-zsh</a>. Above all the others (one of their selling point that I like is <code class=\"language-plaintext highlighter-rouge\">Oh My Zsh will not make you a 10x developer...but you might feel like one.</code>), it comes by default with a git plugin with all these aliases installed. All the list of the available aliases can be found in their <a href=\"https://github.com/robbyrussell/oh-my-zsh/wiki/Plugin:git\">documentation</a>.</p>\n\n<p>The only thing you have to do is to enable it in the <code class=\"language-plaintext highlighter-rouge\">.zshrc</code> file by editing this file and more precisely the <code class=\"language-plaintext highlighter-rouge\">plugins</code> sector to add the git plugin, like in the screenshot below.</p>\n\n<p><img src=\"https://diamantidis.github.io/assets/git_aliases/oh_my_zsh_plugins.png\" alt=\"Oh-my-zsh plugins screenshot\" /></p>\n\n<p>Then, you have to source the file by running either <code class=\"language-plaintext highlighter-rouge\">source ~/.zshrc</code> or <code class=\"language-plaintext highlighter-rouge\">. ~/.zshrc</code></p>\n\n<p>The next step is to learn the commands and start using them. :smile:</p>\n\n<blockquote>\n  <p>Oh My Zsh, apart from the <code class=\"language-plaintext highlighter-rouge\">git</code> plugin, contains by default a  huge list of useful plugins. The list can be found <a href=\"https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins\">here</a></p>\n</blockquote>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>Writing git commands on a Terminal is an integral part of my daily routine, so improving this part leads to a better daily programming experience. Saving a few keystrokes here and there, doesn’t seem so, but in the long run, it saves a lot of time. Furthermore, as the commands are shorter, it lowers the risk of typos like <code class=\"language-plaintext highlighter-rouge\">git chekcout</code> :smile:. Last but not least, it is kind of cool and hackish to run these shortcuts, especially when running them in front of others who do have to type the full git commands to stage, commit and push files. :computer:</p>\n\n<p>I hope that you find it interesting and you will start using the git aliases on your daily routine from now on!</p>\n",
            "tags": ["Git","Productivity"],
            "image": "https://diamantidis.github.io/assets/socialIcon.png"
        },
        
        {
            "id": "https://diamantidis.github.io/2018/10/23/why-i-choose-jekyll-over-competition",
            "url": "https://diamantidis.github.io/2018/10/23/why-i-choose-jekyll-over-competition",
            "title": "Why I choose Jekyll over competition",
            "date_published": "2018-10-23T06:02:00+00:00",
            
            "date_modified": "2018-10-23T06:02:00+00:00",
            
            "author": {
                "name": "Ioannis Diamantidis",
                "url": "https://diamantidis.github.io"
            },
            "summary": "<p>A few months ago, I took the decision that I wanted to start writing some articles. At that time, one of the first things to consider, and that would definitely affect my efforts, was the decision of the platform where I would host the posts. The options were countless. For this reason, I created a list of criteria that were important to me, and based on those I came to the decision to try Jekyll.</p>\n\n",
            "content_html": "<p>A few months ago, I took the decision that I wanted to start writing some articles. At that time, one of the first things to consider, and that would definitely affect my efforts, was the decision of the platform where I would host the posts. The options were countless. For this reason, I created a list of criteria that were important to me, and based on those I came to the decision to try Jekyll.</p>\n\n<p>Those criteria are:</p>\n\n<ul>\n  <li>Ability to customize the look and feel</li>\n  <li>Easy of setup and time to publish</li>\n  <li>Thriving and big community</li>\n  <li>Easy to use</li>\n</ul>\n\n<h2 id=\"customization\">Customization</h2>\n<p>One of the most important must-have for me was the ability to apply my personal look and feel and to able to experiment with the UI.\nChanging the theme, the structure, the fonts and the colors can best reflect the writers personality and personal taste.\nGiven that, I rejected platforms like <a href=\"https://medium.com\">Medium</a>, though I understand that by doing so I miss a huge pool of potential readers.</p>\n\n<h2 id=\"easy-of-setup-and-time-to-publish\">Easy of setup and time to publish</h2>\n\n<p>Another important aspect was the effort needed to setup and also how long it would take to actually be ready to publish the blog and ultimately start writing the content.\nFrom this point of view, CMS solutions like <a href=\"https://wordpress.org\">Wordpress</a> or <a href=\"https://www.drupal.org\">Drupal</a> would be an overkill. My main purpose was to share my ideas and thoughts by writing content and not developing yet another website.</p>\n\n<p>I cannot overlook the advantages and the wide range of features that these tools offer, but at that point, I felt that having to support a database and all the security risks that come with such a decision, was not necessary. Maybe for a non-technical person, features like the admin panel, the use of <code class=\"language-plaintext highlighter-rouge\">WYSIWYG</code> editors  or the built-in newsletter feature is the whole deal, but for me that was not the case.</p>\n\n<h2 id=\"big-community\">Big community</h2>\n<p>Having ruled out proprietary systems and CMS solutions, I was pretty much left with the option of using a static generator. Building a personal blog on a system that is supported by a vast community of developers can determine the ability to quickly adapt to future needs and technologies that will come up in our ever-changing world. Given that, the two of the most prominent such tools are <a href=\"https://gohugo.io\">Hugo</a> and <a href=\"https://jekyllrb.com/\">Jekyll</a>.</p>\n\n<div class=\"github-card\" data-github=\"jekyll/jekyll\" data-width=\"400\" data-height=\"153\" data-theme=\"default\"></div>\n<script src=\"https://cdn.jsdelivr.net/github-cards/latest/widget.js\"></script>\n\n<div class=\"github-card\" data-github=\"gohugoio/hugo\" data-width=\"400\" data-height=\"153\" data-theme=\"default\"></div>\n<script src=\"https://cdn.jsdelivr.net/github-cards/latest/widget.js\"></script>\n\n<h2 id=\"easy-to-use\">Easy to use</h2>\n<p>One more decisive factor was the easy to use. Both when the developing the platform and when writing a new blogpost. \nComparing Hugo and Jekyll on the process of creating, writing and publishing a post is almost familiar. Both support Markdown and they both provide some command line interface to create a new post (though I have to admit that to do so on Jekyll you have to install a plugin). Maybe there are some points in favor of Hugo when it comes to speed, but with the amount of posts that I hope to write in the coming 2 years, this advantage is not so important.</p>\n\n<p>Then, it comes to how to theme the blog. And here, Jekyll and more precisely the template engine that it uses, makes the different for me. \nBased on my personal preferences <a href=\"https://shopify.github.io/liquid/\">Liquid</a> seemed a bit more intuitive than <a href=\"https://golang.org/pkg/html/template/\">Go Template</a>. \nMaybe having worked a lot with <a href=\"https://symfony.com/\">Symfony</a> and <a href=\"https://www.drupal.org/8\">Drupal 8</a> and the template engine that they are based on, named <a href=\"https://twig.symfony.com/\">Twig</a>, affected my judge, since they look familiar. Also having more experience in Ruby and its ecosystem compared to the equivalent of Go further adds to this.</p>\n\n<p>The important for me was that it enables me to create a rapid prototype and start focusing on the content quite fast.</p>\n\n<p>Maybe in the future, and if I gain more knowledge and experience in the Go community, I will change my mind, but since then I will continue with Jekyll.</p>\n\n<h2 id=\"jekyll\">Jekyll</h2>\n<p>My experience so far with Jekyll is amazing and on par with my expectations. One of the greatest positives is that it supports hosting in Github Pages and due to that there are a lot of resources and ideas on how to automate the release and the publication of the changes automatically by taking advantage of the <a href=\"https://travis-ci.org/\">Travis CI</a>. Furthermore, the thriving community of Jekyll offers a wide variety of plugins to support the features that any developer may face.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>And this is the story and the decision process that I followed to end up choosing to use Jekyll. Maybe some time in the future I will have to move to another platform, but for now, Jekyll gives me the opportunity to focus on writing content instead of supporting the platform. Anyhow, I believe that having so many products competing each other is beneficial for everyone in the community as they are trying to provide a better offering and gain a bigger percentage of the pie.</p>\n\n<p>Finally, I believe that everyone (or better those that are interested and want to) should try and start a new blog, and most preferably a custom one, to better share their personality with the rest of the world, not only by their writings but also with the look and feel of their blog.</p>\n",
            "tags": ["Jekyll","Personal","Blog"],
            "image": "https://diamantidis.github.io/assets/socialIcon.png"
        },
        
        {
            "id": "https://diamantidis.github.io/2018/10/14/modifying-ui-elements-with-xcode-and-lldb-v2",
            "url": "https://diamantidis.github.io/2018/10/14/modifying-ui-elements-with-xcode-and-lldb-v2",
            "title": "Modifying UI elements with Xcode and LLDB v2",
            "date_published": "2018-10-14T06:02:00+00:00",
            
            "date_modified": "2018-10-14T06:02:00+00:00",
            
            "author": {
                "name": "Ioannis Diamantidis",
                "url": "https://diamantidis.github.io"
            },
            "summary": "<p>In a <a href=\"/2018/09/30/modifying-ui-elements-with-lldb\">previous post</a>, I wrote an introduction about the use of LLDB expressions to modify the UI elements. In this post, I will continue on the same topics and I will focus on how to get the most out of the LLDB expressions.\nNo tool will ever work and get user adoption if it is too complicated.\nFor this reason, I will write about a number of alternatives to make LLDB expressions easier to use.</p>\n\n",
            "content_html": "<p>In a <a href=\"/2018/09/30/modifying-ui-elements-with-lldb\">previous post</a>, I wrote an introduction about the use of LLDB expressions to modify the UI elements. In this post, I will continue on the same topics and I will focus on how to get the most out of the LLDB expressions.\nNo tool will ever work and get user adoption if it is too complicated.\nFor this reason, I will write about a number of alternatives to make LLDB expressions easier to use.</p>\n\n<h2 id=\"command-aliases\">Command aliases</h2>\n<p>First and foremost, having to type (or copy) a command of this length (e.g <code class=\"language-plaintext highlighter-rouge\">po [[[UIApplication sharedApplication] keyWindow] recursiveDescription]</code>) may discourage developers from using these LLDB commands. Fortunately, there is a solution to this problem.</p>\n\n<p>It is called <code class=\"language-plaintext highlighter-rouge\">Command Aliases</code>.\nThe only thing needed is to edit a file located in the directory <code class=\"language-plaintext highlighter-rouge\">~/.lldbinit</code>(or create it if not there, by typing <code class=\"language-plaintext highlighter-rouge\">touch ~/.lldbinit</code>) and add the commands like:</p>\n\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">command alias </span>views expression <span class=\"nt\">-l</span> objc <span class=\"nt\">-O</span> <span class=\"nt\">--</span> <span class=\"o\">[[[</span>UIApplication sharedApplication] keyWindow] recursiveDescription]\n\n<span class=\"nb\">command alias </span>flush expression <span class=\"nt\">-l</span> objc <span class=\"nt\">--</span> <span class=\"o\">(</span>void<span class=\"o\">)[</span>CATransaction flush]\n<span class=\"nb\">command </span>regex change_color <span class=\"s1\">'s/(.+) (.+)/e (void)[(id)%1 setBackgroundColor:[UIColor %2]]/'</span>\n</code></pre></div></div>\n\n<p>The first two commands are already described in the previous post. The first one is to print the view hierarchy and from there get the memory address of the button, and the second one is to refresh the UI.</p>\n\n<p>The last one is an example of how to use <code class=\"language-plaintext highlighter-rouge\">regex</code> to create a command with parameters. In this particular case, a memory address and the name of the color (blueColor) is expected. As an outcome, the background color of the button will change.\nFor example, running <code class=\"language-plaintext highlighter-rouge\">change_color 0x7f9f7e40cd70  blueColor</code> and <code class=\"language-plaintext highlighter-rouge\">flush</code> will result in changing the background color of the button to blue.</p>\n\n<p>Making use of the aliases will improve the possibility of using this tool, but there are cases where more advanced aliases are needed.\nLet’s say, how to find the button’s memory address by the text of the button label.</p>\n\n<p>In such cases, Python comes to the rescue to provide extendability.</p>\n\n<h2 id=\"lldb-and-python\">LLDB and Python</h2>\n\n<p>An easy way to start writing a python command is to use the Xcode console and just type <code class=\"language-plaintext highlighter-rouge\">command script add help</code> and follow the instructions.</p>\n\n<p><img src=\"https://diamantidis.github.io/assets/lldb2/script_add_help_commmand.png\" alt=\"command script add help screenshot\" /></p>\n\n<p>Alternatively, you can create a script file, that can be added to the repo and a version control system, and then run the command <code class=\"language-plaintext highlighter-rouge\">command script import &lt;script_file_path&gt;</code> on the Xcode console or better add it to the <code class=\"language-plaintext highlighter-rouge\">~/.lldbinit</code> file.</p>\n\n<p>To write a python function that will be used as a new LLDB command, a function that takes four arguments should be implemented:</p>\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">command_function</span><span class=\"p\">(</span><span class=\"n\">debugger</span><span class=\"p\">,</span> <span class=\"n\">command</span><span class=\"p\">,</span> <span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"n\">internal_dict</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Your code goes here\n</span></code></pre></div></div>\n\n<p>The type and the description of each of these variables, according to the <a href=\"https://lldb.llvm.org/python-reference.html\">LLDB python reference</a>, is the following:</p>\n\n<ul>\n  <li><code class=\"language-plaintext highlighter-rouge\">debugger</code> (type: <code class=\"language-plaintext highlighter-rouge\">lldb.SBDebugger</code>): The current debugger object.</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">command</code> (type: <code class=\"language-plaintext highlighter-rouge\">python string</code>): A python string containing all arguments for your command. If you need to chop up the arguments try using the shlex module’s shlex.split(command) to properly extract the arguments.</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">result</code> (type: <code class=\"language-plaintext highlighter-rouge\">lldb.SBCommandReturnObject</code>): A return object which encapsulates success/failure information for the command and output text that needs to be printed as a result of the command. The plain Python “print” command also works but text won’t go in the result by default (it is useful as a temporary logging facility).</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">internal_dict</code> (type: <code class=\"language-plaintext highlighter-rouge\">python dict object</code>): The dictionary for the current embedded script session which contains all variables and functions.</li>\n</ul>\n\n<p>If you are using the <code class=\"language-plaintext highlighter-rouge\">command script import</code> approach, you can define the function <code class=\"language-plaintext highlighter-rouge\">__lldb_init_module</code> like below:</p>\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">__lldb_init_module</span><span class=\"p\">(</span><span class=\"n\">debugger</span><span class=\"p\">,</span> <span class=\"n\">internal_dict</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Command Initialization code goes here\n</span>    <span class=\"n\">debugger</span><span class=\"p\">.</span><span class=\"n\">HandleCommand</span><span class=\"p\">(</span><span class=\"s\">'command script add -f filter.filter_button_by_label filter_button_by_label'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>where debugger and internal_dict are as above.</p>\n\n<p>This function will get called when the module is loaded allowing you to add whatever commands you want into the current debugger.</p>\n\n<p>The description of the argument of the <code class=\"language-plaintext highlighter-rouge\">debugger.HandleCommand</code> is the following:</p>\n\n<ul>\n  <li><code class=\"language-plaintext highlighter-rouge\">command script add</code>: LLDB command to add a script.</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">-f argument</code>: Specifies the name of the Python function that the command will execute. It follows the format <code class=\"language-plaintext highlighter-rouge\">{module name}.{function name}</code>.<br />\nIn the example above:\n    <ul>\n      <li><code class=\"language-plaintext highlighter-rouge\">filter</code>: is the name of the module (in Python is just the file name without the .py extension)</li>\n      <li><code class=\"language-plaintext highlighter-rouge\">filter_button_by_label</code>: is the command function. (the one described previously as <code class=\"language-plaintext highlighter-rouge\">command_function(debugger, command, result, internal_dict)</code>)</li>\n    </ul>\n  </li>\n  <li><code class=\"language-plaintext highlighter-rouge\">last argument</code> (for example, <code class=\"language-plaintext highlighter-rouge\">filter_button_by_label</code>): is the command that will be used in the Xcode console to invoke this function.</li>\n</ul>\n\n<p>The full example can be found either on this <a href=\"https://gist.github.com/diamantidis/d95531fd571c360078fcc795d1967ded\">gist</a> or on the snippet below:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">lldb</span>\n<span class=\"kn\">import</span> <span class=\"nn\">commands</span>\n<span class=\"kn\">import</span> <span class=\"nn\">optparse</span>\n<span class=\"kn\">import</span> <span class=\"nn\">shlex</span>\n<span class=\"kn\">import</span> <span class=\"nn\">re</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">create_options</span><span class=\"p\">():</span>\n    <span class=\"n\">usage</span> <span class=\"o\">=</span> <span class=\"s\">\"usage: filter_button_by_label [options]\"</span>\n    <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s\">'''\n        This command is used to find a UIButton with a label matching the option provided as option\n    '''</span>\n    <span class=\"n\">parser</span> <span class=\"o\">=</span> <span class=\"n\">optparse</span><span class=\"p\">.</span><span class=\"n\">OptionParser</span><span class=\"p\">(</span><span class=\"n\">description</span><span class=\"o\">=</span><span class=\"n\">description</span><span class=\"p\">,</span> <span class=\"n\">prog</span><span class=\"o\">=</span><span class=\"s\">'filter_button_by_label'</span><span class=\"p\">,</span> <span class=\"n\">usage</span><span class=\"o\">=</span><span class=\"n\">usage</span><span class=\"p\">)</span>\n    <span class=\"n\">parser</span><span class=\"p\">.</span><span class=\"n\">add_option</span><span class=\"p\">(</span><span class=\"s\">'-n'</span><span class=\"p\">,</span> <span class=\"s\">'--needle'</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s\">'string'</span><span class=\"p\">,</span> <span class=\"n\">dest</span><span class=\"o\">=</span><span class=\"s\">'needle'</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s\">'Text to search on UIButton labels.'</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">parser</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">filter_button_by_label</span><span class=\"p\">(</span><span class=\"n\">debugger</span><span class=\"p\">,</span> <span class=\"n\">command</span><span class=\"p\">,</span> <span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"n\">internal_dict</span><span class=\"p\">):</span>\n\n    <span class=\"n\">target</span> <span class=\"o\">=</span> <span class=\"n\">debugger</span><span class=\"p\">.</span><span class=\"n\">GetSelectedTarget</span><span class=\"p\">()</span>\n    <span class=\"n\">process</span> <span class=\"o\">=</span> <span class=\"n\">target</span><span class=\"p\">.</span><span class=\"n\">GetProcess</span><span class=\"p\">()</span>\n    <span class=\"n\">mainThread</span> <span class=\"o\">=</span> <span class=\"n\">process</span><span class=\"p\">.</span><span class=\"n\">GetThreadAtIndex</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"n\">currentFrame</span> <span class=\"o\">=</span> <span class=\"n\">mainThread</span><span class=\"p\">.</span><span class=\"n\">GetSelectedFrame</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># Parse arguments and options\n</span>    <span class=\"n\">command_args</span> <span class=\"o\">=</span> <span class=\"n\">shlex</span><span class=\"p\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"n\">command</span><span class=\"p\">)</span>\n    <span class=\"n\">parser</span> <span class=\"o\">=</span> <span class=\"n\">create_options</span><span class=\"p\">()</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"p\">(</span><span class=\"n\">options</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">parser</span><span class=\"p\">.</span><span class=\"n\">parse_args</span><span class=\"p\">(</span><span class=\"n\">command_args</span><span class=\"p\">)</span>\n        <span class=\"c1\"># if needle is not provided\n</span>        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">options</span><span class=\"p\">.</span><span class=\"n\">needle</span><span class=\"p\">:</span>\n            <span class=\"n\">parser</span><span class=\"p\">.</span><span class=\"n\">print_help</span><span class=\"p\">()</span>\n            <span class=\"k\">return</span>\n    <span class=\"k\">except</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span>\n\n    <span class=\"n\">view_hierarchy_command</span> <span class=\"o\">=</span> <span class=\"s\">'(id)[[[UIApplication sharedApplication] keyWindow] recursiveDescription]'</span>\n    <span class=\"n\">view_hierarchy</span> <span class=\"o\">=</span> <span class=\"n\">currentFrame</span><span class=\"p\">.</span><span class=\"n\">EvaluateExpression</span><span class=\"p\">(</span><span class=\"n\">view_hierarchy_command</span><span class=\"p\">).</span><span class=\"n\">GetObjectDescription</span><span class=\"p\">()</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">match</span> <span class=\"ow\">in</span> <span class=\"n\">re</span><span class=\"p\">.</span><span class=\"n\">finditer</span><span class=\"p\">(</span><span class=\"s\">'.*&lt;UIButton: (0x[0-9a-fA-F]*);.*'</span><span class=\"p\">,</span> <span class=\"n\">view_hierarchy</span><span class=\"p\">,</span> <span class=\"n\">re</span><span class=\"p\">.</span><span class=\"n\">IGNORECASE</span><span class=\"p\">):</span>\n\n        <span class=\"n\">view</span> <span class=\"o\">=</span> <span class=\"n\">match</span><span class=\"p\">.</span><span class=\"n\">groups</span><span class=\"p\">()[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n\n        <span class=\"n\">created_command</span> <span class=\"o\">=</span> <span class=\"s\">'(NSString *)[ (id)'</span> <span class=\"o\">+</span> <span class=\"n\">view</span> <span class=\"o\">+</span> <span class=\"s\">' currentTitle]'</span>\n        <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">currentFrame</span><span class=\"p\">.</span><span class=\"n\">EvaluateExpression</span><span class=\"p\">(</span><span class=\"n\">created_command</span><span class=\"p\">).</span><span class=\"n\">GetObjectDescription</span><span class=\"p\">()</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">title</span> <span class=\"o\">==</span> <span class=\"n\">options</span><span class=\"p\">.</span><span class=\"n\">needle</span><span class=\"p\">:</span>\n            <span class=\"k\">print</span> <span class=\"o\">&gt;&gt;</span><span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"n\">view</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">print</span> <span class=\"o\">&gt;&gt;</span><span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"s\">\"Not Found\"</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">__lldb_init_module</span><span class=\"p\">(</span><span class=\"n\">debugger</span><span class=\"p\">,</span> <span class=\"n\">internal_dict</span><span class=\"p\">):</span>\n    <span class=\"n\">debugger</span><span class=\"p\">.</span><span class=\"n\">HandleCommand</span><span class=\"p\">(</span><span class=\"s\">'command script add -f '</span> <span class=\"o\">+</span> <span class=\"n\">__name__</span> <span class=\"o\">+</span> <span class=\"s\">'.filter_button_by_label filter_button_by_label'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>This is an example of how to get the memory address of a button from the text of the button label. It can be called like <code class=\"language-plaintext highlighter-rouge\">filter_button_by_label -n \"Press me\"</code> and it will return the memory address of that button.</p>\n\n<p>So the whole flow of changing the color of a button has changed to:</p>\n\n<p><img src=\"https://diamantidis.github.io/assets/lldb2/final_commands.png\" alt=\"final flow to change button screenshot\" /></p>\n\n<p>which is much shorter and easier to remember and therefore use compared to the first implementation.</p>\n\n<h2 id=\"chisel\"><a href=\"https://github.com/facebook/chisel\">Chisel</a></h2>\n<p>Above all these, there is already an open sourced collection of LLDB commands provided by Facebook, named <a href=\"https://github.com/facebook/chisel\">Chisel</a>.\nIt provides a plethora of commands that probably solves most of the problems any iOS developer may face.</p>\n\n<blockquote>\n  <p>Hint: If you find Chisel interesting and you would like to contribute or somehow redistribute it, spend some time reading the <a href=\"https://github.com/facebook/chisel/blob/master/CONTRIBUTING.md\">contributing documentation</a> and the <a href=\"https://github.com/facebook/chisel/blob/master/LICENSE\">license</a>.</p>\n</blockquote>\n\n<p>Two of my favourite commands are the following:</p>\n\n<ul>\n  <li><code class=\"language-plaintext highlighter-rouge\">findinstances</code> which can be used to find instances of specified ObjC classes, and</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">pcurl</code> which can be used to print the NSURLRequest as curl command, that can later be used for debugging purposes.</li>\n</ul>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>That’s it for now!! I chose to write those two posts regarding LLDB expressions, because I am an advocate of always trying to improve the workflow and remove some of the burdens that come “by default” with each tool.</p>\n\n<p>Furthermore, I decided to follow this flow and not just mention the final solution or just a tool, because digging deeper and understanding how the tools work and how they are built has each own benefits. Reinventing the wheel is not always the right approach to solve some problems, but most of the time is at least educational and enjoyable. Last but not least, by acquiring this knowledge, someone not only makes his life easier when working on UI changes, but also can improve his skills in other areas (e.g. LLDB, Python) and ultimately get a greater confidence on his skills and the ability to overcome any problems that may arise.</p>\n\n<blockquote>\n  <p>There is nothing impossible to him who will try.</p>\n  <ul>\n    <li>Alexander the Great</li>\n  </ul>\n</blockquote>\n\n",
            "tags": ["iOS","Xcode","LLDB","Python"],
            "image": "https://diamantidis.github.io/assets/socialIcon.png"
        },
        
        {
            "id": "https://diamantidis.github.io/2018/09/30/modifying-ui-elements-with-lldb",
            "url": "https://diamantidis.github.io/2018/09/30/modifying-ui-elements-with-lldb",
            "title": "Modifying UI elements with LLDB",
            "date_published": "2018-09-30T08:48:00+00:00",
            
            "date_modified": "2018-09-30T08:48:00+00:00",
            
            "author": {
                "name": "Ioannis Diamantidis",
                "url": "https://diamantidis.github.io"
            },
            "summary": "<p>Have you ever been in a situation where you have to experiment with UI and change colors frequent? \nDoes the designer or PM asks for changes in font sizes and you don’t want to stuck in the loop of</p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>while(!designer.isSatisfied) {\n    doChanges()\n    build()\n    run()\n    demo()\n} \n</code></pre></div></div>\n<p>Imagine that you have something like the inspect element tools of a browser for iOS and \nan alternative to javascript to change the UI elements of the screen on the fly without having to rebuild the project.</p>\n\n",
            "content_html": "<p>Have you ever been in a situation where you have to experiment with UI and change colors frequent? \nDoes the designer or PM asks for changes in font sizes and you don’t want to stuck in the loop of</p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>while(!designer.isSatisfied) {\n    doChanges()\n    build()\n    run()\n    demo()\n} \n</code></pre></div></div>\n<p>Imagine that you have something like the inspect element tools of a browser for iOS and \nan alternative to javascript to change the UI elements of the screen on the fly without having to rebuild the project.</p>\n\n<p>Using <code class=\"language-plaintext highlighter-rouge\">LLDB expressions</code> is the answer to this problem. <a href=\"http://lldb.llvm.org/\">LLDB</a> is the default debugger in Xcode.\nWith LLDB expressions, it is possible to modify the UI of a running app without changing a single line of code.</p>\n\n<h2 id=\"basic-commands\">Basic commands</h2>\n\n<p>To be able to run an LLDB expression, you only have to press the pause button on tool bar. \n<img src=\"https://diamantidis.github.io/assets/lldb/pause_button.png\" alt=\"Pause button screenshot\" /></p>\n\n<p>In the debugger area, on the bottom right corner, there is a command line prompt.\nThere, the LLDB expressions are entered. You can start by typing <code class=\"language-plaintext highlighter-rouge\">help</code> to see the range of the available commands. Also by running <code class=\"language-plaintext highlighter-rouge\">help &lt;command&gt;</code>, some information about this command will be presented.</p>\n\n<p><img src=\"https://diamantidis.github.io/assets/lldb/help_command.png\" alt=\"Help Command screenshot\" /></p>\n\n<blockquote>\n  <p>Hint: You can even type <code class=\"language-plaintext highlighter-rouge\">help help</code> to see what <code class=\"language-plaintext highlighter-rouge\">help</code> command does. :stuck_out_tongue_closed_eyes:</p>\n</blockquote>\n\n<p>Another useful command is the command <code class=\"language-plaintext highlighter-rouge\">print</code> which is simply printing values.\nYou can use this command when using a breakpoint and you want to see the value of a variable. The result of printing, except from the value of the variable, has another value, like for example <code class=\"language-plaintext highlighter-rouge\">$R0</code>. You can use this as a reference for the value. For example, you can try <code class=\"language-plaintext highlighter-rouge\">print $R0 + 1</code></p>\n\n<p>One more command is the <code class=\"language-plaintext highlighter-rouge\">expression</code>, which can be use to modify (and not only) some value.\nIf you have a variable <code class=\"language-plaintext highlighter-rouge\">var foo = \"bar\"</code>, and you have a breakpoint after this command, you can modify the value by running <code class=\"language-plaintext highlighter-rouge\">expression foo = \"hoo\"</code>.</p>\n\n<p><img src=\"https://diamantidis.github.io/assets/lldb/print_command.png\" alt=\"Print and Expression Command screenshot\" /></p>\n\n<blockquote>\n  <p>Hint: You can also create temporal variable for debugging by running <code class=\"language-plaintext highlighter-rouge\">expression int $variable = 1</code>. The variables are defined in the same way they are defined in C.</p>\n</blockquote>\n\n<blockquote>\n  <p>Hint: <code class=\"language-plaintext highlighter-rouge\">$</code> is used in the name of the variable in order to be available in subsequent expressions. Otherwise, it would be available only for the expression it is defined.</p>\n</blockquote>\n\n<p>Besides than, <code class=\"language-plaintext highlighter-rouge\">expression</code> supports the use of many flags too. You can find more information about the <code class=\"language-plaintext highlighter-rouge\">expression</code> command and the flags by typing <code class=\"language-plaintext highlighter-rouge\">help expression</code>. Actually, <code class=\"language-plaintext highlighter-rouge\">print</code> command is an abbreviation for <code class=\"language-plaintext highlighter-rouge\">expression --</code>. The use of <code class=\"language-plaintext highlighter-rouge\">--</code> signifies the end of flags and the beginning of input, so the commands <code class=\"language-plaintext highlighter-rouge\">print 1</code> and <code class=\"language-plaintext highlighter-rouge\">expression -- 1</code> are equivalent.</p>\n\n<blockquote>\n  <p>Hint: <code class=\"language-plaintext highlighter-rouge\">p</code> and <code class=\"language-plaintext highlighter-rouge\">e</code> can be used as aliases for <code class=\"language-plaintext highlighter-rouge\">print</code> and <code class=\"language-plaintext highlighter-rouge\">expression</code> commands respectively.</p>\n</blockquote>\n\n<p>A disadvantage of the <code class=\"language-plaintext highlighter-rouge\">print</code> command is when printing objects. For example, <code class=\"language-plaintext highlighter-rouge\">p @[ @1, @2 ]</code> will result in <code class=\"language-plaintext highlighter-rouge\">(__NSArrayI *) $0 = 0x0000600001644560 @\"2 elements\"</code>, which doesn’t give a lot of information about the object itself.</p>\n\n<p><code class=\"language-plaintext highlighter-rouge\">expression</code>command comes to our rescue and with the use of the flag <code class=\"language-plaintext highlighter-rouge\">-O</code>, prints the result as an object. So, for the above mentioned example <code class=\"language-plaintext highlighter-rouge\">e -O --  @[ @1, @2 ]</code> will result in</p>\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>&lt;__NSArrayI 0x600001640b40&gt;(\n1,\n2\n)\n</code></pre></div></div>\n\n<p>Don’t worry though, you don’t have to type <code class=\"language-plaintext highlighter-rouge\">e -O --</code> every time you have to print an object, as it also comes with an alias <code class=\"language-plaintext highlighter-rouge\">po</code>(as of print object), so <code class=\"language-plaintext highlighter-rouge\">po @[ @1, @2 ]</code> can be used instead.</p>\n\n<p><img src=\"https://diamantidis.github.io/assets/lldb/printing_objects.png\" alt=\"Printing objects screenshot\" /></p>\n\n<p>Knowing this, we can proceed to more advanced usage and combination of these commands to reach our goal.</p>\n\n<h2 id=\"advanced-commands\">Advanced commands</h2>\n\n<p>As in the previous example, <code class=\"language-plaintext highlighter-rouge\">po</code> command can be used to print Objective-C expressions, thus it can be used to print all the information about the view hierarchy on a running application. \nBy running <code class=\"language-plaintext highlighter-rouge\">po [[[UIApplication sharedApplication] keyWindow] recursiveDescription]</code>, you can see all the view in the view hierarchy along with their memory address and their layout.</p>\n\n<p><img src=\"https://diamantidis.github.io/assets/lldb/view_hierarchy.png\" alt=\"Printing view hierarchy screenshot\" /></p>\n\n<p>Then, by using the <code class=\"language-plaintext highlighter-rouge\">expression</code> we can create a variable from the memory address. By running the command  <code class=\"language-plaintext highlighter-rouge\">e id $myButton = (id)0x7fb3e3608520</code>, the button is assign to the variable <code class=\"language-plaintext highlighter-rouge\">$myButton</code>.</p>\n\n<p>Next, we want to modify the color of the button, again by using the <code class=\"language-plaintext highlighter-rouge\">expression</code> command. <code class=\"language-plaintext highlighter-rouge\">e (void)[$myButton setBackgroundColor:[UIColor blueColor]]</code> will do the job.</p>\n\n<p>Last but not least, we have to refresh the UI to be able to see the change. This can be done by running <code class=\"language-plaintext highlighter-rouge\">e (void)[CATransaction flush]</code>.</p>\n\n<p><img src=\"https://diamantidis.github.io/assets/lldb/changing_button_background_commands.png\" alt=\"Changing button background commands screenshot\" /></p>\n\n<p>And voilà, that’s it, the UIButton now has blue background!! :tada:</p>\n\n<table>\n  <thead>\n    <tr>\n      <th style=\"text-align: center\">Initial button</th>\n      <th style=\"text-align: center\">Final Button</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td style=\"text-align: center\"><img src=\"https://diamantidis.github.io/assets/lldb/initial_button.png\" alt=\"Initial button screenshot\" /></td>\n      <td style=\"text-align: center\"><img src=\"https://diamantidis.github.io/assets/lldb/final_button.png\" alt=\"Final button screenshot\" /></td>\n    </tr>\n  </tbody>\n</table>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>So far, so good, our goal is reached and we can call it a day. But this post only scratches the surface of LLDB capabilities and more posts are to come on this topic.</p>\n\n<p>Using lldb expressions, while working on UI changes, can result in many benefits for the app, like shorter feedback loop, which increases the possibilities for a better product and user experience as it is easier for the developer to experiment with different variation of the UI.</p>\n\n<p>Furthermore, it can result in higher efficiency for the developer because the builds will be less frequent and thus less idle time will be spent waiting to build the project.</p>\n\n<p>Closing, and as it is my first actual post, I choose the following quote. See you soon!!</p>\n\n<blockquote>\n  <p>Do the difficult things while they are easy and do the great things while they are small. A journey of a thousand miles must begin with a single step. <br />\n— Lao Tzu</p>\n</blockquote>\n",
            "tags": ["iOS","Xcode","LLDB"],
            "image": "https://diamantidis.github.io/assets/socialIcon.png"
        },
        
        {
            "id": "https://diamantidis.github.io/2018/09/23/why-i-start-a-blog",
            "url": "https://diamantidis.github.io/2018/09/23/why-i-start-a-blog",
            "title": "Why I start a blog",
            "date_published": "2018-09-23T08:15:00+00:00",
            
            "date_modified": "2018-09-23T08:15:00+00:00",
            
            "author": {
                "name": "Ioannis Diamantidis",
                "url": "https://diamantidis.github.io"
            },
            "summary": "<h2 id=\"hello-world-this-is-my-first-blog-post-\">Hello world, this is my first blog post!! 🚀</h2>\n<p>My name is Ioannis Diamantidis, I am a software developer and a few months ago I decided to start my own blog. Reading other developer’s blogposts every day, I decided that it is worth trying to start writing too, about my ideas and topics that I am interested in. The content of the blog will be related to software development(or at least I will try to). My intent is not to focus on one specific area, like iOS, but rather be more diverse.</p>\n\n",
            "content_html": "<h2 id=\"hello-world-this-is-my-first-blog-post-\">Hello world, this is my first blog post!! 🚀</h2>\n<p>My name is Ioannis Diamantidis, I am a software developer and a few months ago I decided to start my own blog. Reading other developer’s blogposts every day, I decided that it is worth trying to start writing too, about my ideas and topics that I am interested in. The content of the blog will be related to software development(or at least I will try to). My intent is not to focus on one specific area, like iOS, but rather be more diverse.</p>\n\n<h2 id=\"why\">Why?</h2>\n\n<p>There are many reasons that lead me to the decision of starting my own blog.</p>\n\n<p><strong>Improve my writing skills</strong></p>\n\n<p>I am of the opinion that practice makes perfection. So, by writing more often, I will eventually improve my ability to express and describe my ideas and thoughts better.</p>\n\n<p><strong>Improve my overall skills</strong></p>\n\n<p>I believe that writing about or trying to teach a topic is a great way for someone to really learn more about it. Writing or teaching requires some deeper understanding of the topic in order to be able to describe it or answer questions.\nFurthermore, publicly expressing ideas and opinions is a great way to receive some valuable feedback from the readers.</p>\n\n<p><strong>Give back to the community</strong></p>\n\n<p>Throughout my career so far, I have learned a lot from the community and I consider this blog as a way to give back to the community and help other people get better through my blog posts. Writing about problems that I faced, technologies that I used - and I feel is worth writing(for me) and worth reading and learning(for the reader) - and practices that I follow and help me develop through my career, I hope that will be beneficial for some of the readers.</p>\n\n<p><strong>Explore some new technologies/tools</strong></p>\n\n<p>I have a long list of technologies that I want to experiment with but I couldn’t find any opportunity to try them. Writing a blog post or a tutorial maybe it’s a good way to remove some of them from my todo list.</p>\n\n<p><strong>Reference for the future</strong></p>\n\n<p>When I am exploring a new technology or doing something I wasn’t aware before, I have the tendency to keep a “How to” record as a reference for the future. So, instead of keeping files for these records(and struggle to find them when I need them), I will have this blog and use some of the blogposts as a reference for the future me(and others of course).</p>\n\n<p><strong>Explore Jekyll</strong></p>\n\n<p>Last but not least, it is a great opportunity to explore and built something with Jekyll and remove it once and for all from my todo list(You guess right, a blog post of my thoughts on Jekyll maybe is on the way). :smile:</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>This is it for my first blog post. I am really excited to start this endeavour and I hope that this blog will justify the reasons for starting it and I will eventually reach my goals. Writing a blog and keeping it updated requires some commitment, so I will try to publish a new blogpost initially at least once every two weeks and as I am getting more familiar and better at writing I will try to do it more often.\nLastly, I will try to close the blog posts with a quote that I think that match the content. This time is the <code class=\"language-plaintext highlighter-rouge\">boy scout rule</code> and it’s application in many aspect of our lives.</p>\n<blockquote>\n  <p>Always leave the campground (or code, world, everything) a little better than you found it.</p>\n</blockquote>\n",
            "tags": ["Personal","Blog"],
            "image": "https://diamantidis.github.io/assets/socialIcon.png"
        }
        
    ]
}